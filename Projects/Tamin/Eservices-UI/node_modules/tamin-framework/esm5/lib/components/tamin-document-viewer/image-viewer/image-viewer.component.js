/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import { TaminLazyLoadService } from '../../../services/tamin-lazy-load/tamin-lazy-load.service';
import { Subscription } from 'rxjs';
var ImageViewerComponent = /** @class */ (function () {
    function ImageViewerComponent(taminLazyLoadService) {
        this.taminLazyLoadService = taminLazyLoadService;
        this.width = '100%';
        this.height = '300px';
        this.subscription = new Subscription();
    }
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} url
     * @return {?}
     */
    ImageViewerComponent.prototype.open = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        var _this = this;
        this.subscription.add(this.taminLazyLoadService.loadJs('assets/viewerjs/dist/viewer.js').subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.subscription.add(_this.taminLazyLoadService.loadCss('assets/viewerjs/dist/viewer.css').subscribe((/**
             * @param {?} value1
             * @return {?}
             */
            function (value1) {
                _this.img.nativeElement.src = url;
                /** @type {?} */
                var viewer = new Viewer(_this.img.nativeElement, {
                    inline: false,
                    viewed: /**
                     * @return {?}
                     */
                    function () {
                        viewer.zoomTo(1);
                    },
                });
            })));
        })));
    };
    /**
     * @return {?}
     */
    ImageViewerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscription.unsubscribe();
    };
    ImageViewerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-image-viewer',
                    template: "<img alt=\"image\" #img style=\"max-width:100%;max-height:100%;cursor:pointer\">\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ImageViewerComponent.ctorParameters = function () { return [
        { type: TaminLazyLoadService }
    ]; };
    ImageViewerComponent.propDecorators = {
        img: [{ type: ViewChild, args: ['img',] }],
        width: [{ type: Input }],
        height: [{ type: Input }]
    };
    return ImageViewerComponent;
}());
export { ImageViewerComponent };
if (false) {
    /** @type {?} */
    ImageViewerComponent.prototype.img;
    /** @type {?} */
    ImageViewerComponent.prototype.width;
    /** @type {?} */
    ImageViewerComponent.prototype.height;
    /**
     * @type {?}
     * @private
     */
    ImageViewerComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ImageViewerComponent.prototype.taminLazyLoadService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utdmlld2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RhbWluLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RhbWluLWRvY3VtZW50LXZpZXdlci9pbWFnZS12aWV3ZXIvaW1hZ2Utdmlld2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFxQixTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekYsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sMkRBQTJELENBQUM7QUFDL0YsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUlsQztJQWFFLDhCQUFvQixvQkFBMEM7UUFBMUMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUxyRCxVQUFLLEdBQUcsTUFBTSxDQUFDO1FBQ2YsV0FBTSxHQUFHLE9BQU8sQ0FBQztRQUVsQixpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFHMUMsQ0FBQzs7OztJQUVELHVDQUFROzs7SUFBUjtJQUNBLENBQUM7Ozs7O0lBRUQsbUNBQUk7Ozs7SUFBSixVQUFLLEdBQVc7UUFBaEIsaUJBZUM7UUFkQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxDQUFDLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsS0FBSztZQUNwRyxLQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FDbkIsS0FBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDLFNBQVM7Ozs7WUFBQyxVQUFBLE1BQU07Z0JBQ25GLEtBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7O29CQUMzQixNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsS0FBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUU7b0JBQ2hELE1BQU0sRUFBRSxLQUFLO29CQUNiLE1BQU07Ozs7d0JBQ0osTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbkIsQ0FBQztpQkFDRixDQUFDO1lBQ0osQ0FBQyxFQUFDLENBQ0gsQ0FBQztRQUNKLENBQUMsRUFBQyxDQUNILENBQUM7SUFDSixDQUFDOzs7O0lBRUQsMENBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDOztnQkF0Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLDhGQUE0Qzs7aUJBRTdDOzs7O2dCQVRPLG9CQUFvQjs7O3NCQVl6QixTQUFTLFNBQUMsS0FBSzt3QkFDZixLQUFLO3lCQUNMLEtBQUs7O0lBOEJSLDJCQUFDO0NBQUEsQUF2Q0QsSUF1Q0M7U0FsQ1ksb0JBQW9COzs7SUFFL0IsbUNBQWtDOztJQUNsQyxxQ0FBd0I7O0lBQ3hCLHNDQUEwQjs7Ozs7SUFFMUIsNENBQTBDOzs7OztJQUU5QixvREFBa0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUYW1pbkxhenlMb2FkU2VydmljZX0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvdGFtaW4tbGF6eS1sb2FkL3RhbWluLWxhenktbG9hZC5zZXJ2aWNlJztcbmltcG9ydCB7U3Vic2NyaXB0aW9ufSBmcm9tICdyeGpzJztcblxuZGVjbGFyZSBsZXQgVmlld2VyOiBhbnk7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RhbWluLWltYWdlLXZpZXdlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbWFnZS12aWV3ZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9pbWFnZS12aWV3ZXIuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIEltYWdlVmlld2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBWaWV3Q2hpbGQoJ2ltZycpIGltZzogRWxlbWVudFJlZjtcbiAgQElucHV0KCkgd2lkdGggPSAnMTAwJSc7XG4gIEBJbnB1dCgpIGhlaWdodCA9ICczMDBweCc7XG5cbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0YW1pbkxhenlMb2FkU2VydmljZTogVGFtaW5MYXp5TG9hZFNlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbiAgb3Blbih1cmw6IHN0cmluZykge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLmFkZCh0aGlzLnRhbWluTGF6eUxvYWRTZXJ2aWNlLmxvYWRKcygnYXNzZXRzL3ZpZXdlcmpzL2Rpc3Qvdmlld2VyLmpzJykuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKFxuICAgICAgICAgIHRoaXMudGFtaW5MYXp5TG9hZFNlcnZpY2UubG9hZENzcygnYXNzZXRzL3ZpZXdlcmpzL2Rpc3Qvdmlld2VyLmNzcycpLnN1YnNjcmliZSh2YWx1ZTEgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbWcubmF0aXZlRWxlbWVudC5zcmMgPSB1cmw7XG4gICAgICAgICAgICBjb25zdCB2aWV3ZXIgPSBuZXcgVmlld2VyKHRoaXMuaW1nLm5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgaW5saW5lOiBmYWxzZSxcbiAgICAgICAgICAgICAgdmlld2VkKCkge1xuICAgICAgICAgICAgICAgIHZpZXdlci56b29tVG8oMSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIl19