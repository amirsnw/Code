/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import { FieldBaseComponent } from '../../../base/field-base.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class TaminFieldStaticMultilineTextComponent extends FieldBaseComponent {
    constructor() {
        super(...arguments);
        this.rows = 4;
        this.cols = 50;
    }
    /**
     * @return {?}
     */
    initializeComponent() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        /** @type {?} */
        const theValue = value == null ? '' : value;
        this.inputElement.nativeElement.value = this.persianNumberPipe.transform(value);
        this.onChange(value);
    }
}
TaminFieldStaticMultilineTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-field-static-multiline-text',
                template: "<textarea\n  [disabled] = \"control.disabled\"\n  readonly=\"readonly\"\n  class=\"tamin-form-control-input\"\n  style=\"background-color: #efeff0; border-color: #cacacb;\"\n  [attr.rows]=\"rows\"\n  [attr.cols]=\"cols\"\n  #inputElement></textarea>\n<span>{{hint}}</span>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TaminFieldStaticMultilineTextComponent)),
                        multi: true
                    }
                ],
                styles: [":host{width:100%}.tamin-form-control-input{height:inherit!important}"]
            }] }
];
TaminFieldStaticMultilineTextComponent.propDecorators = {
    rows: [{ type: Input }],
    cols: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TaminFieldStaticMultilineTextComponent.prototype.rows;
    /** @type {?} */
    TaminFieldStaticMultilineTextComponent.prototype.cols;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tZmllbGQtc3RhdGljLW11bHRpbGluZS10ZXh0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RhbWluLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2ZpZWxkcy90YW1pbi1maWVsZC1zdGF0aWMtbXVsdGlsaW5lLXRleHQvdGFtaW4tZmllbGQtc3RhdGljLW11bHRpbGluZS10ZXh0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBY2pELE1BQU0sT0FBTyxzQ0FBdUMsU0FBUSxrQkFBa0I7SUFaOUU7O1FBYVcsU0FBSSxHQUFHLENBQUMsQ0FBQztRQUNULFNBQUksR0FBRyxFQUFFLENBQUM7SUFVckIsQ0FBQzs7OztJQVJDLG1CQUFtQjtJQUNuQixDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxLQUFVOztjQUNiLFFBQVEsR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUs7UUFDM0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDOzs7WUF2QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxtQ0FBbUM7Z0JBQzdDLDhSQUFpRTtnQkFFakUsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE9BQU8sRUFBRSxpQkFBaUI7d0JBQzFCLFdBQVcsRUFBRSxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMsc0NBQXNDLEVBQUM7d0JBQ3JFLEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGOzthQUNGOzs7bUJBRUUsS0FBSzttQkFDTCxLQUFLOzs7O0lBRE4sc0RBQWtCOztJQUNsQixzREFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0ZpZWxkQmFzZUNvbXBvbmVudH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9maWVsZC1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQge05HX1ZBTFVFX0FDQ0VTU09SfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RhbWluLWZpZWxkLXN0YXRpYy1tdWx0aWxpbmUtdGV4dCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90YW1pbi1maWVsZC1zdGF0aWMtbXVsdGlsaW5lLXRleHQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90YW1pbi1maWVsZC1zdGF0aWMtbXVsdGlsaW5lLXRleHQuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUYW1pbkZpZWxkU3RhdGljTXVsdGlsaW5lVGV4dENvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBUYW1pbkZpZWxkU3RhdGljTXVsdGlsaW5lVGV4dENvbXBvbmVudCBleHRlbmRzIEZpZWxkQmFzZUNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHJvd3MgPSA0O1xuICBASW5wdXQoKSBjb2xzID0gNTA7XG5cbiAgaW5pdGlhbGl6ZUNvbXBvbmVudCgpIHtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IHRoZVZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC52YWx1ZSA9IHRoaXMucGVyc2lhbk51bWJlclBpcGUudHJhbnNmb3JtKHZhbHVlKTtcbiAgICB0aGlzLm9uQ2hhbmdlKHZhbHVlKTtcbiAgfVxufVxuIl19