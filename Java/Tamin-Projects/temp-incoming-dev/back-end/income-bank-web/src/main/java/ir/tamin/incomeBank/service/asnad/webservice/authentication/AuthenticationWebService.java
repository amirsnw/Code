package ir.tamin.incomeBank.service.asnad.webservice.authentication;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.2.4-b01 Generated
 * source version: 2.2
 *
 */
//@WebServiceClient(name = "AuthenticationWebService", targetNamespace = "http://tempuri.org/", wsdlLocation = "file:/C:/Users/s_maknooni/AppData/Local/Temp/tempdir3738384336223902370.tmp/AuthenticationWebService_1.wsdl")
@WebServiceClient(name = "AuthenticationWebService", targetNamespace = "http://tempuri.org/", wsdlLocation = "file:/wsdl/AuthenticationWebService.wsdl")
public class AuthenticationWebService
        extends Service {

    private final static URL AUTHENTICATIONWEBSERVICE_WSDL_LOCATION;
    private final static WebServiceException AUTHENTICATIONWEBSERVICE_EXCEPTION;
    private final static QName AUTHENTICATIONWEBSERVICE_QNAME = new QName("http://tempuri.org/", "AuthenticationWebService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
//            url = new URL("file:/C:/Users/s_maknooni/AppData/Local/Temp/tempdir3738384336223902370.tmp/AuthenticationWebService_1.wsdl");
            url = new URL("file:/wsdl/AuthenticationWebService.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        AUTHENTICATIONWEBSERVICE_WSDL_LOCATION = url;
        AUTHENTICATIONWEBSERVICE_EXCEPTION = e;
    }

    public AuthenticationWebService() {
        super(__getWsdlLocation(), AUTHENTICATIONWEBSERVICE_QNAME);
    }

    public AuthenticationWebService(WebServiceFeature... features) {
        super(__getWsdlLocation(), AUTHENTICATIONWEBSERVICE_QNAME, features);
    }

    public AuthenticationWebService(URL wsdlLocation) {
        super(wsdlLocation, AUTHENTICATIONWEBSERVICE_QNAME);
    }

    public AuthenticationWebService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, AUTHENTICATIONWEBSERVICE_QNAME, features);
    }

    public AuthenticationWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AuthenticationWebService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return returns AuthenticationWebServiceSoap
     */
    @WebEndpoint(name = "AuthenticationWebServiceSoap")
    public AuthenticationWebServiceSoap getAuthenticationWebServiceSoap() {
        return super.getPort(new QName("http://tempuri.org/", "AuthenticationWebServiceSoap"), AuthenticationWebServiceSoap.class);
    }

    /**
     *
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to
     * configure on the proxy. Supported features not in the
     * <code>features</code> parameter will have their default values.
     * @return returns AuthenticationWebServiceSoap
     */
    @WebEndpoint(name = "AuthenticationWebServiceSoap")
    public AuthenticationWebServiceSoap getAuthenticationWebServiceSoap(WebServiceFeature... features) {
        return super.getPort(new QName("http://tempuri.org/", "AuthenticationWebServiceSoap"), AuthenticationWebServiceSoap.class, features);
    }

    private static URL __getWsdlLocation() {
        if (AUTHENTICATIONWEBSERVICE_EXCEPTION != null) {
            throw AUTHENTICATIONWEBSERVICE_EXCEPTION;
        }
        return AUTHENTICATIONWEBSERVICE_WSDL_LOCATION;
    }

}
