/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { TaminRestService } from '../tamin-rest-service/tamin-rest.service';
import { TaminStorageService } from '../tamin-storage/tamin-storage.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../tamin-rest-service/tamin-rest.service";
import * as i3 from "../tamin-storage/tamin-storage.service";
import * as i4 from "@angular/common/http";
var TaminSecurityService = /** @class */ (function () {
    function TaminSecurityService(taminApplicationConfig, router, taminRestService, taminStorageService, httpClient) {
        this.taminApplicationConfig = taminApplicationConfig;
        this.router = router;
        this.taminRestService = taminRestService;
        this.taminStorageService = taminStorageService;
        this.httpClient = httpClient;
        this._currentUser = null;
        this.tokenName = 'access_token';
        this.tokenExpire = 'expires_in';
        this.redirectUrl = 'redirect_url';
        // debugger;
    }
    Object.defineProperty(TaminSecurityService.prototype, "currentUser", {
        get: /**
         * @return {?}
         */
        function () {
            return this._currentUser;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    TaminSecurityService.prototype.addRedirectUrl = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.taminStorageService.set(this.redirectUrl, url);
    };
    /**
     * @return {?}
     */
    TaminSecurityService.prototype.getRedirectUrl = /**
     * @return {?}
     */
    function () {
        return this.taminStorageService.get(this.redirectUrl);
    };
    /**
     * @return {?}
     */
    TaminSecurityService.prototype.removeRedirectUrl = /**
     * @return {?}
     */
    function () {
        this.taminStorageService.remove(this.redirectUrl);
    };
    /**
     * @private
     * @param {?} token
     * @param {?} expireIn
     * @return {?}
     */
    TaminSecurityService.prototype.addToken = /**
     * @private
     * @param {?} token
     * @param {?} expireIn
     * @return {?}
     */
    function (token, expireIn) {
        this.taminStorageService.set(this.tokenName, token);
        this.taminStorageService.set(this.tokenExpire, expireIn);
    };
    /**
     * @return {?}
     */
    TaminSecurityService.prototype.getToken = /**
     * @return {?}
     */
    function () {
        return this.taminStorageService.get(this.tokenName);
    };
    /**
     * @return {?}
     */
    TaminSecurityService.prototype.hasToken = /**
     * @return {?}
     */
    function () {
        return this.taminStorageService.exists(this.tokenName);
    };
    /**
     * @return {?}
     */
    TaminSecurityService.prototype.removeToken = /**
     * @return {?}
     */
    function () {
        this.taminStorageService.remove(this.tokenName);
        this.taminStorageService.remove(this.tokenExpire);
    };
    /**
     * @return {?}
     */
    TaminSecurityService.prototype.checkToken = /**
     * @return {?}
     */
    function () {
        if (!this.taminStorageService.exists(this.tokenName) || !this.taminStorageService.exists(this.tokenExpire)) {
            return false;
        }
        /** @type {?} */
        var accessToken = this.taminStorageService.get(this.tokenName);
        /** @type {?} */
        var expiresIn = this.taminStorageService.get(this.tokenExpire);
        /** @type {?} */
        var thisTime = Number(new Date().getTime());
        if (Number(thisTime) > Number(expiresIn)) {
            this.removeToken();
            return false;
        }
        return true;
    };
    /**
     * @return {?}
     */
    TaminSecurityService.prototype.loginCallbackCheck = /**
     * @return {?}
     */
    function () {
        // debugger;
        /** @type {?} */
        var tmp1 = window.location.hash.replace('#', '').split('&');
        /** @type {?} */
        var hashParams = tmp1.map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var t = value.split('=');
            /** @type {?} */
            var n = t[0];
            /** @type {?} */
            var v = t[1];
            /** @type {?} */
            var result = {};
            result[n] = v;
            return result;
        }));
        /** @type {?} */
        var tmp2 = window.location.search.replace('?', '').split('&');
        /** @type {?} */
        var searchParams = tmp2.map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var t = value.split('=');
            /** @type {?} */
            var n = t[0];
            /** @type {?} */
            var v = t[1];
            /** @type {?} */
            var result = {};
            result[n] = v;
            return result;
        }));
        /** @type {?} */
        var accessToken = hashParams.find((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return value.hasOwnProperty('access_token');
        }));
        /** @type {?} */
        var expiresIn = hashParams.find((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return value.hasOwnProperty('expires_in');
        }));
        /** @type {?} */
        var hp = searchParams.find((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return value.hasOwnProperty('hp');
        }));
        if (accessToken && expiresIn) {
            /** @type {?} */
            var currentTime = new Date().getTime();
            this.addToken(accessToken['access_token'], Number(currentTime) + (Number(expiresIn['expires_in']) * 1000));
            window.history.replaceState({}, document.title, '');
            if (hp) {
                window.history.replaceState({}, document.title, '/#/' + hp['hp']);
            }
            else {
                window.history.replaceState({}, document.title, '/#/main');
            }
        }
    };
    /**
     * @return {?}
     */
    TaminSecurityService.prototype.getUserName = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.taminRestService.getAll(_this.taminApplicationConfig.getUserNameUrl)
                .then((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                resolve(data.data.firstName + " " + data.data.lastName);
            }))
                .catch((/**
             * @param {?} reason
             * @return {?}
             */
            function (reason) {
                reject('');
            }));
        }));
    };
    /**
     * @return {?}
     */
    TaminSecurityService.prototype.getCurrentUser = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._currentUser = null;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.taminRestService.getAll(_this.taminApplicationConfig.getUserNameUrl)
                .then((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this._currentUser = data.data;
                resolve(data.data);
            }))
                .catch((/**
             * @param {?} reason
             * @return {?}
             */
            function (reason) {
                reject(reason);
            }));
        }));
    };
    /**
     * @private
     * @return {?}
     */
    TaminSecurityService.prototype.redirectToLoginWithCordova = /**
     * @private
     * @return {?}
     */
    function () {
        this.router.navigate(['login']);
        // const url = [
        //   this.taminApplicationConfig.authenticationEndpoint,
        //   '?',
        //   // `redirect_uri=${window.location.href}`,
        //   `redirect_uri=${this.taminApplicationConfig.redirectUrl}`,
        //   '&',
        //   `response_type=${this.taminApplicationConfig.responseType}`,
        //   '&',
        //   `client_id=${this.taminApplicationConfig.clientId}`
        // ].join('');
        //
        // SafariViewController.isAvailable(function (available) {
        //   if (available) {
        //     SafariViewController.show(
        //       {
        //         url: url
        //       },
        //       function (result) {
        //       },
        //       function (error) {
        //       }
        //     );
        //   }
        // });
    };
    /**
     * @private
     * @param {?=} url
     * @return {?}
     */
    TaminSecurityService.prototype.redirectToLoginWithBrowser = /**
     * @private
     * @param {?=} url
     * @return {?}
     */
    function (url) {
        if (url === void 0) { url = ''; }
        this.removeToken();
        /** @type {?} */
        var adressParts = url === '' ? window.location.href.split('/#/') : url;
        /** @type {?} */
        var hp = '';
        /** @type {?} */
        var returnUrl = '';
        if (adressParts.length === 1) {
            returnUrl = adressParts[0];
        }
        else {
            hp = adressParts[1];
            returnUrl = adressParts[0] + '?hp=' + hp;
        }
        window.location.href = [
            this.taminApplicationConfig.authenticationEndpoint,
            '?',
            "redirect_uri=" + this.taminApplicationConfig.redirectUrl,
            '&',
            "response_type=" + this.taminApplicationConfig.responseType,
            '&',
            "client_id=" + this.taminApplicationConfig.clientId
        ].join('');
    };
    /**
     * @param {?=} url
     * @return {?}
     */
    TaminSecurityService.prototype.redirectToLogin = /**
     * @param {?=} url
     * @return {?}
     */
    function (url) {
        if (url === void 0) { url = ''; }
        if (window.hasOwnProperty('cordova')) {
            this.redirectToLoginWithCordova();
        }
        else {
            if (url !== '') {
                this.addRedirectUrl(url);
            }
            this.redirectToLoginWithBrowser(url);
        }
    };
    /**
     * @return {?}
     */
    TaminSecurityService.prototype.getLoginUrl = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tmp = [
            this.taminApplicationConfig.authenticationEndpoint,
            '?',
            "redirect_uri=" + this.taminApplicationConfig.redirectUrl,
            '&',
            "response_type=" + this.taminApplicationConfig.responseType,
            '&',
            "client_id=" + this.taminApplicationConfig.clientId
        ].join('');
        return tmp;
    };
    /**
     * @return {?}
     */
    TaminSecurityService.prototype.redirectToLogout = /**
     * @return {?}
     */
    function () {
        if (window.hasOwnProperty('cordova')) {
            this.removeToken();
        }
        else {
            /** @type {?} */
            var returnUrl = this.taminApplicationConfig.baseUrl;
            this.removeToken();
            window.location.href =
                this.taminApplicationConfig.logoutUrl + "?redirect_uri=" + this.taminApplicationConfig.redirectUrl + "&response_type=" + this.taminApplicationConfig.responseType + "&client_id=" + this.taminApplicationConfig.clientId;
        }
    };
    /**
     * @param {?} un
     * @param {?} pw
     * @param {?} clientId
     * @param {?} security
     * @return {?}
     */
    TaminSecurityService.prototype.mobileLogin = /**
     * @param {?} un
     * @param {?} pw
     * @param {?} clientId
     * @param {?} security
     * @return {?}
     */
    function (un, pw, clientId, security) {
        var _this = this;
        this.removeToken();
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            taminLogin.login(un, pw, _this.taminApplicationConfig.authenticationEndpoint, clientId, security, (/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var result = JSON.parse(value);
                /** @type {?} */
                var currentTime = new Date().getTime();
                _this.addToken(result.access_token, Number(currentTime) + (Number(result.expires_in) * 1000));
                resolve();
            }), (/**
             * @return {?}
             */
            function () {
                reject();
            }));
        }));
    };
    /**
     * @param {?} url
     * @return {?}
     */
    TaminSecurityService.prototype.hasAccressTo = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.httpClient.get(url)
                .toPromise()
                .then((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                resolve(true);
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                if (error.status === 401) {
                    resolve(false);
                }
            }));
        }));
    };
    TaminSecurityService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    TaminSecurityService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: ['taminApplicationConfig',] }] },
        { type: Router },
        { type: TaminRestService },
        { type: TaminStorageService },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ TaminSecurityService.ngInjectableDef = i0.defineInjectable({ factory: function TaminSecurityService_Factory() { return new TaminSecurityService(i0.inject("taminApplicationConfig"), i0.inject(i1.Router), i0.inject(i2.TaminRestService), i0.inject(i3.TaminStorageService), i0.inject(i4.HttpClient)); }, token: TaminSecurityService, providedIn: "root" });
    return TaminSecurityService;
}());
export { TaminSecurityService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype._currentUser;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.tokenName;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.tokenExpire;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.redirectUrl;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.taminApplicationConfig;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.taminRestService;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.taminStorageService;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,