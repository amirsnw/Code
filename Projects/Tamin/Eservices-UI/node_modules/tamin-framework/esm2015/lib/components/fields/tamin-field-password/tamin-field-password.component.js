/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, Input, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FieldBaseComponent } from '../../../base/field-base.component';
import { fromEvent } from 'rxjs';
export class TaminFieldPasswordComponent extends FieldBaseComponent {
    constructor() {
        super(...arguments);
        this.showPasswordMeter = false;
        this.complexity = '';
        this.score = '';
        // initPwdChk() {
        // this.scorebar.nativeElement.style.backgroundPosition = '0';
        // }
    }
    /**
     * @return {?}
     */
    initializeComponent() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const keyups = fromEvent(this.inputElement.nativeElement, 'keyup');
            this.subscription.add(keyups.subscribe((/**
             * @param {?} evt
             * @return {?}
             */
            (evt) => {
                if (this.showPasswordMeter) {
                    this.checkPassword(evt.target.value);
                }
            })));
        }), 0);
    }
    /**
     * @param {?} pwd
     * @return {?}
     */
    checkPassword(pwd) {
        this.color = 'white';
        this.complexity = '';
        this.score = '';
        if (pwd.trim().length === 0) {
            return;
        }
        /** @type {?} */
        let nScore = 0;
        /** @type {?} */
        let nLength = 0;
        /** @type {?} */
        let nAlphaUC = 0;
        /** @type {?} */
        let nAlphaLC = 0;
        /** @type {?} */
        let nNumber = 0;
        /** @type {?} */
        let nSymbol = 0;
        /** @type {?} */
        let nMidChar = 0;
        /** @type {?} */
        let nRequirements = 0;
        /** @type {?} */
        let nAlphasOnly = 0;
        /** @type {?} */
        let nNumbersOnly = 0;
        /** @type {?} */
        let nUnqChar = 0;
        /** @type {?} */
        let nRepChar = 0;
        /** @type {?} */
        let nRepInc = 0;
        /** @type {?} */
        let nConsecAlphaUC = 0;
        /** @type {?} */
        let nConsecAlphaLC = 0;
        /** @type {?} */
        let nConsecNumber = 0;
        /** @type {?} */
        let nConsecSymbol = 0;
        /** @type {?} */
        let nConsecCharType = 0;
        /** @type {?} */
        let nSeqAlpha = 0;
        /** @type {?} */
        let nSeqNumber = 0;
        /** @type {?} */
        let nSeqSymbol = 0;
        /** @type {?} */
        let nSeqChar = 0;
        /** @type {?} */
        let nReqChar = 0;
        // nMultConsecCharType = 0;
        // const nMultRepChar = 1, nMultConsecSymbol = 1;
        /** @type {?} */
        const nMultMidChar = 2;
        /** @type {?} */
        const 
        /*nMultRequirements = 2,*/
        nMultConsecAlphaUC = 2;
        /** @type {?} */
        const nMultConsecAlphaLC = 2;
        /** @type {?} */
        const nMultConsecNumber = 2;
        /** @type {?} */
        const nReqCharType = 3;
        /** @type {?} */
        const 
        /*nMultAlphaUC = 3,*/
        /*nMultAlphaLC = 3,*/
        nMultSeqAlpha = 3;
        /** @type {?} */
        const nMultSeqNumber = 3;
        /** @type {?} */
        const nMultSeqSymbol = 3;
        /** @type {?} */
        const nMultLength = 4;
        /** @type {?} */
        const nMultNumber = 4;
        /** @type {?} */
        const nMultSymbol = 6;
        /** @type {?} */
        let nTmpAlphaUC = '';
        /** @type {?} */
        let nTmpAlphaLC = '';
        /** @type {?} */
        let nTmpNumber = '';
        /** @type {?} */
        let nTmpSymbol = '';
        /** @type {?} */
        let sAlphaUC = '0';
        /** @type {?} */
        let sAlphaLC = '0';
        /** @type {?} */
        let sNumber = '0';
        /** @type {?} */
        let sSymbol = '0';
        /** @type {?} */
        let sMidChar = '0';
        /** @type {?} */
        let 
        // sRequirements = '0',
        sAlphasOnly = '0';
        /** @type {?} */
        let sNumbersOnly = '0';
        /** @type {?} */
        let sRepChar = '0';
        /** @type {?} */
        let sConsecAlphaUC = '0';
        /** @type {?} */
        let sConsecAlphaLC = '0';
        /** @type {?} */
        let sConsecNumber = '0';
        /** @type {?} */
        let sSeqAlpha = '0';
        /** @type {?} */
        let sSeqNumber = '0';
        /** @type {?} */
        let sSeqSymbol = '0';
        /** @type {?} */
        const sAlphas = 'abcdefghijklmnopqrstuvwxyz';
        /** @type {?} */
        const sNumerics = '01234567890';
        /** @type {?} */
        const sSymbols = ')!@#$%^&*()';
        /*let sComplexity = '';*/
        /** @type {?} */
        const sStandards = 'Below';
        /** @type {?} */
        const nMinPwdLen = 8;
        if (document.all) {
            /** @type {?} */
            const nd = 0;
        }
        else {
            /** @type {?} */
            const nd = 1;
        }
        if (pwd) {
            nScore = Number(pwd.length * nMultLength);
            nLength = pwd.length;
            /** @type {?} */
            const arrPwd = pwd.replace(/\s+/g, '').split(/\s*/);
            /** @type {?} */
            const arrPwdLen = arrPwd.length;
            for (let a = 0; a < arrPwdLen; a++) {
                if (arrPwd[a].match(/[A-Z]/g)) {
                    if (nTmpAlphaUC !== '') {
                        if (Number(nTmpAlphaUC + 1) === a) {
                            nConsecAlphaUC++;
                            nConsecCharType++;
                        }
                    }
                    nTmpAlphaUC = a.toString();
                    nAlphaUC++;
                }
                else if (arrPwd[a].match(/[a-z]/g)) {
                    if (nTmpAlphaLC !== '') {
                        if (Number(nTmpAlphaLC + 1) === a) {
                            nConsecAlphaLC++;
                            nConsecCharType++;
                        }
                    }
                    nTmpAlphaLC = a.toString();
                    nAlphaLC++;
                }
                else if (arrPwd[a].match(/[0-9]/g)) {
                    if (a > 0 && a < (arrPwdLen - 1)) {
                        nMidChar++;
                    }
                    if (nTmpNumber !== '') {
                        if (Number(nTmpNumber + 1) === a) {
                            nConsecNumber++;
                            nConsecCharType++;
                        }
                    }
                    nTmpNumber = a.toString();
                    nNumber++;
                }
                else if (arrPwd[a].match(/[^a-zA-Z0-9_]/g)) {
                    if (a > 0 && a < (arrPwdLen - 1)) {
                        nMidChar++;
                    }
                    if (nTmpSymbol !== '') {
                        if (Number(nTmpSymbol + 1) === a) {
                            nConsecSymbol++;
                            nConsecCharType++;
                        }
                    }
                    nTmpSymbol = a.toString();
                    nSymbol++;
                }
                /** @type {?} */
                let bCharExists = false;
                for (let b = 0; b < arrPwdLen; b++) {
                    if (arrPwd[a] === arrPwd[b] && a !== b) { /* repeat character exists */
                        bCharExists = true;
                        nRepInc += Math.abs(arrPwdLen / (b - a));
                    }
                }
                if (bCharExists) {
                    nRepChar++;
                    nUnqChar = arrPwdLen - nRepChar;
                    nRepInc = (nUnqChar) ? Math.ceil(nRepInc / nUnqChar) : Math.ceil(nRepInc);
                }
            }
            /* Check for sequential alpha string patterns (forward and reverse) */
            for (let s = 0; s < 23; s++) {
                /** @type {?} */
                const sFwd = sAlphas.substring(s, Number(s + 3));
                /** @type {?} */
                const sRev = this.strReverse(sFwd);
                if (pwd.toLowerCase().indexOf(sFwd) !== -1 || pwd.toLowerCase().indexOf(sRev) !== -1) {
                    nSeqAlpha++;
                    nSeqChar++;
                }
            }
            for (let s = 0; s < 8; s++) {
                /** @type {?} */
                const sFwd = sNumerics.substring(s, Number(s + 3));
                /** @type {?} */
                const sRev = this.strReverse(sFwd);
                if (pwd.toLowerCase().indexOf(sFwd) !== -1 || pwd.toLowerCase().indexOf(sRev) !== -1) {
                    nSeqNumber++;
                    nSeqChar++;
                }
            }
            for (let s = 0; s < 8; s++) {
                /** @type {?} */
                const sFwd = sSymbols.substring(s, Number(s + 3));
                /** @type {?} */
                const sRev = this.strReverse(sFwd);
                if (pwd.toLowerCase().indexOf(sFwd) !== -1 || pwd.toLowerCase().indexOf(sRev) !== -1) {
                    nSeqSymbol++;
                    nSeqChar++;
                }
            }
            if (nAlphaUC > 0 && nAlphaUC < nLength) {
                nScore = Number(nScore + ((nLength - nAlphaUC) * 2));
                sAlphaUC = '+ ' + Number((nLength - nAlphaUC) * 2);
            }
            if (nAlphaLC > 0 && nAlphaLC < nLength) {
                nScore = Number(nScore + ((nLength - nAlphaLC) * 2));
                sAlphaLC = '+ ' + Number((nLength - nAlphaLC) * 2);
            }
            if (nNumber > 0 && nNumber < nLength) {
                nScore = Number(nScore + (nNumber * nMultNumber));
                sNumber = '+ ' + Number(nNumber * nMultNumber);
            }
            if (nSymbol > 0) {
                nScore = Number(nScore + (nSymbol * nMultSymbol));
                sSymbol = '+ ' + Number(nSymbol * nMultSymbol);
            }
            if (nMidChar > 0) {
                nScore = Number(nScore + (nMidChar * nMultMidChar));
                sMidChar = '+ ' + Number(nMidChar * nMultMidChar);
            }
            if ((nAlphaLC > 0 || nAlphaUC > 0) && nSymbol === 0 && nNumber === 0) { // Only Letters
                nScore = Number(nScore - nLength);
                nAlphasOnly = nLength;
                sAlphasOnly = '- ' + nLength;
            }
            if (nAlphaLC === 0 && nAlphaUC === 0 && nSymbol === 0 && nNumber > 0) { // Only Numbers
                nScore = Number(nScore - nLength);
                nNumbersOnly = nLength;
                sNumbersOnly = '- ' + nLength;
            }
            if (nRepChar > 0) { // Same character exists more than once
                nScore = Number(nScore - nRepInc);
                sRepChar = '- ' + nRepInc;
            }
            if (nConsecAlphaUC > 0) { // Consecutive Uppercase Letters exist
                nScore = Number(nScore - (nConsecAlphaUC * nMultConsecAlphaUC));
                sConsecAlphaUC = '- ' + Number(nConsecAlphaUC * nMultConsecAlphaUC);
            }
            if (nConsecAlphaLC > 0) { // Consecutive Lowercase Letters exist
                nScore = Number(nScore - (nConsecAlphaLC * nMultConsecAlphaLC));
                sConsecAlphaLC = '- ' + Number(nConsecAlphaLC * nMultConsecAlphaLC);
            }
            if (nConsecNumber > 0) { // Consecutive Numbers exist
                nScore = Number(nScore - (nConsecNumber * nMultConsecNumber));
                sConsecNumber = '- ' + Number(nConsecNumber * nMultConsecNumber);
            }
            if (nSeqAlpha > 0) { // Sequential alpha strings exist (3 characters or more)
                nScore = Number(nScore - (nSeqAlpha * nMultSeqAlpha));
                sSeqAlpha = '- ' + Number(nSeqAlpha * nMultSeqAlpha);
            }
            if (nSeqNumber > 0) { // Sequential numeric strings exist (3 characters or more)
                nScore = Number(nScore - (nSeqNumber * nMultSeqNumber));
                sSeqNumber = '- ' + Number(nSeqNumber * nMultSeqNumber);
            }
            if (nSeqSymbol > 0) { // Sequential symbol strings exist (3 characters or more)
                nScore = Number(nScore - (nSeqSymbol * nMultSeqSymbol));
                sSeqSymbol = '- ' + Number(nSeqSymbol * nMultSeqSymbol);
            }
            /** @type {?} */
            let arrChars = [nLength, nAlphaUC, nAlphaLC, nNumber, nSymbol];
            /** @type {?} */
            let arrCharsIds = ['nLength', 'nAlphaUC', 'nAlphaLC', 'nNumber', 'nSymbol'];
            /** @type {?} */
            let arrCharsLen = arrChars.length;
            /** @type {?} */
            let minVal;
            for (let c = 0; c < arrCharsLen; c++) {
                // let oImg = $('div_' + arrCharsIds[c]);
                // let oBonus = $(arrCharsIds[c] + 'Bonus');
                // $(arrCharsIds[c]).innerHTML = arrChars[c];
                if (arrCharsIds[c] === 'nLength') {
                    minVal = Number(nMinPwdLen - 1);
                }
                else {
                    minVal = 0;
                }
                if (arrChars[c] === Number(minVal + 1)) {
                    nReqChar++;
                }
                else if (arrChars[c] > Number(minVal + 1)) {
                    nReqChar++;
                }
            }
            nRequirements = nReqChar;
            /** @type {?} */
            let nMinReqChars;
            if (pwd.length >= nMinPwdLen) {
                nMinReqChars = 3;
            }
            else {
                nMinReqChars = 4;
            }
            if (nRequirements > nMinReqChars) { // One or more required characters exist
                nScore = Number(nScore + (nRequirements * 2));
            }
            arrChars = [nMidChar, nRequirements];
            arrCharsIds = ['nMidChar', 'nRequirements'];
            arrCharsLen = arrChars.length;
            for (let c = 0; c < arrCharsLen; c++) {
                if (arrCharsIds[c] === 'nRequirements') {
                    minVal = nMinReqChars;
                }
                else {
                    minVal = 0;
                }
            }
            arrChars = [nAlphasOnly, nNumbersOnly, nRepChar, nConsecAlphaUC, nConsecAlphaLC, nConsecNumber, nSeqAlpha, nSeqNumber, nSeqSymbol];
            arrCharsIds = ['nAlphasOnly', 'nNumbersOnly', 'nRepChar', 'nConsecAlphaUC', 'nConsecAlphaLC', 'nConsecNumber', 'nSeqAlpha', 'nSeqNumber', 'nSeqSymbol'];
            arrCharsLen = arrChars.length;
            for (let c = 0; c < arrCharsLen; c++) {
                // const oImg = $('div_' + arrCharsIds[c]);
                // const oBonus = $(arrCharsIds[c] + 'Bonus');
                // $(arrCharsIds[c]).innerHTML = arrChars[c];
                if (arrChars[c] > 0) {
                    // oImg.className = 'warn';
                    // oBonus.parentNode.className = 'warn';
                }
                else {
                    // oImg.className = 'pass';
                    // oBonus.parentNode.className = 'pass';
                }
            }
            if (nScore > 100) {
                nScore = 100;
            }
            else if (nScore < 0) {
                nScore = 0;
            }
            if (nScore >= 0 && nScore < 20) {
                this.complexity = 'خیلی ضعیف';
                this.meter.nativeElement.style.width = nScore + '%';
                this.color = 'darkred';
            }
            else if (nScore >= 20 && nScore < 40) {
                this.meter.nativeElement.style.width = nScore + '%';
                this.color = 'red';
                this.complexity = 'ضعیف';
            }
            else if (nScore >= 40 && nScore < 60) {
                this.meter.nativeElement.style.width = nScore + '%';
                this.color = 'greenyellow';
                this.complexity = 'خوب';
            }
            else if (nScore >= 60 && nScore < 80) {
                this.meter.nativeElement.style.width = nScore + '%';
                this.color = 'lightgreen';
                this.complexity = 'قوی';
            }
            else if (nScore >= 80 && nScore <= 100) {
                this.meter.nativeElement.style.width = nScore + '%';
                this.color = 'green';
                this.complexity = 'خیلی قوی';
            }
            this.score = nScore.toString();
            this.meter.nativeElement.style.width = nScore + '%';
            // oScore.innerHTML  = nScore + '%';
            // oComplexity.innerHTML = sComplexity;
        }
        else {
            this.score = nScore.toString() + '%';
            // this.initPwdChk();
            // oScore.innerHTML = nScore + '%';
            // oComplexity.innerHTML = sComplexity;
        }
    }
    /**
     * @param {?} str
     * @return {?}
     */
    strReverse(str) {
        /** @type {?} */
        let newstring = '';
        for (let s = 0; s < str.length; s++) {
            newstring = str.charAt(s) + newstring;
        }
        return newstring;
    }
}
TaminFieldPasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-field-password',
                template: "<div>\n  <input\n    type=\"password\"\n    style=\"direction: ltr\"\n    class=\"tamin-form-control-input\"\n    [disabled]=\"control.disabled\"\n    [class.tamin-form-control-valid]=\"control.touched && control.valid\"\n    [class.tamin-form-control-invalid]=\"control.touched && !control.valid\"\n    #inputElement>\n  <div #meterContainer\n       style=\"height: 20px\"\n       class=\"meter-container\"\n       [class.meter-container-bkg-color]=\"complexity !== ''\"\n       [style.visibility]=\"showPasswordMeter ? 'visible' : 'hidden'\">\n    <div #meter [style.background-color]=\"color\" class=\"meter\" [hidden]=\"complexity == ''\"\n         style=\"color:white; padding-right: 5px\">\n      <span style=\"white-space: nowrap\">{{complexity}}</span>&nbsp;<span>(%{{score}})</span>\n    </div>\n  </div>\n</div>\n\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TaminFieldPasswordComponent)),
                        multi: true
                    }
                ],
                styles: [".meter-container{height:20px}.meter-container-bkg-color{background-color:#bbb}.meter{float:right;height:20px}"]
            }] }
];
TaminFieldPasswordComponent.propDecorators = {
    meter: [{ type: ViewChild, args: ['meter',] }],
    meterContainer: [{ type: ViewChild, args: ['meterContainer',] }],
    showPasswordMeter: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TaminFieldPasswordComponent.prototype.meter;
    /** @type {?} */
    TaminFieldPasswordComponent.prototype.meterContainer;
    /** @type {?} */
    TaminFieldPasswordComponent.prototype.showPasswordMeter;
    /** @type {?} */
    TaminFieldPasswordComponent.prototype.color;
    /** @type {?} */
    TaminFieldPasswordComponent.prototype.complexity;
    /** @type {?} */
    TaminFieldPasswordComponent.prototype.score;
}
//# sourceMappingURL=data:application/json;base64,