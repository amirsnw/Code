/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var OverlayService = /** @class */ (function () {
    function OverlayService() {
    }
    /**
     * @param {?=} element
     * @return {?}
     */
    OverlayService.prototype.show = /**
     * @param {?=} element
     * @return {?}
     */
    function (element) {
        if (element === void 0) { element = null; }
        /** @type {?} */
        var overlay = new PlainOverlay(element, { blur: 1, style: { zIndex: 9000 } });
        return overlay.show();
    };
    /**
     * @param {?} message
     * @param {?=} element
     * @return {?}
     */
    OverlayService.prototype.showMessage = /**
     * @param {?} message
     * @param {?=} element
     * @return {?}
     */
    function (message, element) {
        if (element === void 0) { element = null; }
        /** @type {?} */
        var html = '<div></div><div class="tamin-loader-loader4"></div>' + '<hr>' + message;
        /** @type {?} */
        var messageElement = document.createElement('div');
        messageElement.classList.add('overlay-message');
        // messageElement.classList.add('tamin-loader-loader3');
        messageElement.innerHTML = html;
        /** @type {?} */
        var overlay = new PlainOverlay(element, { blur: 1, face: messageElement });
        return overlay.show();
    };
    /**
     * @param {?} overlay
     * @return {?}
     */
    OverlayService.prototype.isShown = /**
     * @param {?} overlay
     * @return {?}
     */
    function (overlay) {
        return (overlay && (overlay.state === PlainOverlay.STATE_SHOWING || overlay.state === PlainOverlay.STATE_SHOWN));
    };
    /**
     * @param {?} overlay
     * @return {?}
     */
    OverlayService.prototype.hide = /**
     * @param {?} overlay
     * @return {?}
     */
    function (overlay) {
        setTimeout((/**
         * @return {?}
         */
        function () {
            overlay.hide();
        }), 0);
    };
    OverlayService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    OverlayService.ctorParameters = function () { return []; };
    /** @nocollapse */ OverlayService.ngInjectableDef = i0.defineInjectable({ factory: function OverlayService_Factory() { return new OverlayService(); }, token: OverlayService, providedIn: "root" });
    return OverlayService;
}());
export { OverlayService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdGFtaW4tZnJhbWV3b3JrLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL292ZXJsYXkvb3ZlcmxheS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDOztBQUl6QztJQUtFO0lBQ0EsQ0FBQzs7Ozs7SUFFRCw2QkFBSTs7OztJQUFKLFVBQUssT0FBYztRQUFkLHdCQUFBLEVBQUEsY0FBYzs7WUFDWCxPQUFPLEdBQUcsSUFBSSxZQUFZLENBQUMsT0FBTyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDLEVBQUMsQ0FBQztRQUMzRSxPQUFPLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN4QixDQUFDOzs7Ozs7SUFFRCxvQ0FBVzs7Ozs7SUFBWCxVQUFZLE9BQWUsRUFBRSxPQUFjO1FBQWQsd0JBQUEsRUFBQSxjQUFjOztZQUNuQyxJQUFJLEdBQUcscURBQXFELEdBQUcsTUFBTSxHQUFHLE9BQU87O1lBQy9FLGNBQWMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUNwRCxjQUFjLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2hELHdEQUF3RDtRQUN4RCxjQUFjLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQzs7WUFDMUIsT0FBTyxHQUFHLElBQUksWUFBWSxDQUFDLE9BQU8sRUFBRSxFQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBQyxDQUFDO1FBQzFFLE9BQU8sT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7Ozs7O0lBRUQsZ0NBQU87Ozs7SUFBUCxVQUFRLE9BQU87UUFDYixPQUFPLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssS0FBSyxZQUFZLENBQUMsYUFBYSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUssWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDbkgsQ0FBQzs7Ozs7SUFHRCw2QkFBSTs7OztJQUFKLFVBQUssT0FBTztRQUNWLFVBQVU7OztRQUFDO1lBQ1QsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2pCLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7O2dCQWhDRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Ozt5QkFORDtDQXFDQyxBQWpDRCxJQWlDQztTQTlCWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZGVjbGFyZSBsZXQgUGxhaW5PdmVybGF5OiBhbnk7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE92ZXJsYXlTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIHNob3coZWxlbWVudCA9IG51bGwpIHtcbiAgICBjb25zdCBvdmVybGF5ID0gbmV3IFBsYWluT3ZlcmxheShlbGVtZW50LCB7Ymx1cjogMSwgc3R5bGU6IHt6SW5kZXg6IDkwMDB9fSk7XG4gICAgcmV0dXJuIG92ZXJsYXkuc2hvdygpO1xuICB9XG5cbiAgc2hvd01lc3NhZ2UobWVzc2FnZTogc3RyaW5nLCBlbGVtZW50ID0gbnVsbCkge1xuICAgIGNvbnN0IGh0bWwgPSAnPGRpdj48L2Rpdj48ZGl2IGNsYXNzPVwidGFtaW4tbG9hZGVyLWxvYWRlcjRcIj48L2Rpdj4nICsgJzxocj4nICsgbWVzc2FnZTtcbiAgICBjb25zdCBtZXNzYWdlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIG1lc3NhZ2VFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ292ZXJsYXktbWVzc2FnZScpO1xuICAgIC8vIG1lc3NhZ2VFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3RhbWluLWxvYWRlci1sb2FkZXIzJyk7XG4gICAgbWVzc2FnZUVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbDtcbiAgICBjb25zdCBvdmVybGF5ID0gbmV3IFBsYWluT3ZlcmxheShlbGVtZW50LCB7Ymx1cjogMSwgZmFjZTogbWVzc2FnZUVsZW1lbnR9KTtcbiAgICByZXR1cm4gb3ZlcmxheS5zaG93KCk7XG4gIH1cblxuICBpc1Nob3duKG92ZXJsYXkpIHtcbiAgICByZXR1cm4gKG92ZXJsYXkgJiYgKG92ZXJsYXkuc3RhdGUgPT09IFBsYWluT3ZlcmxheS5TVEFURV9TSE9XSU5HIHx8IG92ZXJsYXkuc3RhdGUgPT09IFBsYWluT3ZlcmxheS5TVEFURV9TSE9XTikpO1xuICB9XG5cblxuICBoaWRlKG92ZXJsYXkpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIG92ZXJsYXkuaGlkZSgpO1xuICAgIH0sIDApO1xuICB9XG59XG4iXX0=