/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { DataColumnViewType } from '../../models/tamin-data-column.model';
import { GenericRestService } from '../../services/generic-rest-service/generic-rest.service';
import { TaminDataGridConfiguration } from '../../helpers/tamin.data.grid.configuration/tamin.data.grid.configuration';
import { TaminPersianService } from '../../services/persian-service/tamin-persian.service';
import { OverlayService } from '../../services/overlay/overlay.service';
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
import { TaminRestService } from '../../services/tamin-rest-service/tamin-rest.service';
import { PersianNumberPipe } from '../../pipes/persian-number.pipe';
import { Error } from 'tslint/lib/error';
import { ConstantsService } from '../../services/constants.service';
var TaminDataGridComponent = /** @class */ (function () {
    function TaminDataGridComponent(genericRestService, changeDetectorRef, taminRestService, taminPersianService, persianNumberPipe, breakpointObserver, constants, overlayService) {
        this.genericRestService = genericRestService;
        this.changeDetectorRef = changeDetectorRef;
        this.taminRestService = taminRestService;
        this.taminPersianService = taminPersianService;
        this.persianNumberPipe = persianNumberPipe;
        this.breakpointObserver = breakpointObserver;
        this.constants = constants;
        this.overlayService = overlayService;
        this.actionColumnCaption = 'عملیات';
        this.selectedDataItems = [];
        this.pagerSize = 5;
        this.id = '';
        this.loadDataOnInit = false;
        this.showLoadOverlay = true;
        this.showHover = false;
        this.pagerCurrentPage = 1;
        this.allowBreakPoints = true;
        this.itemSelect = new EventEmitter();
        this.itemAction = new EventEmitter();
        this.beforeRefreshData = new EventEmitter();
        this.afterRefreshData = new EventEmitter();
        this.refreshDataError = new EventEmitter();
        this.renderMode = 'desktop';
        this.hasError = false;
        this.loading = false;
        this.breakPoints = [Breakpoints.Small, Breakpoints.Handset];
        this._overlay = null;
    }
    Object.defineProperty(TaminDataGridComponent.prototype, "configuration", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this.serviceUrl = data.serviceUrl;
                this.visibleColumns = data.visibleColumns;
                this.actionColumns = data.actionColumns;
                this.searchParams = data.searchParams;
                this.sortParams = data.sortParams;
                this.viewType = data.viewType;
                this.showActionColumn = data.showActionColumn;
                this.actionColumnCaption = data.actionColumnCaption;
                this.rowEditable = data.rowEditable;
                this.rowDeletable = data.rowDeletable;
                this.dataItems = data.dataItems;
                this.showFooter = data.showFooter;
                this.showPager = data.showPager;
                this.pagerSize = data.pagerSize;
                this.loadDataOnInit = data.loadDataOnInit;
                this.pagerCurrentPage = data.pagerCurrentPage;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TaminDataGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.errorMessage = this.constants.getNetworkErrorMessage();
        this.breakpointObserver
            .observe(this.breakPoints)
            .subscribe((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            if (!_this.allowBreakPoints) {
                return;
            }
            if (state.matches) {
                if (_this.renderMode !== 'mobile') {
                    _this.renderMode = 'mobile';
                }
            }
            else {
                if (_this.renderMode !== 'desktop') {
                    _this.renderMode = 'desktop';
                }
            }
        }));
        if (this.sortParams && this.sortParams.length !== 0) {
            this.sortColumnName = this.sortParams[0].property;
            this.sortColumnMethod = this.sortParams[0].direction;
        }
    };
    /**
     * @param {?=} showOverlay
     * @return {?}
     */
    TaminDataGridComponent.prototype.refreshData = /**
     * @param {?=} showOverlay
     * @return {?}
     */
    function (showOverlay) {
        var _this = this;
        if (showOverlay === void 0) { showOverlay = true; }
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            if (_this.loading) {
                return;
            }
            _this.hasError = false;
            if (!_this.serviceUrl || _this.serviceUrl === '') {
                reject(new Error('ServiceUrl has not value'));
                return;
            }
            _this.beforeRefreshData.emit();
            _this.loading = true;
            if (_this.showLoadOverlay && showOverlay) {
                if (_this._overlay === null) {
                    _this._overlay = _this.overlayService.show(_this.gridContainer.nativeElement);
                }
            }
            /** @type {?} */
            var sortParams = [];
            if (_this.sortColumnName) {
                sortParams.push({
                    property: _this.sortColumnName,
                    direction: _this.sortColumnMethod
                });
            }
            if (!_this.pagerSize || _this.pagerSize <= 0) {
                _this.pagerSize = 1000; // Max allowed
                _this.taminRestService.getAll(_this.serviceUrl, _this.searchParams, sortParams)
                    .then((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (_this.showLoadOverlay && showOverlay && _this._overlay !== null) {
                        _this.overlayService.hide(_this._overlay);
                        _this._overlay = null;
                    }
                    _this.loading = false;
                    if (value.data !== undefined && value.data == null) {
                        value.data.list = [];
                        value.data.total = 0;
                    }
                    _this.dataItems = value.data.list;
                    _this.totalRows = value.data.total;
                    _this.totalPages = Math.ceil(_this.totalRows / _this.pagerSize);
                    _this.pagerCurrentPage = _this.totalPages > 0 ? 1 : 0;
                    _this.afterRefreshData.emit();
                    resolve(value);
                }))
                    .catch((/**
                 * @param {?} reason
                 * @return {?}
                 */
                function (reason) {
                    if (_this.showLoadOverlay && showOverlay && _this._overlay !== null) {
                        _this.overlayService.hide(_this._overlay);
                        _this._overlay = null;
                    }
                    _this.dataItems = [];
                    _this.loading = false;
                    _this.hasError = true;
                    _this.refreshDataError.emit(reason);
                    reject(reason);
                }));
            }
            else {
                _this.taminRestService.getPage(_this.serviceUrl, _this.pagerCurrentPage, _this.pagerSize, _this.searchParams, sortParams)
                    .then((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (_this.showLoadOverlay && showOverlay && _this._overlay !== null) {
                        _this.overlayService.hide(_this._overlay);
                        _this._overlay = null;
                    }
                    _this.loading = false;
                    _this.dataItems = value.data.list;
                    _this.totalRows = value.data.total;
                    _this.totalPages = Math.ceil(_this.totalRows / _this.pagerSize);
                    _this.afterRefreshData.emit();
                    resolve();
                }))
                    .catch((/**
                 * @param {?} reason
                 * @return {?}
                 */
                function (reason) {
                    if (_this.showLoadOverlay && showOverlay && _this._overlay !== null) {
                        _this.overlayService.hide(_this._overlay);
                        _this._overlay = null;
                    }
                    _this.dataItems = [];
                    _this.loading = false;
                    _this.hasError = true;
                    _this.refreshDataError.emit(reason);
                    reject(reason);
                }));
            }
        }));
    };
    /**
     * @param {?} dataItem
     * @return {?}
     */
    TaminDataGridComponent.prototype.onSelectItem = /**
     * @param {?} dataItem
     * @return {?}
     */
    function (dataItem) {
        this.selectedDataItem = dataItem;
        this.itemSelect.emit(dataItem);
    };
    /**
     * @param {?} dataItem
     * @param {?} event
     * @return {?}
     */
    TaminDataGridComponent.prototype.onItemCheckBoxClick = /**
     * @param {?} dataItem
     * @param {?} event
     * @return {?}
     */
    function (dataItem, event) {
        if (this.selectedDataItems.indexOf(dataItem) === -1 && event.target.checked) {
            this.selectedDataItems.push(dataItem);
        }
        if (!event.target.checked) {
            /** @type {?} */
            var index = this.selectedDataItems.indexOf(dataItem, 0);
            if (index > -1) {
                this.selectedDataItems.splice(index, 1);
            }
        }
    };
    /**
     * @param {?} dataItem
     * @param {?} actionCell
     * @return {?}
     */
    TaminDataGridComponent.prototype.onActionClicked = /**
     * @param {?} dataItem
     * @param {?} actionCell
     * @return {?}
     */
    function (dataItem, actionCell) {
        this.selectedDataItem = dataItem;
        this.itemAction.emit({ dataItem: dataItem, actionCell: actionCell });
    };
    /**
     * @param {?} pagerCurrentPage
     * @return {?}
     */
    TaminDataGridComponent.prototype.onPagerPageChanged = /**
     * @param {?} pagerCurrentPage
     * @return {?}
     */
    function (pagerCurrentPage) {
        this.pagerCurrentPage = pagerCurrentPage;
        this.refreshData();
    };
    /**
     * @param {?} dataItem
     * @param {?} cell
     * @param {?} index
     * @return {?}
     */
    TaminDataGridComponent.prototype.getDataItemString = /**
     * @param {?} dataItem
     * @param {?} cell
     * @param {?} index
     * @return {?}
     */
    function (dataItem, cell, index) {
        /** @type {?} */
        var result = dataItem;
        if (cell.columnViewType !== DataColumnViewType.RowNumber) {
            /** @type {?} */
            var fields = cell.columnName.split('.');
            for (var i = 0; i < fields.length; i++) {
                if (!result[fields[i]]) {
                    result = '';
                }
                else {
                    result = result[fields[i]];
                }
            }
        }
        switch (cell.columnViewType) {
            case DataColumnViewType.Label:
                return result;
            case DataColumnViewType.ThousandSeperated:
                /** @type {?} */
                var parts = result.toString().split('.');
                parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
                return parts.join('.');
            case DataColumnViewType.RowNumber:
                return (index + 1 + (this.pagerSize * (this.pagerCurrentPage - 1))).toString();
            case DataColumnViewType.PersianDate:
                try {
                    /** @type {?} */
                    var date = new Date(result);
                    return this.taminPersianService.getPersianDate(date);
                }
                catch (e) {
                    return 'خطا در تبدیل تاریخ';
                }
            case DataColumnViewType.Custom:
                return cell.columnTranslator(result);
            case DataColumnViewType.CustomRow:
                return cell.columnTranslator(dataItem, cell.columnName);
        }
    };
    /**
     * @param {?} dataItem
     * @param {?} cell
     * @return {?}
     */
    TaminDataGridComponent.prototype.getDataItemAction = /**
     * @param {?} dataItem
     * @param {?} cell
     * @return {?}
     */
    function (dataItem, cell) {
        if (!cell.columnStyle) {
            return '';
        }
        /** @type {?} */
        var fields = cell.columnName.split('.');
        /** @type {?} */
        var result = dataItem;
        for (var i = 0; i < fields.length; i++) {
            if (!result[fields[i]]) {
                result = '-';
            }
            else {
                result = result[fields[i]];
            }
        }
        return cell.columnStyle(result);
    };
    /**
     * @private
     * @param {?} item
     * @param {?} column
     * @param {?} index
     * @return {?}
     */
    TaminDataGridComponent.prototype.cellRendererSelector = /**
     * @private
     * @param {?} item
     * @param {?} column
     * @param {?} index
     * @return {?}
     */
    function (item, column, index) {
        if (column.columnViewType === DataColumnViewType.RowNumber) {
            return this.getDataItemString(item[column.columnName], column, index);
        }
        if (this.cellRenderer) {
            /** @type {?} */
            var result = this.cellRenderer(item, column);
            if (result.handled) {
                return result.data;
            }
        }
        return this.getDataItemString(item, column, index);
    };
    /**
     * @param {?} item
     * @param {?} column
     * @param {?} i
     * @return {?}
     */
    TaminDataGridComponent.prototype.generateContent = /**
     * @param {?} item
     * @param {?} column
     * @param {?} i
     * @return {?}
     */
    function (item, column, i) {
        if (/<\/?[a-z][\s\S]*>/i.test(item)) {
            return this.cellRendererSelector(encodeURIComponent(item), column, i);
        }
        return this.cellRendererSelector(item, column, i);
    };
    /**
     * @return {?}
     */
    TaminDataGridComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.loadDataOnInit) {
            this.refreshData();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TaminDataGridComponent.prototype.onActionMenuItemClicked = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onSelectItem(event.item);
        this.itemAction.emit(event);
    };
    /**
     * @param {?} item
     * @param {?} column
     * @return {?}
     */
    TaminDataGridComponent.prototype.getCellStylerResult = /**
     * @param {?} item
     * @param {?} column
     * @return {?}
     */
    function (item, column) {
        return this.cellStyler ? this.cellStyler(item, column) : '';
    };
    /**
     * @param {?} item
     * @return {?}
     */
    TaminDataGridComponent.prototype.getRowStylerResult = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.rowStyler ? this.rowStyler(item) : '';
    };
    /**
     * @param {?} item
     * @param {?} actionCell
     * @return {?}
     */
    TaminDataGridComponent.prototype.actionRender = /**
     * @param {?} item
     * @param {?} actionCell
     * @return {?}
     */
    function (item, actionCell) {
        if (this.actionRenderer) {
            return this.actionRenderer(item, actionCell);
        }
        return actionCell;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    TaminDataGridComponent.prototype.onSort = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        if (this.sortColumnName === column.columnName) {
            this.sortColumnMethod = this.sortColumnMethod === 'ASC' ? 'DESC' : 'ASC';
        }
        if (this.sortColumnName !== column.columnName) {
            this.sortColumnName = column.columnName;
            this.sortColumnMethod = 'ASC';
        }
        this.refreshData();
    };
    TaminDataGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-data-grid',
                    template: "<div #gridContainer>\n  <div *ngIf=\"renderMode === 'desktop'\">\n    <div class=\"gridContainer\">\n      <div *ngIf=\"viewType === 'GridView'\" style=\"width: 100%;\">\n        <table class=\"desktop-table\">\n          <thead>\n          <tr>\n            <ng-container *ngFor=\"let column of visibleColumns\">\n              <ng-container *ngIf=\"column.columnSortable\">\n                <th (click)=\"onSort(column)\">\n                  <span>{{column.columnCaption}}</span>\n                  <i *ngIf=\"column.columnViewType !== 'RowNumber'\" class=\"sortable\"\n                     [class.icon-sort]=\"sortColumnName !== column.columnName\"\n                     [class.icon-sort-down]=\"sortColumnName === column.columnName && sortColumnMethod == 'ASC'\"\n                     [class.icon-sort-up]=\"sortColumnName === column.columnName && sortColumnMethod == 'DESC'\"></i>\n                </th>\n              </ng-container>\n              <ng-container *ngIf=\"!column.columnSortable\">\n                <th>\n                  <span>{{column.columnCaption}}</span>\n                </th>\n              </ng-container>\n            </ng-container>\n            <th *ngIf=\"showActionColumn\" style=\"text-align: center; cursor: auto\">{{actionColumnCaption}}</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr *ngIf=\"hasError\">\n            <td [attr.colspan]=\"visibleColumns.length + (showActionColumn ? 1 : 0)\">\n              <div class=\"alert alert-danger\" [innerHTML]=\"errorMessage\"></div>\n            </td>\n          </tr>\n          <tr *ngIf=\"dataItems && dataItems.length === 0 && !hasError\">\n            <td [attr.colspan]=\"visibleColumns.length + (showActionColumn ? 1 : 0)\">\n              <div class=\"alert alert-info\">\u0627\u0637\u0644\u0627\u0639\u0627\u062A\u06CC \u0628\u0631\u0627\u06CC \u0646\u0645\u0627\u06CC\u0634 \u0648\u062C\u0648\u062F \u0646\u062F\u0627\u0631\u062F</div>\n            </td>\n          </tr>\n          <tr *ngFor=\"let item of dataItems; let i = index\"\n              [class.row-data]=\"showHover\"\n              [class.selected]=\"item === selectedDataItem\"\n              [ngStyle]=\"getRowStylerResult(item)\">\n            <td *ngFor=\"let column of visibleColumns\"\n                [class.row-number-column]=\"column.columnViewType == 'RowNumber'\"\n                [ngStyle]=\"getCellStylerResult(item, column)\"\n                [innerHtml]=\"generateContent(item, column, i)\"\n                (click)=\"onSelectItem(item)\">\n            </td>\n            <td *ngIf=\"showActionColumn\" class=\"action-column\">\n              <tamin-data-grid-action-menu [dataItem]=\"item\" [actionColumns]=\"actionRender(item, actionColumns)\"\n                                           (menuItemClicked)=\"onActionMenuItemClicked($event)\"></tamin-data-grid-action-menu>\n            </td>\n          </tr>\n          </tbody>\n          <tfoot *ngIf=\"showPager\">\n          <tr>\n            <td [attr.colspan]=\"visibleColumns.length + (showActionColumn ? 1 : 0)\" style=\"text-align: -webkit-center;\">\n              <tamin-data-pager\n                [pagerSize]=\"pagerSize\"\n                [(pagerCurrentPage)]=\"pagerCurrentPage\"\n                [pagerTotal]=\"totalPages\"\n                (refreshData)=\"refreshData()\"\n                (pageChanged)=\"onPagerPageChanged($event)\">\n              </tamin-data-pager>\n            </td>\n          </tr>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"renderMode === 'mobile'\">\n    <table class=\"mobile-table\">\n      <tbody *ngIf=\"hasError\">\n      <tr>\n        <td [attr.colspan]=\"visibleColumns.length\">\n          <div class=\"alert alert-danger\">\u062E\u0637\u0627 \u062F\u0631 \u062F\u0631\u06CC\u0627\u0641\u062A \u0627\u0637\u0644\u0627\u0639\u0627\u062A</div>\n        </td>\n      </tr>\n      </tbody>\n      <tbody *ngIf=\"!hasError\">\n      <ng-container *ngFor=\"let item of dataItems; let i = index\">\n        <ng-container *ngFor=\"let column of visibleColumns\">\n          <tr [class.selected]=\"item === selectedDataItem\" (click)=\"onSelectItem(item)\">\n            <td [ngClass]=\"{'odd':i % 2 == 0, 'even':i % 2 != 0}\" [class.selected]=\"item === selectedDataItem\"\n                [ngStyle]=\"getRowStylerResult(item)\">{{column.columnCaption}}\n            </td>\n            <td\n              [ngClass]=\"{'odd':i % 2 == 0, 'even':i % 2 != 0}\"\n              [class.selected]=\"item === selectedDataItem\"\n              [ngStyle]=\"getCellStylerResult(item,column)\"\n              (click)=\"onSelectItem(item)\"\n              [innerHtml]=\"generateContent(item, column, i)\">\n            </td>\n          </tr>\n        </ng-container>\n        <tr *ngIf=\"showActionColumn\">\n          <td [ngClass]=\"{'odd':i % 2 == 0, 'even':i % 2 != 0}\" [class.selected]=\"item === selectedDataItem\"\n              [ngStyle]=\"getRowStylerResult(item)\">{{actionColumnCaption}}\n          </td>\n          <td [ngClass]=\"{'odd':i % 2 == 0, 'even':i % 2 != 0}\" [class.selected]=\"item === selectedDataItem\">\n            <tamin-data-grid-action-menu\n              [dataItem]=\"item\"\n              (dropdownClicked)=\"onSelectItem(item)\"\n              [actionColumns]=\"actionRender(item, actionColumns)\"\n              (menuItemClicked)=\"onActionMenuItemClicked($event)\">\n            </tamin-data-grid-action-menu>\n          </td>\n        </tr>\n      </ng-container>\n      <tr *ngIf=\"showPager\">\n        <td colspan=\"2\" style=\"text-align: -webkit-center\">\n          <tamin-data-pager\n            [pagerSize]=\"pagerSize\"\n            [(pagerCurrentPage)]=\"pagerCurrentPage\"\n            [pagerTotal]=\"totalPages\"\n            (pageChanged)=\"onPagerPageChanged($event)\"\n            (refreshData)=\"refreshData()\">\n          </tamin-data-pager>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n",
                    styles: [".datagrid-checkbox{height:16px;vertical-align:middle}.gridContainer{position:relative;margin:3px}.fixed-col{position:absolute}.odd{background-color:#efefef}.even{background-color:#fff}.selected{background-color:#d1d1d1;font-weight:bolder}.action-column,.row-number-column{width:1%;white-space:nowrap;text-align:center}th{text-align:right;white-space:nowrap}th.sortable{cursor:pointer}th.sortable i{margin-right:5px}"]
                }] }
    ];
    /** @nocollapse */
    TaminDataGridComponent.ctorParameters = function () { return [
        { type: GenericRestService },
        { type: ChangeDetectorRef },
        { type: TaminRestService },
        { type: TaminPersianService },
        { type: PersianNumberPipe },
        { type: BreakpointObserver },
        { type: ConstantsService },
        { type: OverlayService }
    ]; };
    TaminDataGridComponent.propDecorators = {
        configuration: [{ type: Input }],
        serviceUrl: [{ type: Input }],
        visibleColumns: [{ type: Input }],
        actionColumns: [{ type: Input }],
        searchParams: [{ type: Input }],
        sortParams: [{ type: Input }],
        viewType: [{ type: Input }],
        showActionColumn: [{ type: Input }],
        actionColumnCaption: [{ type: Input }],
        rowEditable: [{ type: Input }],
        rowDeletable: [{ type: Input }],
        multiSelectable: [{ type: Input }],
        dataItems: [{ type: Input }],
        selectedDataItem: [{ type: Input }],
        selectedDataItems: [{ type: Input }],
        showFooter: [{ type: Input }],
        showPager: [{ type: Input }],
        pagerSize: [{ type: Input }],
        id: [{ type: Input }],
        loadDataOnInit: [{ type: Input }],
        showLoadOverlay: [{ type: Input }],
        showHover: [{ type: Input }],
        pagerCurrentPage: [{ type: Input }],
        errorMessage: [{ type: Input }],
        allowBreakPoints: [{ type: Input }],
        itemSelect: [{ type: Output }],
        itemAction: [{ type: Output }],
        beforeRefreshData: [{ type: Output }],
        afterRefreshData: [{ type: Output }],
        refreshDataError: [{ type: Output }],
        gridContainer: [{ type: ViewChild, args: ['gridContainer',] }]
    };
    return TaminDataGridComponent;
}());
export { TaminDataGridComponent };
if (false) {
    /** @type {?} */
    TaminDataGridComponent.prototype.serviceUrl;
    /** @type {?} */
    TaminDataGridComponent.prototype.visibleColumns;
    /** @type {?} */
    TaminDataGridComponent.prototype.actionColumns;
    /** @type {?} */
    TaminDataGridComponent.prototype.searchParams;
    /** @type {?} */
    TaminDataGridComponent.prototype.sortParams;
    /** @type {?} */
    TaminDataGridComponent.prototype.viewType;
    /** @type {?} */
    TaminDataGridComponent.prototype.showActionColumn;
    /** @type {?} */
    TaminDataGridComponent.prototype.actionColumnCaption;
    /** @type {?} */
    TaminDataGridComponent.prototype.rowEditable;
    /** @type {?} */
    TaminDataGridComponent.prototype.rowDeletable;
    /** @type {?} */
    TaminDataGridComponent.prototype.multiSelectable;
    /** @type {?} */
    TaminDataGridComponent.prototype.dataItems;
    /** @type {?} */
    TaminDataGridComponent.prototype.selectedDataItem;
    /** @type {?} */
    TaminDataGridComponent.prototype.selectedDataItems;
    /** @type {?} */
    TaminDataGridComponent.prototype.showFooter;
    /** @type {?} */
    TaminDataGridComponent.prototype.showPager;
    /** @type {?} */
    TaminDataGridComponent.prototype.pagerSize;
    /** @type {?} */
    TaminDataGridComponent.prototype.id;
    /** @type {?} */
    TaminDataGridComponent.prototype.loadDataOnInit;
    /** @type {?} */
    TaminDataGridComponent.prototype.showLoadOverlay;
    /** @type {?} */
    TaminDataGridComponent.prototype.showHover;
    /** @type {?} */
    TaminDataGridComponent.prototype.pagerCurrentPage;
    /** @type {?} */
    TaminDataGridComponent.prototype.errorMessage;
    /** @type {?} */
    TaminDataGridComponent.prototype.allowBreakPoints;
    /** @type {?} */
    TaminDataGridComponent.prototype.itemSelect;
    /** @type {?} */
    TaminDataGridComponent.prototype.itemAction;
    /** @type {?} */
    TaminDataGridComponent.prototype.beforeRefreshData;
    /** @type {?} */
    TaminDataGridComponent.prototype.afterRefreshData;
    /** @type {?} */
    TaminDataGridComponent.prototype.refreshDataError;
    /** @type {?} */
    TaminDataGridComponent.prototype.gridContainer;
    /** @type {?} */
    TaminDataGridComponent.prototype.renderMode;
    /** @type {?} */
    TaminDataGridComponent.prototype.hasError;
    /** @type {?} */
    TaminDataGridComponent.prototype.sortColumnName;
    /** @type {?} */
    TaminDataGridComponent.prototype.sortColumnMethod;
    /** @type {?} */
    TaminDataGridComponent.prototype.cellRenderer;
    /** @type {?} */
    TaminDataGridComponent.prototype.actionRenderer;
    /** @type {?} */
    TaminDataGridComponent.prototype.cellStyler;
    /** @type {?} */
    TaminDataGridComponent.prototype.rowStyler;
    /** @type {?} */
    TaminDataGridComponent.prototype.loading;
    /** @type {?} */
    TaminDataGridComponent.prototype.breakPoints;
    /** @type {?} */
    TaminDataGridComponent.prototype.totalPages;
    /** @type {?} */
    TaminDataGridComponent.prototype.totalRows;
    /**
     * @type {?}
     * @private
     */
    TaminDataGridComponent.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    TaminDataGridComponent.prototype.genericRestService;
    /**
     * @type {?}
     * @private
     */
    TaminDataGridComponent.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    TaminDataGridComponent.prototype.taminRestService;
    /**
     * @type {?}
     * @private
     */
    TaminDataGridComponent.prototype.taminPersianService;
    /**
     * @type {?}
     * @private
     */
    TaminDataGridComponent.prototype.persianNumberPipe;
    /** @type {?} */
    TaminDataGridComponent.prototype.breakpointObserver;
    /** @type {?} */
    TaminDataGridComponent.prototype.constants;
    /**
     * @type {?}
     * @private
     */
    TaminDataGridComponent.prototype.overlayService;
}
//# sourceMappingURL=data:application/json;base64,