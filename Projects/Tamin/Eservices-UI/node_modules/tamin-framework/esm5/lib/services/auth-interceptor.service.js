/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { TaminSecurityService } from './tamin-security/tamin-security.service';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./tamin-security/tamin-security.service";
var AuthInterceptorService = /** @class */ (function () {
    function AuthInterceptorService(taminSecurityService) {
        this.taminSecurityService = taminSecurityService;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    AuthInterceptorService.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        if (this.taminSecurityService.hasToken()) {
            /** @type {?} */
            var token = this.taminSecurityService.getToken();
            req = req.clone({
                setHeaders: { Authorization: "Bearer " + token }
            });
        }
        return next.handle(req)
            .pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            if (error.error instanceof ErrorEvent) {
                // client-side error
            }
            else {
                // server-side error
                if (error.status === 401) {
                    alertify.alert('توجه', 'برای ادامه استفاده از سیستم می بایست نام کاربری و گذرواژه خود را وارد نمایید', (/**
                     * @return {?}
                     */
                    function () {
                        /** @type {?} */
                        var adressParts = window.location.href.split('/#/');
                        /** @type {?} */
                        var redirectUrl = '';
                        if (adressParts.length === 2) {
                            redirectUrl = adressParts[1];
                        }
                        _this.taminSecurityService.redirectToLogin(redirectUrl);
                    }));
                }
            }
            return throwError(error);
        })));
    };
    AuthInterceptorService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    AuthInterceptorService.ctorParameters = function () { return [
        { type: TaminSecurityService }
    ]; };
    /** @nocollapse */ AuthInterceptorService.ngInjectableDef = i0.defineInjectable({ factory: function AuthInterceptorService_Factory() { return new AuthInterceptorService(i0.inject(i1.TaminSecurityService)); }, token: AuthInterceptorService, providedIn: "root" });
    return AuthInterceptorService;
}());
export { AuthInterceptorService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthInterceptorService.prototype.taminSecurityService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1pbnRlcmNlcHRvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdGFtaW4tZnJhbWV3b3JrLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2F1dGgtaW50ZXJjZXB0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQWEsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzVDLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHlDQUF5QyxDQUFDO0FBQzdFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBSTFDO0lBR0UsZ0NBQW9CLG9CQUEwQztRQUExQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO0lBQzlELENBQUM7Ozs7OztJQUVELDBDQUFTOzs7OztJQUFULFVBQVUsR0FBcUIsRUFBRSxJQUFpQjtRQUFsRCxpQkErQkM7UUE5QkMsSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxFQUFFLEVBQUU7O2dCQUNsQyxLQUFLLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBRTtZQUNsRCxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztnQkFDZCxVQUFVLEVBQUUsRUFBQyxhQUFhLEVBQUUsU0FBUyxHQUFHLEtBQUssRUFBQzthQUMvQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDcEIsSUFBSSxDQUNILFVBQVU7Ozs7UUFBQyxVQUFDLEtBQXdCO1lBQ2xDLElBQUksS0FBSyxDQUFDLEtBQUssWUFBWSxVQUFVLEVBQUU7Z0JBQ3JDLG9CQUFvQjthQUNyQjtpQkFBTTtnQkFDTCxvQkFBb0I7Z0JBQ3BCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7b0JBQ3hCLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLDhFQUE4RTs7O29CQUFFOzs0QkFFL0YsV0FBVyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7OzRCQUNqRCxXQUFXLEdBQUcsRUFBRTt3QkFFcEIsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTs0QkFDNUIsV0FBVyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQzt5QkFDOUI7d0JBQ0QsS0FBSSxDQUFDLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztvQkFDekQsQ0FBQyxFQUFDLENBQUM7aUJBQ0o7YUFDRjtZQUNELE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNCLENBQUMsRUFBQyxDQUNILENBQUM7SUFDTixDQUFDOztnQkFyQ0YsVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQzs7OztnQkFMeEIsb0JBQW9COzs7aUNBSDVCO0NBOENDLEFBdENELElBc0NDO1NBckNZLHNCQUFzQjs7Ozs7O0lBRXJCLHNEQUFrRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0h0dHBFcnJvclJlc3BvbnNlLCBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge09ic2VydmFibGUsIHRocm93RXJyb3J9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtUYW1pblNlY3VyaXR5U2VydmljZX0gZnJvbSAnLi90YW1pbi1zZWN1cml0eS90YW1pbi1zZWN1cml0eS5zZXJ2aWNlJztcbmltcG9ydCB7Y2F0Y2hFcnJvcn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5kZWNsYXJlIHZhciBhbGVydGlmeTogYW55O1xuXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcbmV4cG9ydCBjbGFzcyBBdXRoSW50ZXJjZXB0b3JTZXJ2aWNlIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhbWluU2VjdXJpdHlTZXJ2aWNlOiBUYW1pblNlY3VyaXR5U2VydmljZSkge1xuICB9XG5cbiAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgaWYgKHRoaXMudGFtaW5TZWN1cml0eVNlcnZpY2UuaGFzVG9rZW4oKSkge1xuICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLnRhbWluU2VjdXJpdHlTZXJ2aWNlLmdldFRva2VuKCk7XG4gICAgICByZXEgPSByZXEuY2xvbmUoe1xuICAgICAgICBzZXRIZWFkZXJzOiB7QXV0aG9yaXphdGlvbjogYEJlYXJlciBgICsgdG9rZW59XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKVxuICAgICAgLnBpcGUoXG4gICAgICAgIGNhdGNoRXJyb3IoKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGlmIChlcnJvci5lcnJvciBpbnN0YW5jZW9mIEVycm9yRXZlbnQpIHtcbiAgICAgICAgICAgIC8vIGNsaWVudC1zaWRlIGVycm9yXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNlcnZlci1zaWRlIGVycm9yXG4gICAgICAgICAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgICAgICAgYWxlcnRpZnkuYWxlcnQoJ9iq2YjYrNmHJywgJ9io2LHYp9uMINin2K/Yp9mF2Ycg2KfYs9iq2YHYp9iv2Ycg2KfYsiDYs9uM2LPYqtmFINmF24wg2KjYp9uM2LPYqiDZhtin2YUg2qnYp9ix2KjYsduMINmIINqv2LDYsdmI2KfamNmHINiu2YjYryDYsdinINmI2KfYsdivINmG2YXYp9uM24zYrycsICgpID0+IHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGFkcmVzc1BhcnRzID0gd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoJy8jLycpO1xuICAgICAgICAgICAgICAgIGxldCByZWRpcmVjdFVybCA9ICcnO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFkcmVzc1BhcnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgcmVkaXJlY3RVcmwgPSBhZHJlc3NQYXJ0c1sxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy50YW1pblNlY3VyaXR5U2VydmljZS5yZWRpcmVjdFRvTG9naW4ocmVkaXJlY3RVcmwpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxufVxuXG5cblxuXG4vKlxuaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SHR0cENsaWVudCwgSHR0cEVycm9yUmVzcG9uc2UsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3R9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgdGhyb3dFcnJvcn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1RhbWluU2VjdXJpdHlTZXJ2aWNlfSBmcm9tICcuL3RhbWluLXNlY3VyaXR5L3RhbWluLXNlY3VyaXR5LnNlcnZpY2UnO1xuaW1wb3J0IHtjYXRjaEVycm9yfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0NvbnN0YW50c1NlcnZpY2V9IGZyb20gJy4vY29uc3RhbnRzLnNlcnZpY2UnO1xuXG5cbmRlY2xhcmUgdmFyIGFsZXJ0aWZ5OiBhbnk7XG5cbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxuZXhwb3J0IGNsYXNzIEF1dGhJbnRlcmNlcHRvclNlcnZpY2UgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGFtaW5TZWN1cml0eVNlcnZpY2U6IFRhbWluU2VjdXJpdHlTZXJ2aWNlLCBwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsIHByaXZhdGUgY29uc3RhbnRzU2VydmljZTogQ29uc3RhbnRzU2VydmljZSkge1xuICB9XG5cbiAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgaWYgKHRoaXMudGFtaW5TZWN1cml0eVNlcnZpY2UuaGFzVG9rZW4oKSkge1xuICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLnRhbWluU2VjdXJpdHlTZXJ2aWNlLmdldFRva2VuKCk7XG4gICAgICByZXEgPSByZXEuY2xvbmUoe1xuICAgICAgICBzZXRIZWFkZXJzOiB7QXV0aG9yaXphdGlvbjogYEJlYXJlciBgICsgdG9rZW59XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKVxuICAgICAgLnBpcGUoXG4gICAgICAgIGNhdGNoRXJyb3IoKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGlmIChlcnJvci5lcnJvciBpbnN0YW5jZW9mIEVycm9yRXZlbnQpIHtcbiAgICAgICAgICAgIC8vIGNsaWVudC1zaWRlIGVycm9yXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNlcnZlci1zaWRlIGVycm9yXG4gICAgICAgICAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSA0MDEpIHtcbi8hKlxuICAgICAgICAgICAgICBpZiAodGhpcy50YW1pblNlY3VyaXR5U2VydmljZS5oYXNSZWZyZXNoVG9rZW4oKSkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy50YW1pblNlY3VyaXR5U2VydmljZS5yZU5ld1Rva2VuKCkudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICBuZXh0LmhhbmRsZShyZXEpO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKHJlYXNvbiA9PiB7XG4gICAgICAgICAgICAgICAgICBhbGVydGlmeS5hbGVydCgn2KrZiNis2YcnLCB0aGlzLmNvbnN0YW50c1NlcnZpY2UuZ2V0TmV0d29ya0Vycm9yTWVzc2FnZSgpLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICB9IGVsc2Uge1xuKiEvXG4gICAgICAgICAgICAgICAgY29uc3QgYWRyZXNzUGFydHMgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgnLyMvJyk7XG4gICAgICAgICAgICAgICAgbGV0IHJlZGlyZWN0VXJsID0gJyc7XG5cbiAgICAgICAgICAgICAgICBpZiAoYWRyZXNzUGFydHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICByZWRpcmVjdFVybCA9IGFkcmVzc1BhcnRzWzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnRhbWluU2VjdXJpdHlTZXJ2aWNlLnJlZGlyZWN0VG9Mb2dpbihyZWRpcmVjdFVybCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvLyB9XG4gICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxufVxuKi9cbiJdfQ==