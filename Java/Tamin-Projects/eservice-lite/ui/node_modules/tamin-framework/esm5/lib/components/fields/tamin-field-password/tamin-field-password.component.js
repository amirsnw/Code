/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef, Input, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FieldBaseComponent } from '../../../base/field-base.component';
import { fromEvent } from 'rxjs';
var TaminFieldPasswordComponent = /** @class */ (function (_super) {
    tslib_1.__extends(TaminFieldPasswordComponent, _super);
    function TaminFieldPasswordComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.showPasswordMeter = false;
        _this.complexity = '';
        _this.score = '';
        return _this;
        // initPwdChk() {
        // this.scorebar.nativeElement.style.backgroundPosition = '0';
        // }
    }
    /**
     * @return {?}
     */
    TaminFieldPasswordComponent.prototype.initializeComponent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var keyups = fromEvent(_this.inputElement.nativeElement, 'keyup');
            _this.subscription.add(keyups.subscribe((/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                if (_this.showPasswordMeter) {
                    _this.checkPassword(evt.target.value);
                }
            })));
        }), 0);
    };
    /**
     * @param {?} pwd
     * @return {?}
     */
    TaminFieldPasswordComponent.prototype.checkPassword = /**
     * @param {?} pwd
     * @return {?}
     */
    function (pwd) {
        this.color = 'white';
        this.complexity = '';
        this.score = '';
        if (pwd.trim().length === 0) {
            return;
        }
        /** @type {?} */
        var nScore = 0;
        /** @type {?} */
        var nLength = 0;
        /** @type {?} */
        var nAlphaUC = 0;
        /** @type {?} */
        var nAlphaLC = 0;
        /** @type {?} */
        var nNumber = 0;
        /** @type {?} */
        var nSymbol = 0;
        /** @type {?} */
        var nMidChar = 0;
        /** @type {?} */
        var nRequirements = 0;
        /** @type {?} */
        var nAlphasOnly = 0;
        /** @type {?} */
        var nNumbersOnly = 0;
        /** @type {?} */
        var nUnqChar = 0;
        /** @type {?} */
        var nRepChar = 0;
        /** @type {?} */
        var nRepInc = 0;
        /** @type {?} */
        var nConsecAlphaUC = 0;
        /** @type {?} */
        var nConsecAlphaLC = 0;
        /** @type {?} */
        var nConsecNumber = 0;
        /** @type {?} */
        var nConsecSymbol = 0;
        /** @type {?} */
        var nConsecCharType = 0;
        /** @type {?} */
        var nSeqAlpha = 0;
        /** @type {?} */
        var nSeqNumber = 0;
        /** @type {?} */
        var nSeqSymbol = 0;
        /** @type {?} */
        var nSeqChar = 0;
        /** @type {?} */
        var nReqChar = 0;
        // nMultConsecCharType = 0;
        // const nMultRepChar = 1, nMultConsecSymbol = 1;
        /** @type {?} */
        var nMultMidChar = 2;
        /** @type {?} */
        var 
        /*nMultRequirements = 2,*/
        nMultConsecAlphaUC = 2;
        /** @type {?} */
        var nMultConsecAlphaLC = 2;
        /** @type {?} */
        var nMultConsecNumber = 2;
        /** @type {?} */
        var nReqCharType = 3;
        /** @type {?} */
        var 
        /*nMultAlphaUC = 3,*/
        /*nMultAlphaLC = 3,*/
        nMultSeqAlpha = 3;
        /** @type {?} */
        var nMultSeqNumber = 3;
        /** @type {?} */
        var nMultSeqSymbol = 3;
        /** @type {?} */
        var nMultLength = 4;
        /** @type {?} */
        var nMultNumber = 4;
        /** @type {?} */
        var nMultSymbol = 6;
        /** @type {?} */
        var nTmpAlphaUC = '';
        /** @type {?} */
        var nTmpAlphaLC = '';
        /** @type {?} */
        var nTmpNumber = '';
        /** @type {?} */
        var nTmpSymbol = '';
        /** @type {?} */
        var sAlphaUC = '0';
        /** @type {?} */
        var sAlphaLC = '0';
        /** @type {?} */
        var sNumber = '0';
        /** @type {?} */
        var sSymbol = '0';
        /** @type {?} */
        var sMidChar = '0';
        /** @type {?} */
        var 
        // sRequirements = '0',
        sAlphasOnly = '0';
        /** @type {?} */
        var sNumbersOnly = '0';
        /** @type {?} */
        var sRepChar = '0';
        /** @type {?} */
        var sConsecAlphaUC = '0';
        /** @type {?} */
        var sConsecAlphaLC = '0';
        /** @type {?} */
        var sConsecNumber = '0';
        /** @type {?} */
        var sSeqAlpha = '0';
        /** @type {?} */
        var sSeqNumber = '0';
        /** @type {?} */
        var sSeqSymbol = '0';
        /** @type {?} */
        var sAlphas = 'abcdefghijklmnopqrstuvwxyz';
        /** @type {?} */
        var sNumerics = '01234567890';
        /** @type {?} */
        var sSymbols = ')!@#$%^&*()';
        /*let sComplexity = '';*/
        /** @type {?} */
        var sStandards = 'Below';
        /** @type {?} */
        var nMinPwdLen = 8;
        if (document.all) {
            /** @type {?} */
            var nd = 0;
        }
        else {
            /** @type {?} */
            var nd = 1;
        }
        if (pwd) {
            nScore = Number(pwd.length * nMultLength);
            nLength = pwd.length;
            /** @type {?} */
            var arrPwd = pwd.replace(/\s+/g, '').split(/\s*/);
            /** @type {?} */
            var arrPwdLen = arrPwd.length;
            for (var a = 0; a < arrPwdLen; a++) {
                if (arrPwd[a].match(/[A-Z]/g)) {
                    if (nTmpAlphaUC !== '') {
                        if (Number(nTmpAlphaUC + 1) === a) {
                            nConsecAlphaUC++;
                            nConsecCharType++;
                        }
                    }
                    nTmpAlphaUC = a.toString();
                    nAlphaUC++;
                }
                else if (arrPwd[a].match(/[a-z]/g)) {
                    if (nTmpAlphaLC !== '') {
                        if (Number(nTmpAlphaLC + 1) === a) {
                            nConsecAlphaLC++;
                            nConsecCharType++;
                        }
                    }
                    nTmpAlphaLC = a.toString();
                    nAlphaLC++;
                }
                else if (arrPwd[a].match(/[0-9]/g)) {
                    if (a > 0 && a < (arrPwdLen - 1)) {
                        nMidChar++;
                    }
                    if (nTmpNumber !== '') {
                        if (Number(nTmpNumber + 1) === a) {
                            nConsecNumber++;
                            nConsecCharType++;
                        }
                    }
                    nTmpNumber = a.toString();
                    nNumber++;
                }
                else if (arrPwd[a].match(/[^a-zA-Z0-9_]/g)) {
                    if (a > 0 && a < (arrPwdLen - 1)) {
                        nMidChar++;
                    }
                    if (nTmpSymbol !== '') {
                        if (Number(nTmpSymbol + 1) === a) {
                            nConsecSymbol++;
                            nConsecCharType++;
                        }
                    }
                    nTmpSymbol = a.toString();
                    nSymbol++;
                }
                /** @type {?} */
                var bCharExists = false;
                for (var b = 0; b < arrPwdLen; b++) {
                    if (arrPwd[a] === arrPwd[b] && a !== b) { /* repeat character exists */
                        bCharExists = true;
                        nRepInc += Math.abs(arrPwdLen / (b - a));
                    }
                }
                if (bCharExists) {
                    nRepChar++;
                    nUnqChar = arrPwdLen - nRepChar;
                    nRepInc = (nUnqChar) ? Math.ceil(nRepInc / nUnqChar) : Math.ceil(nRepInc);
                }
            }
            /* Check for sequential alpha string patterns (forward and reverse) */
            for (var s = 0; s < 23; s++) {
                /** @type {?} */
                var sFwd = sAlphas.substring(s, Number(s + 3));
                /** @type {?} */
                var sRev = this.strReverse(sFwd);
                if (pwd.toLowerCase().indexOf(sFwd) !== -1 || pwd.toLowerCase().indexOf(sRev) !== -1) {
                    nSeqAlpha++;
                    nSeqChar++;
                }
            }
            for (var s = 0; s < 8; s++) {
                /** @type {?} */
                var sFwd = sNumerics.substring(s, Number(s + 3));
                /** @type {?} */
                var sRev = this.strReverse(sFwd);
                if (pwd.toLowerCase().indexOf(sFwd) !== -1 || pwd.toLowerCase().indexOf(sRev) !== -1) {
                    nSeqNumber++;
                    nSeqChar++;
                }
            }
            for (var s = 0; s < 8; s++) {
                /** @type {?} */
                var sFwd = sSymbols.substring(s, Number(s + 3));
                /** @type {?} */
                var sRev = this.strReverse(sFwd);
                if (pwd.toLowerCase().indexOf(sFwd) !== -1 || pwd.toLowerCase().indexOf(sRev) !== -1) {
                    nSeqSymbol++;
                    nSeqChar++;
                }
            }
            if (nAlphaUC > 0 && nAlphaUC < nLength) {
                nScore = Number(nScore + ((nLength - nAlphaUC) * 2));
                sAlphaUC = '+ ' + Number((nLength - nAlphaUC) * 2);
            }
            if (nAlphaLC > 0 && nAlphaLC < nLength) {
                nScore = Number(nScore + ((nLength - nAlphaLC) * 2));
                sAlphaLC = '+ ' + Number((nLength - nAlphaLC) * 2);
            }
            if (nNumber > 0 && nNumber < nLength) {
                nScore = Number(nScore + (nNumber * nMultNumber));
                sNumber = '+ ' + Number(nNumber * nMultNumber);
            }
            if (nSymbol > 0) {
                nScore = Number(nScore + (nSymbol * nMultSymbol));
                sSymbol = '+ ' + Number(nSymbol * nMultSymbol);
            }
            if (nMidChar > 0) {
                nScore = Number(nScore + (nMidChar * nMultMidChar));
                sMidChar = '+ ' + Number(nMidChar * nMultMidChar);
            }
            if ((nAlphaLC > 0 || nAlphaUC > 0) && nSymbol === 0 && nNumber === 0) { // Only Letters
                nScore = Number(nScore - nLength);
                nAlphasOnly = nLength;
                sAlphasOnly = '- ' + nLength;
            }
            if (nAlphaLC === 0 && nAlphaUC === 0 && nSymbol === 0 && nNumber > 0) { // Only Numbers
                nScore = Number(nScore - nLength);
                nNumbersOnly = nLength;
                sNumbersOnly = '- ' + nLength;
            }
            if (nRepChar > 0) { // Same character exists more than once
                nScore = Number(nScore - nRepInc);
                sRepChar = '- ' + nRepInc;
            }
            if (nConsecAlphaUC > 0) { // Consecutive Uppercase Letters exist
                nScore = Number(nScore - (nConsecAlphaUC * nMultConsecAlphaUC));
                sConsecAlphaUC = '- ' + Number(nConsecAlphaUC * nMultConsecAlphaUC);
            }
            if (nConsecAlphaLC > 0) { // Consecutive Lowercase Letters exist
                nScore = Number(nScore - (nConsecAlphaLC * nMultConsecAlphaLC));
                sConsecAlphaLC = '- ' + Number(nConsecAlphaLC * nMultConsecAlphaLC);
            }
            if (nConsecNumber > 0) { // Consecutive Numbers exist
                nScore = Number(nScore - (nConsecNumber * nMultConsecNumber));
                sConsecNumber = '- ' + Number(nConsecNumber * nMultConsecNumber);
            }
            if (nSeqAlpha > 0) { // Sequential alpha strings exist (3 characters or more)
                nScore = Number(nScore - (nSeqAlpha * nMultSeqAlpha));
                sSeqAlpha = '- ' + Number(nSeqAlpha * nMultSeqAlpha);
            }
            if (nSeqNumber > 0) { // Sequential numeric strings exist (3 characters or more)
                nScore = Number(nScore - (nSeqNumber * nMultSeqNumber));
                sSeqNumber = '- ' + Number(nSeqNumber * nMultSeqNumber);
            }
            if (nSeqSymbol > 0) { // Sequential symbol strings exist (3 characters or more)
                nScore = Number(nScore - (nSeqSymbol * nMultSeqSymbol));
                sSeqSymbol = '- ' + Number(nSeqSymbol * nMultSeqSymbol);
            }
            /** @type {?} */
            var arrChars = [nLength, nAlphaUC, nAlphaLC, nNumber, nSymbol];
            /** @type {?} */
            var arrCharsIds = ['nLength', 'nAlphaUC', 'nAlphaLC', 'nNumber', 'nSymbol'];
            /** @type {?} */
            var arrCharsLen = arrChars.length;
            /** @type {?} */
            var minVal = void 0;
            for (var c = 0; c < arrCharsLen; c++) {
                // let oImg = $('div_' + arrCharsIds[c]);
                // let oBonus = $(arrCharsIds[c] + 'Bonus');
                // $(arrCharsIds[c]).innerHTML = arrChars[c];
                if (arrCharsIds[c] === 'nLength') {
                    minVal = Number(nMinPwdLen - 1);
                }
                else {
                    minVal = 0;
                }
                if (arrChars[c] === Number(minVal + 1)) {
                    nReqChar++;
                }
                else if (arrChars[c] > Number(minVal + 1)) {
                    nReqChar++;
                }
            }
            nRequirements = nReqChar;
            /** @type {?} */
            var nMinReqChars = void 0;
            if (pwd.length >= nMinPwdLen) {
                nMinReqChars = 3;
            }
            else {
                nMinReqChars = 4;
            }
            if (nRequirements > nMinReqChars) { // One or more required characters exist
                nScore = Number(nScore + (nRequirements * 2));
            }
            arrChars = [nMidChar, nRequirements];
            arrCharsIds = ['nMidChar', 'nRequirements'];
            arrCharsLen = arrChars.length;
            for (var c = 0; c < arrCharsLen; c++) {
                if (arrCharsIds[c] === 'nRequirements') {
                    minVal = nMinReqChars;
                }
                else {
                    minVal = 0;
                }
            }
            arrChars = [nAlphasOnly, nNumbersOnly, nRepChar, nConsecAlphaUC, nConsecAlphaLC, nConsecNumber, nSeqAlpha, nSeqNumber, nSeqSymbol];
            arrCharsIds = ['nAlphasOnly', 'nNumbersOnly', 'nRepChar', 'nConsecAlphaUC', 'nConsecAlphaLC', 'nConsecNumber', 'nSeqAlpha', 'nSeqNumber', 'nSeqSymbol'];
            arrCharsLen = arrChars.length;
            for (var c = 0; c < arrCharsLen; c++) {
                // const oImg = $('div_' + arrCharsIds[c]);
                // const oBonus = $(arrCharsIds[c] + 'Bonus');
                // $(arrCharsIds[c]).innerHTML = arrChars[c];
                if (arrChars[c] > 0) {
                    // oImg.className = 'warn';
                    // oBonus.parentNode.className = 'warn';
                }
                else {
                    // oImg.className = 'pass';
                    // oBonus.parentNode.className = 'pass';
                }
            }
            if (nScore > 100) {
                nScore = 100;
            }
            else if (nScore < 0) {
                nScore = 0;
            }
            if (nScore >= 0 && nScore < 20) {
                this.complexity = 'خیلی ضعیف';
                this.meter.nativeElement.style.width = nScore + '%';
                this.color = 'darkred';
            }
            else if (nScore >= 20 && nScore < 40) {
                this.meter.nativeElement.style.width = nScore + '%';
                this.color = 'red';
                this.complexity = 'ضعیف';
            }
            else if (nScore >= 40 && nScore < 60) {
                this.meter.nativeElement.style.width = nScore + '%';
                this.color = 'greenyellow';
                this.complexity = 'خوب';
            }
            else if (nScore >= 60 && nScore < 80) {
                this.meter.nativeElement.style.width = nScore + '%';
                this.color = 'lightgreen';
                this.complexity = 'قوی';
            }
            else if (nScore >= 80 && nScore <= 100) {
                this.meter.nativeElement.style.width = nScore + '%';
                this.color = 'green';
                this.complexity = 'خیلی قوی';
            }
            this.score = nScore.toString();
            this.meter.nativeElement.style.width = nScore + '%';
            // oScore.innerHTML  = nScore + '%';
            // oComplexity.innerHTML = sComplexity;
        }
        else {
            this.score = nScore.toString() + '%';
            // this.initPwdChk();
            // oScore.innerHTML = nScore + '%';
            // oComplexity.innerHTML = sComplexity;
        }
    };
    /**
     * @param {?} str
     * @return {?}
     */
    TaminFieldPasswordComponent.prototype.strReverse = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var newstring = '';
        for (var s = 0; s < str.length; s++) {
            newstring = str.charAt(s) + newstring;
        }
        return newstring;
    };
    TaminFieldPasswordComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-field-password',
                    template: "<div>\n  <input\n    type=\"password\"\n    style=\"direction: ltr\"\n    class=\"tamin-form-control-input\"\n    [disabled]=\"control.disabled\"\n    [class.tamin-form-control-valid]=\"control.touched && control.valid\"\n    [class.tamin-form-control-invalid]=\"control.touched && !control.valid\"\n    #inputElement>\n  <div #meterContainer\n       style=\"height: 20px\"\n       class=\"meter-container\"\n       [class.meter-container-bkg-color]=\"complexity !== ''\"\n       [style.visibility]=\"showPasswordMeter ? 'visible' : 'hidden'\">\n    <div #meter [style.background-color]=\"color\" class=\"meter\" [hidden]=\"complexity == ''\"\n         style=\"color:white; padding-right: 5px\">\n      <span style=\"white-space: nowrap\">{{complexity}}</span>&nbsp;<span>(%{{score}})</span>\n    </div>\n  </div>\n</div>\n\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return TaminFieldPasswordComponent; })),
                            multi: true
                        }
                    ],
                    styles: [".meter-container{height:20px}.meter-container-bkg-color{background-color:#bbb}.meter{float:right;height:20px}"]
                }] }
    ];
    TaminFieldPasswordComponent.propDecorators = {
        meter: [{ type: ViewChild, args: ['meter',] }],
        meterContainer: [{ type: ViewChild, args: ['meterContainer',] }],
        showPasswordMeter: [{ type: Input }]
    };
    return TaminFieldPasswordComponent;
}(FieldBaseComponent));
export { TaminFieldPasswordComponent };
if (false) {
    /** @type {?} */
    TaminFieldPasswordComponent.prototype.meter;
    /** @type {?} */
    TaminFieldPasswordComponent.prototype.meterContainer;
    /** @type {?} */
    TaminFieldPasswordComponent.prototype.showPasswordMeter;
    /** @type {?} */
    TaminFieldPasswordComponent.prototype.color;
    /** @type {?} */
    TaminFieldPasswordComponent.prototype.complexity;
    /** @type {?} */
    TaminFieldPasswordComponent.prototype.score;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tZmllbGQtcGFzc3dvcmQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vdGFtaW4tZnJhbWV3b3JrLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZmllbGRzL3RhbWluLWZpZWxkLXBhc3N3b3JkL3RhbWluLWZpZWxkLXBhc3N3b3JkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFL0I7SUFZaUQsdURBQWtCO0lBWm5FO1FBQUEscUVBaVhDO1FBOVZVLHVCQUFpQixHQUFHLEtBQUssQ0FBQztRQUVuQyxnQkFBVSxHQUFHLEVBQUUsQ0FBQztRQUNoQixXQUFLLEdBQUcsRUFBRSxDQUFDOztRQXdWWCxpQkFBaUI7UUFDakIsOERBQThEO1FBQzlELElBQUk7SUFDTixDQUFDOzs7O0lBelZDLHlEQUFtQjs7O0lBQW5CO1FBQUEsaUJBU0M7UUFSQyxVQUFVOzs7UUFBQzs7Z0JBQ0gsTUFBTSxHQUFHLFNBQVMsQ0FBQyxLQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUM7WUFDbEUsS0FBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVM7Ozs7WUFBQyxVQUFDLEdBQVE7Z0JBQzlDLElBQUksS0FBSSxDQUFDLGlCQUFpQixFQUFFO29CQUMxQixLQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3RDO1lBQ0gsQ0FBQyxFQUFDLENBQUMs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QVEsRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUNyQyxxQkFBcUI7WUFDckIsbUNBQW1DO1lBQ25DLHVDQUF1QztTQUN4QztJQUNILENBQUM7Ozs7O0lBRUQsZ0RBQVU7Ozs7SUFBVixVQUFXLEdBQUc7O1lBQ1IsU0FBUyxHQUFHLEVBQUU7UUFDbEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDO1NBQ3ZDO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQzs7Z0JBNVdGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxxMEJBQW9EO29CQUVwRCxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVU7Ozs0QkFBQyxjQUFNLE9BQUEsMkJBQTJCLEVBQTNCLENBQTJCLEVBQUM7NEJBQzFELEtBQUssRUFBRSxJQUFJO3lCQUNaO3FCQUNGOztpQkFDRjs7O3dCQU1FLFNBQVMsU0FBQyxPQUFPO2lDQUNqQixTQUFTLFNBQUMsZ0JBQWdCO29DQUMxQixLQUFLOztJQThWUixrQ0FBQztDQUFBLEFBalhELENBWWlELGtCQUFrQixHQXFXbEU7U0FyV1ksMkJBQTJCOzs7SUFLdEMsNENBQXNDOztJQUN0QyxxREFBd0Q7O0lBQ3hELHdEQUFtQzs7SUFDbkMsNENBQWM7O0lBQ2QsaURBQWdCOztJQUNoQiw0Q0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFbGVtZW50UmVmLCBmb3J3YXJkUmVmLCBJbnB1dCwgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TkdfVkFMVUVfQUNDRVNTT1J9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7RmllbGRCYXNlQ29tcG9uZW50fSBmcm9tICcuLi8uLi8uLi9iYXNlL2ZpZWxkLWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7ZnJvbUV2ZW50fSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGFtaW4tZmllbGQtcGFzc3dvcmQnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFtaW4tZmllbGQtcGFzc3dvcmQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90YW1pbi1maWVsZC1wYXNzd29yZC5jb21wb25lbnQuc2NzcyddLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRhbWluRmllbGRQYXNzd29yZENvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBUYW1pbkZpZWxkUGFzc3dvcmRDb21wb25lbnQgZXh0ZW5kcyBGaWVsZEJhc2VDb21wb25lbnQge1xuXG4gIC8vIEBWaWV3Q2hpbGQoJ3Njb3JlJykgc2NvcmU6IEVsZW1lbnRSZWY7XG4gIC8vIEBWaWV3Q2hpbGQoJ3Njb3JlYmFyJykgc2NvcmViYXI6IEVsZW1lbnRSZWY7XG4gIC8vIEBWaWV3Q2hpbGQoJ2NvbXBsZXhpdHknKSBjb21wbGV4aXR5OiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdtZXRlcicpIG1ldGVyOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdtZXRlckNvbnRhaW5lcicpIG1ldGVyQ29udGFpbmVyOiBFbGVtZW50UmVmO1xuICBASW5wdXQoKSBzaG93UGFzc3dvcmRNZXRlciA9IGZhbHNlO1xuICBjb2xvcjogc3RyaW5nO1xuICBjb21wbGV4aXR5ID0gJyc7XG4gIHNjb3JlID0gJyc7XG5cbiAgaW5pdGlhbGl6ZUNvbXBvbmVudCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbnN0IGtleXVwcyA9IGZyb21FdmVudCh0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LCAna2V5dXAnKTtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLmFkZChrZXl1cHMuc3Vic2NyaWJlKChldnQ6IGFueSkgPT4ge1xuICAgICAgICBpZiAodGhpcy5zaG93UGFzc3dvcmRNZXRlcikge1xuICAgICAgICAgIHRoaXMuY2hlY2tQYXNzd29yZChldnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH0sIDApO1xuICB9XG5cbiAgY2hlY2tQYXNzd29yZChwd2Q6IHN0cmluZykge1xuICAgIHRoaXMuY29sb3IgPSAnd2hpdGUnO1xuICAgIHRoaXMuY29tcGxleGl0eSA9ICcnO1xuICAgIHRoaXMuc2NvcmUgPSAnJztcbiAgICBpZiAocHdkLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG5TY29yZSA9IDAsXG4gICAgICBuTGVuZ3RoID0gMCxcbiAgICAgIG5BbHBoYVVDID0gMCxcbiAgICAgIG5BbHBoYUxDID0gMCxcbiAgICAgIG5OdW1iZXIgPSAwLFxuICAgICAgblN5bWJvbCA9IDAsXG4gICAgICBuTWlkQ2hhciA9IDAsXG4gICAgICBuUmVxdWlyZW1lbnRzID0gMCxcbiAgICAgIG5BbHBoYXNPbmx5ID0gMCxcbiAgICAgIG5OdW1iZXJzT25seSA9IDAsXG4gICAgICBuVW5xQ2hhciA9IDAsXG4gICAgICBuUmVwQ2hhciA9IDAsXG4gICAgICBuUmVwSW5jID0gMCxcbiAgICAgIG5Db25zZWNBbHBoYVVDID0gMCxcbiAgICAgIG5Db25zZWNBbHBoYUxDID0gMCxcbiAgICAgIG5Db25zZWNOdW1iZXIgPSAwLFxuICAgICAgbkNvbnNlY1N5bWJvbCA9IDAsXG4gICAgICBuQ29uc2VjQ2hhclR5cGUgPSAwLFxuICAgICAgblNlcUFscGhhID0gMCxcbiAgICAgIG5TZXFOdW1iZXIgPSAwLFxuICAgICAgblNlcVN5bWJvbCA9IDAsXG4gICAgICBuU2VxQ2hhciA9IDAsXG4gICAgICBuUmVxQ2hhciA9IDA7XG4gICAgLy8gbk11bHRDb25zZWNDaGFyVHlwZSA9IDA7XG4gICAgLy8gY29uc3Qgbk11bHRSZXBDaGFyID0gMSwgbk11bHRDb25zZWNTeW1ib2wgPSAxO1xuICAgIGNvbnN0IG5NdWx0TWlkQ2hhciA9IDIsXG4gICAgICAvKm5NdWx0UmVxdWlyZW1lbnRzID0gMiwqL1xuICAgICAgbk11bHRDb25zZWNBbHBoYVVDID0gMixcbiAgICAgIG5NdWx0Q29uc2VjQWxwaGFMQyA9IDIsXG4gICAgICBuTXVsdENvbnNlY051bWJlciA9IDI7XG4gICAgY29uc3QgblJlcUNoYXJUeXBlID0gMyxcbiAgICAgIC8qbk11bHRBbHBoYVVDID0gMywqL1xuICAgICAgLypuTXVsdEFscGhhTEMgPSAzLCovXG4gICAgICBuTXVsdFNlcUFscGhhID0gMyxcbiAgICAgIG5NdWx0U2VxTnVtYmVyID0gMyxcbiAgICAgIG5NdWx0U2VxU3ltYm9sID0gMztcbiAgICBjb25zdCBuTXVsdExlbmd0aCA9IDQsXG4gICAgICBuTXVsdE51bWJlciA9IDQ7XG4gICAgY29uc3Qgbk11bHRTeW1ib2wgPSA2O1xuICAgIGxldCBuVG1wQWxwaGFVQyA9ICcnLFxuICAgICAgblRtcEFscGhhTEMgPSAnJyxcbiAgICAgIG5UbXBOdW1iZXIgPSAnJywgblRtcFN5bWJvbCA9ICcnO1xuICAgIGxldCBzQWxwaGFVQyA9ICcwJyxcbiAgICAgIHNBbHBoYUxDID0gJzAnLFxuICAgICAgc051bWJlciA9ICcwJyxcbiAgICAgIHNTeW1ib2wgPSAnMCcsXG4gICAgICBzTWlkQ2hhciA9ICcwJyxcbiAgICAgIC8vIHNSZXF1aXJlbWVudHMgPSAnMCcsXG4gICAgICBzQWxwaGFzT25seSA9ICcwJyxcbiAgICAgIHNOdW1iZXJzT25seSA9ICcwJyxcbiAgICAgIHNSZXBDaGFyID0gJzAnLFxuICAgICAgc0NvbnNlY0FscGhhVUMgPSAnMCcsXG4gICAgICBzQ29uc2VjQWxwaGFMQyA9ICcwJyxcbiAgICAgIHNDb25zZWNOdW1iZXIgPSAnMCcsXG4gICAgICBzU2VxQWxwaGEgPSAnMCcsXG4gICAgICBzU2VxTnVtYmVyID0gJzAnLFxuICAgICAgc1NlcVN5bWJvbCA9ICcwJztcbiAgICBjb25zdCBzQWxwaGFzID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JztcbiAgICBjb25zdCBzTnVtZXJpY3MgPSAnMDEyMzQ1Njc4OTAnO1xuICAgIGNvbnN0IHNTeW1ib2xzID0gJykhQCMkJV4mKigpJztcbiAgICAvKmxldCBzQ29tcGxleGl0eSA9ICcnOyovXG4gICAgY29uc3Qgc1N0YW5kYXJkcyA9ICdCZWxvdyc7XG4gICAgY29uc3Qgbk1pblB3ZExlbiA9IDg7XG4gICAgaWYgKGRvY3VtZW50LmFsbCkge1xuICAgICAgY29uc3QgbmQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuZCA9IDE7XG4gICAgfVxuICAgIGlmIChwd2QpIHtcbiAgICAgIG5TY29yZSA9IE51bWJlcihwd2QubGVuZ3RoICogbk11bHRMZW5ndGgpO1xuICAgICAgbkxlbmd0aCA9IHB3ZC5sZW5ndGg7XG4gICAgICBjb25zdCBhcnJQd2QgPSBwd2QucmVwbGFjZSgvXFxzKy9nLCAnJykuc3BsaXQoL1xccyovKTtcbiAgICAgIGNvbnN0IGFyclB3ZExlbiA9IGFyclB3ZC5sZW5ndGg7XG5cbiAgICAgIGZvciAobGV0IGEgPSAwOyBhIDwgYXJyUHdkTGVuOyBhKyspIHtcbiAgICAgICAgaWYgKGFyclB3ZFthXS5tYXRjaCgvW0EtWl0vZykpIHtcbiAgICAgICAgICBpZiAoblRtcEFscGhhVUMgIT09ICcnKSB7XG4gICAgICAgICAgICBpZiAoTnVtYmVyKG5UbXBBbHBoYVVDICsgMSkgPT09IGEpIHtcbiAgICAgICAgICAgICAgbkNvbnNlY0FscGhhVUMrKztcbiAgICAgICAgICAgICAgbkNvbnNlY0NoYXJUeXBlKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIG5UbXBBbHBoYVVDID0gYS50b1N0cmluZygpO1xuICAgICAgICAgIG5BbHBoYVVDKys7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJyUHdkW2FdLm1hdGNoKC9bYS16XS9nKSkge1xuICAgICAgICAgIGlmIChuVG1wQWxwaGFMQyAhPT0gJycpIHtcbiAgICAgICAgICAgIGlmIChOdW1iZXIoblRtcEFscGhhTEMgKyAxKSA9PT0gYSkge1xuICAgICAgICAgICAgICBuQ29uc2VjQWxwaGFMQysrO1xuICAgICAgICAgICAgICBuQ29uc2VjQ2hhclR5cGUrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgblRtcEFscGhhTEMgPSBhLnRvU3RyaW5nKCk7XG4gICAgICAgICAgbkFscGhhTEMrKztcbiAgICAgICAgfSBlbHNlIGlmIChhcnJQd2RbYV0ubWF0Y2goL1swLTldL2cpKSB7XG4gICAgICAgICAgaWYgKGEgPiAwICYmIGEgPCAoYXJyUHdkTGVuIC0gMSkpIHtcbiAgICAgICAgICAgIG5NaWRDaGFyKys7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChuVG1wTnVtYmVyICE9PSAnJykge1xuICAgICAgICAgICAgaWYgKE51bWJlcihuVG1wTnVtYmVyICsgMSkgPT09IGEpIHtcbiAgICAgICAgICAgICAgbkNvbnNlY051bWJlcisrO1xuICAgICAgICAgICAgICBuQ29uc2VjQ2hhclR5cGUrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgblRtcE51bWJlciA9IGEudG9TdHJpbmcoKTtcbiAgICAgICAgICBuTnVtYmVyKys7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJyUHdkW2FdLm1hdGNoKC9bXmEtekEtWjAtOV9dL2cpKSB7XG4gICAgICAgICAgaWYgKGEgPiAwICYmIGEgPCAoYXJyUHdkTGVuIC0gMSkpIHtcbiAgICAgICAgICAgIG5NaWRDaGFyKys7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChuVG1wU3ltYm9sICE9PSAnJykge1xuICAgICAgICAgICAgaWYgKE51bWJlcihuVG1wU3ltYm9sICsgMSkgPT09IGEpIHtcbiAgICAgICAgICAgICAgbkNvbnNlY1N5bWJvbCsrO1xuICAgICAgICAgICAgICBuQ29uc2VjQ2hhclR5cGUrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgblRtcFN5bWJvbCA9IGEudG9TdHJpbmcoKTtcbiAgICAgICAgICBuU3ltYm9sKys7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGJDaGFyRXhpc3RzID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGIgPSAwOyBiIDwgYXJyUHdkTGVuOyBiKyspIHtcbiAgICAgICAgICBpZiAoYXJyUHdkW2FdID09PSBhcnJQd2RbYl0gJiYgYSAhPT0gYikgeyAvKiByZXBlYXQgY2hhcmFjdGVyIGV4aXN0cyAqL1xuICAgICAgICAgICAgYkNoYXJFeGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgblJlcEluYyArPSBNYXRoLmFicyhhcnJQd2RMZW4gLyAoYiAtIGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJDaGFyRXhpc3RzKSB7XG4gICAgICAgICAgblJlcENoYXIrKztcbiAgICAgICAgICBuVW5xQ2hhciA9IGFyclB3ZExlbiAtIG5SZXBDaGFyO1xuICAgICAgICAgIG5SZXBJbmMgPSAoblVucUNoYXIpID8gTWF0aC5jZWlsKG5SZXBJbmMgLyBuVW5xQ2hhcikgOiBNYXRoLmNlaWwoblJlcEluYyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyogQ2hlY2sgZm9yIHNlcXVlbnRpYWwgYWxwaGEgc3RyaW5nIHBhdHRlcm5zIChmb3J3YXJkIGFuZCByZXZlcnNlKSAqL1xuICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCAyMzsgcysrKSB7XG4gICAgICAgIGNvbnN0IHNGd2QgPSBzQWxwaGFzLnN1YnN0cmluZyhzLCBOdW1iZXIocyArIDMpKTtcbiAgICAgICAgY29uc3Qgc1JldiA9IHRoaXMuc3RyUmV2ZXJzZShzRndkKTtcbiAgICAgICAgaWYgKHB3ZC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc0Z3ZCkgIT09IC0xIHx8IHB3ZC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc1JldikgIT09IC0xKSB7XG4gICAgICAgICAgblNlcUFscGhhKys7XG4gICAgICAgICAgblNlcUNoYXIrKztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBzID0gMDsgcyA8IDg7IHMrKykge1xuICAgICAgICBjb25zdCBzRndkID0gc051bWVyaWNzLnN1YnN0cmluZyhzLCBOdW1iZXIocyArIDMpKTtcbiAgICAgICAgY29uc3Qgc1JldiA9IHRoaXMuc3RyUmV2ZXJzZShzRndkKTtcbiAgICAgICAgaWYgKHB3ZC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc0Z3ZCkgIT09IC0xIHx8IHB3ZC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc1JldikgIT09IC0xKSB7XG4gICAgICAgICAgblNlcU51bWJlcisrO1xuICAgICAgICAgIG5TZXFDaGFyKys7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCA4OyBzKyspIHtcbiAgICAgICAgY29uc3Qgc0Z3ZCA9IHNTeW1ib2xzLnN1YnN0cmluZyhzLCBOdW1iZXIocyArIDMpKTtcbiAgICAgICAgY29uc3Qgc1JldiA9IHRoaXMuc3RyUmV2ZXJzZShzRndkKTtcbiAgICAgICAgaWYgKHB3ZC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc0Z3ZCkgIT09IC0xIHx8IHB3ZC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc1JldikgIT09IC0xKSB7XG4gICAgICAgICAgblNlcVN5bWJvbCsrO1xuICAgICAgICAgIG5TZXFDaGFyKys7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG5BbHBoYVVDID4gMCAmJiBuQWxwaGFVQyA8IG5MZW5ndGgpIHtcbiAgICAgICAgblNjb3JlID0gTnVtYmVyKG5TY29yZSArICgobkxlbmd0aCAtIG5BbHBoYVVDKSAqIDIpKTtcbiAgICAgICAgc0FscGhhVUMgPSAnKyAnICsgTnVtYmVyKChuTGVuZ3RoIC0gbkFscGhhVUMpICogMik7XG4gICAgICB9XG4gICAgICBpZiAobkFscGhhTEMgPiAwICYmIG5BbHBoYUxDIDwgbkxlbmd0aCkge1xuICAgICAgICBuU2NvcmUgPSBOdW1iZXIoblNjb3JlICsgKChuTGVuZ3RoIC0gbkFscGhhTEMpICogMikpO1xuICAgICAgICBzQWxwaGFMQyA9ICcrICcgKyBOdW1iZXIoKG5MZW5ndGggLSBuQWxwaGFMQykgKiAyKTtcbiAgICAgIH1cbiAgICAgIGlmIChuTnVtYmVyID4gMCAmJiBuTnVtYmVyIDwgbkxlbmd0aCkge1xuICAgICAgICBuU2NvcmUgPSBOdW1iZXIoblNjb3JlICsgKG5OdW1iZXIgKiBuTXVsdE51bWJlcikpO1xuICAgICAgICBzTnVtYmVyID0gJysgJyArIE51bWJlcihuTnVtYmVyICogbk11bHROdW1iZXIpO1xuICAgICAgfVxuICAgICAgaWYgKG5TeW1ib2wgPiAwKSB7XG4gICAgICAgIG5TY29yZSA9IE51bWJlcihuU2NvcmUgKyAoblN5bWJvbCAqIG5NdWx0U3ltYm9sKSk7XG4gICAgICAgIHNTeW1ib2wgPSAnKyAnICsgTnVtYmVyKG5TeW1ib2wgKiBuTXVsdFN5bWJvbCk7XG4gICAgICB9XG4gICAgICBpZiAobk1pZENoYXIgPiAwKSB7XG4gICAgICAgIG5TY29yZSA9IE51bWJlcihuU2NvcmUgKyAobk1pZENoYXIgKiBuTXVsdE1pZENoYXIpKTtcbiAgICAgICAgc01pZENoYXIgPSAnKyAnICsgTnVtYmVyKG5NaWRDaGFyICogbk11bHRNaWRDaGFyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChuQWxwaGFMQyA+IDAgfHwgbkFscGhhVUMgPiAwKSAmJiBuU3ltYm9sID09PSAwICYmIG5OdW1iZXIgPT09IDApIHsgIC8vIE9ubHkgTGV0dGVyc1xuICAgICAgICBuU2NvcmUgPSBOdW1iZXIoblNjb3JlIC0gbkxlbmd0aCk7XG4gICAgICAgIG5BbHBoYXNPbmx5ID0gbkxlbmd0aDtcbiAgICAgICAgc0FscGhhc09ubHkgPSAnLSAnICsgbkxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGlmIChuQWxwaGFMQyA9PT0gMCAmJiBuQWxwaGFVQyA9PT0gMCAmJiBuU3ltYm9sID09PSAwICYmIG5OdW1iZXIgPiAwKSB7ICAvLyBPbmx5IE51bWJlcnNcbiAgICAgICAgblNjb3JlID0gTnVtYmVyKG5TY29yZSAtIG5MZW5ndGgpO1xuICAgICAgICBuTnVtYmVyc09ubHkgPSBuTGVuZ3RoO1xuICAgICAgICBzTnVtYmVyc09ubHkgPSAnLSAnICsgbkxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGlmIChuUmVwQ2hhciA+IDApIHsgIC8vIFNhbWUgY2hhcmFjdGVyIGV4aXN0cyBtb3JlIHRoYW4gb25jZVxuICAgICAgICBuU2NvcmUgPSBOdW1iZXIoblNjb3JlIC0gblJlcEluYyk7XG4gICAgICAgIHNSZXBDaGFyID0gJy0gJyArIG5SZXBJbmM7XG4gICAgICB9XG4gICAgICBpZiAobkNvbnNlY0FscGhhVUMgPiAwKSB7ICAvLyBDb25zZWN1dGl2ZSBVcHBlcmNhc2UgTGV0dGVycyBleGlzdFxuICAgICAgICBuU2NvcmUgPSBOdW1iZXIoblNjb3JlIC0gKG5Db25zZWNBbHBoYVVDICogbk11bHRDb25zZWNBbHBoYVVDKSk7XG4gICAgICAgIHNDb25zZWNBbHBoYVVDID0gJy0gJyArIE51bWJlcihuQ29uc2VjQWxwaGFVQyAqIG5NdWx0Q29uc2VjQWxwaGFVQyk7XG4gICAgICB9XG4gICAgICBpZiAobkNvbnNlY0FscGhhTEMgPiAwKSB7ICAvLyBDb25zZWN1dGl2ZSBMb3dlcmNhc2UgTGV0dGVycyBleGlzdFxuICAgICAgICBuU2NvcmUgPSBOdW1iZXIoblNjb3JlIC0gKG5Db25zZWNBbHBoYUxDICogbk11bHRDb25zZWNBbHBoYUxDKSk7XG4gICAgICAgIHNDb25zZWNBbHBoYUxDID0gJy0gJyArIE51bWJlcihuQ29uc2VjQWxwaGFMQyAqIG5NdWx0Q29uc2VjQWxwaGFMQyk7XG4gICAgICB9XG4gICAgICBpZiAobkNvbnNlY051bWJlciA+IDApIHsgIC8vIENvbnNlY3V0aXZlIE51bWJlcnMgZXhpc3RcbiAgICAgICAgblNjb3JlID0gTnVtYmVyKG5TY29yZSAtIChuQ29uc2VjTnVtYmVyICogbk11bHRDb25zZWNOdW1iZXIpKTtcbiAgICAgICAgc0NvbnNlY051bWJlciA9ICctICcgKyBOdW1iZXIobkNvbnNlY051bWJlciAqIG5NdWx0Q29uc2VjTnVtYmVyKTtcbiAgICAgIH1cbiAgICAgIGlmIChuU2VxQWxwaGEgPiAwKSB7ICAvLyBTZXF1ZW50aWFsIGFscGhhIHN0cmluZ3MgZXhpc3QgKDMgY2hhcmFjdGVycyBvciBtb3JlKVxuICAgICAgICBuU2NvcmUgPSBOdW1iZXIoblNjb3JlIC0gKG5TZXFBbHBoYSAqIG5NdWx0U2VxQWxwaGEpKTtcbiAgICAgICAgc1NlcUFscGhhID0gJy0gJyArIE51bWJlcihuU2VxQWxwaGEgKiBuTXVsdFNlcUFscGhhKTtcbiAgICAgIH1cbiAgICAgIGlmIChuU2VxTnVtYmVyID4gMCkgeyAgLy8gU2VxdWVudGlhbCBudW1lcmljIHN0cmluZ3MgZXhpc3QgKDMgY2hhcmFjdGVycyBvciBtb3JlKVxuICAgICAgICBuU2NvcmUgPSBOdW1iZXIoblNjb3JlIC0gKG5TZXFOdW1iZXIgKiBuTXVsdFNlcU51bWJlcikpO1xuICAgICAgICBzU2VxTnVtYmVyID0gJy0gJyArIE51bWJlcihuU2VxTnVtYmVyICogbk11bHRTZXFOdW1iZXIpO1xuICAgICAgfVxuICAgICAgaWYgKG5TZXFTeW1ib2wgPiAwKSB7ICAvLyBTZXF1ZW50aWFsIHN5bWJvbCBzdHJpbmdzIGV4aXN0ICgzIGNoYXJhY3RlcnMgb3IgbW9yZSlcbiAgICAgICAgblNjb3JlID0gTnVtYmVyKG5TY29yZSAtIChuU2VxU3ltYm9sICogbk11bHRTZXFTeW1ib2wpKTtcbiAgICAgICAgc1NlcVN5bWJvbCA9ICctICcgKyBOdW1iZXIoblNlcVN5bWJvbCAqIG5NdWx0U2VxU3ltYm9sKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGFyckNoYXJzID0gW25MZW5ndGgsIG5BbHBoYVVDLCBuQWxwaGFMQywgbk51bWJlciwgblN5bWJvbF07XG4gICAgICBsZXQgYXJyQ2hhcnNJZHMgPSBbJ25MZW5ndGgnLCAnbkFscGhhVUMnLCAnbkFscGhhTEMnLCAnbk51bWJlcicsICduU3ltYm9sJ107XG4gICAgICBsZXQgYXJyQ2hhcnNMZW4gPSBhcnJDaGFycy5sZW5ndGg7XG4gICAgICBsZXQgbWluVmFsO1xuICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBhcnJDaGFyc0xlbjsgYysrKSB7XG4gICAgICAgIC8vIGxldCBvSW1nID0gJCgnZGl2XycgKyBhcnJDaGFyc0lkc1tjXSk7XG4gICAgICAgIC8vIGxldCBvQm9udXMgPSAkKGFyckNoYXJzSWRzW2NdICsgJ0JvbnVzJyk7XG4gICAgICAgIC8vICQoYXJyQ2hhcnNJZHNbY10pLmlubmVySFRNTCA9IGFyckNoYXJzW2NdO1xuICAgICAgICBpZiAoYXJyQ2hhcnNJZHNbY10gPT09ICduTGVuZ3RoJykge1xuICAgICAgICAgIG1pblZhbCA9IE51bWJlcihuTWluUHdkTGVuIC0gMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWluVmFsID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJyQ2hhcnNbY10gPT09IE51bWJlcihtaW5WYWwgKyAxKSkge1xuICAgICAgICAgIG5SZXFDaGFyKys7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJyQ2hhcnNbY10gPiBOdW1iZXIobWluVmFsICsgMSkpIHtcbiAgICAgICAgICBuUmVxQ2hhcisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBuUmVxdWlyZW1lbnRzID0gblJlcUNoYXI7XG4gICAgICBsZXQgbk1pblJlcUNoYXJzO1xuICAgICAgaWYgKHB3ZC5sZW5ndGggPj0gbk1pblB3ZExlbikge1xuICAgICAgICBuTWluUmVxQ2hhcnMgPSAzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbk1pblJlcUNoYXJzID0gNDtcbiAgICAgIH1cbiAgICAgIGlmIChuUmVxdWlyZW1lbnRzID4gbk1pblJlcUNoYXJzKSB7ICAvLyBPbmUgb3IgbW9yZSByZXF1aXJlZCBjaGFyYWN0ZXJzIGV4aXN0XG4gICAgICAgIG5TY29yZSA9IE51bWJlcihuU2NvcmUgKyAoblJlcXVpcmVtZW50cyAqIDIpKTtcbiAgICAgIH1cblxuICAgICAgYXJyQ2hhcnMgPSBbbk1pZENoYXIsIG5SZXF1aXJlbWVudHNdO1xuICAgICAgYXJyQ2hhcnNJZHMgPSBbJ25NaWRDaGFyJywgJ25SZXF1aXJlbWVudHMnXTtcbiAgICAgIGFyckNoYXJzTGVuID0gYXJyQ2hhcnMubGVuZ3RoO1xuICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBhcnJDaGFyc0xlbjsgYysrKSB7XG4gICAgICAgIGlmIChhcnJDaGFyc0lkc1tjXSA9PT0gJ25SZXF1aXJlbWVudHMnKSB7XG4gICAgICAgICAgbWluVmFsID0gbk1pblJlcUNoYXJzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1pblZhbCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYXJyQ2hhcnMgPSBbbkFscGhhc09ubHksIG5OdW1iZXJzT25seSwgblJlcENoYXIsIG5Db25zZWNBbHBoYVVDLCBuQ29uc2VjQWxwaGFMQywgbkNvbnNlY051bWJlciwgblNlcUFscGhhLCBuU2VxTnVtYmVyLCBuU2VxU3ltYm9sXTtcbiAgICAgIGFyckNoYXJzSWRzID0gWyduQWxwaGFzT25seScsICduTnVtYmVyc09ubHknLCAnblJlcENoYXInLCAnbkNvbnNlY0FscGhhVUMnLCAnbkNvbnNlY0FscGhhTEMnLCAnbkNvbnNlY051bWJlcicsICduU2VxQWxwaGEnLCAnblNlcU51bWJlcicsICduU2VxU3ltYm9sJ107XG4gICAgICBhcnJDaGFyc0xlbiA9IGFyckNoYXJzLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgYXJyQ2hhcnNMZW47IGMrKykge1xuICAgICAgICAvLyBjb25zdCBvSW1nID0gJCgnZGl2XycgKyBhcnJDaGFyc0lkc1tjXSk7XG4gICAgICAgIC8vIGNvbnN0IG9Cb251cyA9ICQoYXJyQ2hhcnNJZHNbY10gKyAnQm9udXMnKTtcbiAgICAgICAgLy8gJChhcnJDaGFyc0lkc1tjXSkuaW5uZXJIVE1MID0gYXJyQ2hhcnNbY107XG4gICAgICAgIGlmIChhcnJDaGFyc1tjXSA+IDApIHtcbiAgICAgICAgICAvLyBvSW1nLmNsYXNzTmFtZSA9ICd3YXJuJztcbiAgICAgICAgICAvLyBvQm9udXMucGFyZW50Tm9kZS5jbGFzc05hbWUgPSAnd2Fybic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gb0ltZy5jbGFzc05hbWUgPSAncGFzcyc7XG4gICAgICAgICAgLy8gb0JvbnVzLnBhcmVudE5vZGUuY2xhc3NOYW1lID0gJ3Bhc3MnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChuU2NvcmUgPiAxMDApIHtcbiAgICAgICAgblNjb3JlID0gMTAwO1xuICAgICAgfSBlbHNlIGlmIChuU2NvcmUgPCAwKSB7XG4gICAgICAgIG5TY29yZSA9IDA7XG4gICAgICB9XG4gICAgICBpZiAoblNjb3JlID49IDAgJiYgblNjb3JlIDwgMjApIHtcbiAgICAgICAgdGhpcy5jb21wbGV4aXR5ID0gJ9iu24zZhNuMINi22LnbjNmBJztcbiAgICAgICAgdGhpcy5tZXRlci5uYXRpdmVFbGVtZW50LnN0eWxlLndpZHRoID0gblNjb3JlICsgJyUnO1xuICAgICAgICB0aGlzLmNvbG9yID0gJ2RhcmtyZWQnO1xuICAgICAgfSBlbHNlIGlmIChuU2NvcmUgPj0gMjAgJiYgblNjb3JlIDwgNDApIHtcbiAgICAgICAgdGhpcy5tZXRlci5uYXRpdmVFbGVtZW50LnN0eWxlLndpZHRoID0gblNjb3JlICsgJyUnO1xuICAgICAgICB0aGlzLmNvbG9yID0gJ3JlZCc7XG4gICAgICAgIHRoaXMuY29tcGxleGl0eSA9ICfYtti524zZgSc7XG4gICAgICB9IGVsc2UgaWYgKG5TY29yZSA+PSA0MCAmJiBuU2NvcmUgPCA2MCkge1xuICAgICAgICB0aGlzLm1ldGVyLm5hdGl2ZUVsZW1lbnQuc3R5bGUud2lkdGggPSBuU2NvcmUgKyAnJSc7XG4gICAgICAgIHRoaXMuY29sb3IgPSAnZ3JlZW55ZWxsb3cnO1xuICAgICAgICB0aGlzLmNvbXBsZXhpdHkgPSAn2K7ZiNioJztcbiAgICAgIH0gZWxzZSBpZiAoblNjb3JlID49IDYwICYmIG5TY29yZSA8IDgwKSB7XG4gICAgICAgIHRoaXMubWV0ZXIubmF0aXZlRWxlbWVudC5zdHlsZS53aWR0aCA9IG5TY29yZSArICclJztcbiAgICAgICAgdGhpcy5jb2xvciA9ICdsaWdodGdyZWVuJztcbiAgICAgICAgdGhpcy5jb21wbGV4aXR5ID0gJ9mC2YjbjCc7XG4gICAgICB9IGVsc2UgaWYgKG5TY29yZSA+PSA4MCAmJiBuU2NvcmUgPD0gMTAwKSB7XG4gICAgICAgIHRoaXMubWV0ZXIubmF0aXZlRWxlbWVudC5zdHlsZS53aWR0aCA9IG5TY29yZSArICclJztcbiAgICAgICAgdGhpcy5jb2xvciA9ICdncmVlbic7XG4gICAgICAgIHRoaXMuY29tcGxleGl0eSA9ICfYrtuM2YTbjCDZgtmI24wnO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNjb3JlID0gblNjb3JlLnRvU3RyaW5nKCk7XG4gICAgICB0aGlzLm1ldGVyLm5hdGl2ZUVsZW1lbnQuc3R5bGUud2lkdGggPSBuU2NvcmUgKyAnJSc7XG4gICAgICAvLyBvU2NvcmUuaW5uZXJIVE1MICA9IG5TY29yZSArICclJztcbiAgICAgIC8vIG9Db21wbGV4aXR5LmlubmVySFRNTCA9IHNDb21wbGV4aXR5O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNjb3JlID0gblNjb3JlLnRvU3RyaW5nKCkgKyAnJSc7XG4gICAgICAvLyB0aGlzLmluaXRQd2RDaGsoKTtcbiAgICAgIC8vIG9TY29yZS5pbm5lckhUTUwgPSBuU2NvcmUgKyAnJSc7XG4gICAgICAvLyBvQ29tcGxleGl0eS5pbm5lckhUTUwgPSBzQ29tcGxleGl0eTtcbiAgICB9XG4gIH1cblxuICBzdHJSZXZlcnNlKHN0cikge1xuICAgIGxldCBuZXdzdHJpbmcgPSAnJztcbiAgICBmb3IgKGxldCBzID0gMDsgcyA8IHN0ci5sZW5ndGg7IHMrKykge1xuICAgICAgbmV3c3RyaW5nID0gc3RyLmNoYXJBdChzKSArIG5ld3N0cmluZztcbiAgICB9XG4gICAgcmV0dXJuIG5ld3N0cmluZztcbiAgfVxuXG4gIC8vIGluaXRQd2RDaGsoKSB7XG4gIC8vIHRoaXMuc2NvcmViYXIubmF0aXZlRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb24gPSAnMCc7XG4gIC8vIH1cbn1cbiJdfQ==