/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef, Input, ViewChild } from '@angular/core';
import { TaminDataGridComponent } from '../../tamin-data-grid/tamin-data-grid.component';
import { FieldBaseComponent } from '../../../base/field-base.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { TaminDataGridConfiguration } from '../../../helpers/tamin.data.grid.configuration/tamin.data.grid.configuration';
import { PickerContainerComponent } from '../../containers/picker-container/picker-container.component';
import { SearchOperator } from '../../../models/search-param.model';
var TaminFieldComboBoxComponent = /** @class */ (function (_super) {
    tslib_1.__extends(TaminFieldComboBoxComponent, _super);
    function TaminFieldComboBoxComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.searchOperatorType = SearchOperator.EQUAL;
        return _this;
    }
    /**
     * @return {?}
     */
    TaminFieldComboBoxComponent.prototype.initializeComponent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.initializeGrid();
        this.picker.parent = this.inputElement;
        this.picker.button = this.iconElement;
        if (this.casecadeControlName) {
            this.parent = this.controlContainer.control.get(this.casecadeControlName);
            this.subscription.add(this.parent.valueChanges.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                _this.parentValue = value;
            })));
        }
    };
    /**
     * @private
     * @return {?}
     */
    TaminFieldComboBoxComponent.prototype.initializeGrid = /**
     * @private
     * @return {?}
     */
    function () {
        this.theGrid.configuration = this.dataGridConfiguration;
        this.theGrid.loadDataOnInit = false;
    };
    /**
     * @return {?}
     */
    TaminFieldComboBoxComponent.prototype.onClearContent = /**
     * @return {?}
     */
    function () {
        this.onChange('');
        this.inputElement.nativeElement.value = '';
        this.picker.hide();
    };
    /**
     * @return {?}
     */
    TaminFieldComboBoxComponent.prototype.onShowPicker = /**
     * @return {?}
     */
    function () {
        this.picker.toggle();
        this.theGrid.refreshData();
    };
    /**
     * @param {?} val
     * @return {?}
     */
    TaminFieldComboBoxComponent.prototype.onItemSelected = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (!val) {
            this.onChange('');
            this.hidePopup();
            return;
        }
        /** @type {?} */
        var displayField = this.deepFind(val, this.displayField);
        /** @type {?} */
        var valueField = this.deepFind(val, this.valueField);
        if (!displayField || !valueField) {
            this.inputElement.nativeElement.value = '';
            this.onChange('');
            return;
        }
        this.inputElement.nativeElement.value = displayField;
        this.onChange(valueField);
        this.hidePopup();
    };
    /**
     * @return {?}
     */
    TaminFieldComboBoxComponent.prototype.hidePopup = /**
     * @return {?}
     */
    function () {
        this.picker.hide();
    };
    /**
     * @return {?}
     */
    TaminFieldComboBoxComponent.prototype.showPopup = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.picker.show();
        if (this.parentValue && this.parentValue !== '') {
            /** @type {?} */
            var tmp_1 = this.theGrid.searchParams.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.property === _this.parentValue; }));
            if (tmp_1) {
                this.theGrid.searchParams = this.theGrid.searchParams.filter((/**
                 * @param {?} obj
                 * @return {?}
                 */
                function (obj) { return obj !== tmp_1; }));
            }
            this.theGrid.searchParams.push({
                property: this.casecadeControlFieldName,
                value: this.parentValue,
                operator: this.searchOperatorType
            });
        }
        this.theGrid.refreshData();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TaminFieldComboBoxComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // const theValue = value == null ? '' : value;
        // if (theValue !== '') {
        //   this.loadData(theValue);
        // }
        /** @type {?} */
        var theValue = value == null ? '' : value;
        if (theValue !== '') {
            this.loadData(theValue);
        }
        else {
            this.inputElement.nativeElement.value = '';
        }
    };
    /**
     * @private
     * @param {?} theValue
     * @return {?}
     */
    TaminFieldComboBoxComponent.prototype.loadData = /**
     * @private
     * @param {?} theValue
     * @return {?}
     */
    function (theValue) {
        var _this = this;
        /** @type {?} */
        var theUrl = this.dataGridConfiguration.serviceUrl;
        /** @type {?} */
        var id = this.dataGridConfiguration.id;
        /** @type {?} */
        var searchParam = [
            {
                property: id,
                value: theValue,
                operator: this.searchOperatorType
            }
        ];
        if (this.parentValue && this.parentValue !== '') {
            searchParam.push({
                property: this.casecadeControlFieldName,
                value: this.parentValue,
                operator: this.searchOperatorType
            });
        }
        this.startWaiting();
        this.restService
            .getAll(theUrl, searchParam)
            .then((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.stopWaiting();
            if (value.data.list.length === 0) {
                _this.onChange('');
            }
            _this.onItemSelected(value.data.list[0]);
            _this.theGrid.dataItems = [];
            _this.theGrid.dataItems.push(value.data.list[0]);
        }))
            .catch((/**
         * @param {?} reason
         * @return {?}
         */
        function (reason) {
            _this.stopWaiting();
            _this.onChange('');
        }));
    };
    TaminFieldComboBoxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-field-combo-box',
                    template: "<div class=\"input-wrapper\">\n  <input\n    id=\"textbox\"\n    readonly=\"readonly\"\n    [disabled] = \"control.disabled\"\n    style=\"padding-left: 35px;cursor: pointer\"\n    type=\"text\"\n    class=\"tamin-form-control-input\"\n    (click)=\"onShowPicker()\"\n    [class.tamin-form-control-valid]=\"control.touched && control.valid\"\n    [class.tamin-form-control-invalid]=\"control.touched && !control.valid\"\n    #inputElement [attr.placeholder]=\"placeHolder\">\n  <span class=\"icon\" style=\"margin-left:20px\" *ngIf=\"showClearButton\" (click)=\"onClearContent()\">\n    <i\n      class=\"icon-cancel\"\n      style=\"font-size: 1.5em\"\n      [class.tamin-form-control-valid-icon]=\"control.touched && control.valid\"\n      [class.tamin-form-control-invalid-icon]=\"control.touched && !control.valid\"></i>\n  </span>\n\n  <span class=\"icon\" #icon (click)=\"onShowPicker()\">\n    <i\n      class=\"icon-down-open\"\n      style=\"font-size: 1.5em\"\n      [class.tamin-form-control-valid-icon]=\"control.touched && control.valid\"\n      [class.tamin-form-control-invalid-icon]=\"control.touched && !control.valid\"\n    ></i>\n  </span>\n</div>\n<tamin-picker-container #picker>\n  <tamin-data-grid #theGrid (itemSelect)=\"onItemSelected($event)\" [allowBreakPoints]=\"false\" [showHover]=\"true\"></tamin-data-grid>\n</tamin-picker-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return TaminFieldComboBoxComponent; })),
                            multi: true
                        }
                    ],
                    styles: [".input-wrapper{position:relative}.icon{position:absolute;top:23%;left:5px;height:10px;margin-top:-5px;cursor:pointer}"]
                }] }
    ];
    TaminFieldComboBoxComponent.propDecorators = {
        dataGridConfiguration: [{ type: Input }],
        displayField: [{ type: Input }],
        valueField: [{ type: Input }],
        casecadeControlName: [{ type: Input }],
        casecadeControlFieldName: [{ type: Input }],
        showClearButton: [{ type: Input }],
        searchOperatorType: [{ type: Input }],
        theGrid: [{ type: ViewChild, args: ['theGrid',] }],
        picker: [{ type: ViewChild, args: ['picker',] }],
        iconElement: [{ type: ViewChild, args: ['icon',] }]
    };
    return TaminFieldComboBoxComponent;
}(FieldBaseComponent));
export { TaminFieldComboBoxComponent };
if (false) {
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.dataGridConfiguration;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.displayField;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.valueField;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.casecadeControlName;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.casecadeControlFieldName;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.showClearButton;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.searchOperatorType;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.theGrid;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.picker;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.iconElement;
    /**
     * @type {?}
     * @private
     */
    TaminFieldComboBoxComponent.prototype.parent;
    /**
     * @type {?}
     * @private
     */
    TaminFieldComboBoxComponent.prototype.parentValue;
}
//# sourceMappingURL=data:application/json;base64,