/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, Input, ViewChild } from '@angular/core';
import { TaminDataGridComponent } from '../../tamin-data-grid/tamin-data-grid.component';
import { FieldBaseComponent } from '../../../base/field-base.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { TaminDataGridConfiguration } from '../../../helpers/tamin.data.grid.configuration/tamin.data.grid.configuration';
import { PickerContainerComponent } from '../../containers/picker-container/picker-container.component';
import { SearchOperator } from '../../../models/search-param.model';
export class TaminFieldComboBoxComponent extends FieldBaseComponent {
    constructor() {
        super(...arguments);
        this.searchOperatorType = SearchOperator.EQUAL;
    }
    /**
     * @return {?}
     */
    initializeComponent() {
        this.initializeGrid();
        this.picker.parent = this.inputElement;
        this.picker.button = this.iconElement;
        if (this.casecadeControlName) {
            this.parent = this.controlContainer.control.get(this.casecadeControlName);
            this.subscription.add(this.parent.valueChanges.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                this.parentValue = value;
            })));
        }
    }
    /**
     * @private
     * @return {?}
     */
    initializeGrid() {
        this.theGrid.configuration = this.dataGridConfiguration;
        this.theGrid.loadDataOnInit = false;
    }
    /**
     * @return {?}
     */
    onClearContent() {
        this.onChange('');
        this.inputElement.nativeElement.value = '';
        this.picker.hide();
    }
    /**
     * @return {?}
     */
    onShowPicker() {
        this.picker.toggle();
        this.theGrid.refreshData();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    onItemSelected(val) {
        if (!val) {
            this.onChange('');
            this.hidePopup();
            return;
        }
        /** @type {?} */
        const displayField = this.deepFind(val, this.displayField);
        /** @type {?} */
        const valueField = this.deepFind(val, this.valueField);
        if (!displayField || !valueField) {
            this.inputElement.nativeElement.value = '';
            this.onChange('');
            return;
        }
        this.inputElement.nativeElement.value = displayField;
        this.onChange(valueField);
        this.hidePopup();
    }
    /**
     * @return {?}
     */
    hidePopup() {
        this.picker.hide();
    }
    /**
     * @return {?}
     */
    showPopup() {
        this.picker.show();
        if (this.parentValue && this.parentValue !== '') {
            /** @type {?} */
            const tmp = this.theGrid.searchParams.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.property === this.parentValue));
            if (tmp) {
                this.theGrid.searchParams = this.theGrid.searchParams.filter((/**
                 * @param {?} obj
                 * @return {?}
                 */
                obj => obj !== tmp));
            }
            this.theGrid.searchParams.push({
                property: this.casecadeControlFieldName,
                value: this.parentValue,
                operator: this.searchOperatorType
            });
        }
        this.theGrid.refreshData();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        // const theValue = value == null ? '' : value;
        // if (theValue !== '') {
        //   this.loadData(theValue);
        // }
        /** @type {?} */
        const theValue = value == null ? '' : value;
        if (theValue !== '') {
            this.loadData(theValue);
        }
        else {
            this.inputElement.nativeElement.value = '';
        }
    }
    /**
     * @private
     * @param {?} theValue
     * @return {?}
     */
    loadData(theValue) {
        /** @type {?} */
        const theUrl = this.dataGridConfiguration.serviceUrl;
        /** @type {?} */
        const id = this.dataGridConfiguration.id;
        /** @type {?} */
        const searchParam = [
            {
                property: id,
                value: theValue,
                operator: this.searchOperatorType
            }
        ];
        if (this.parentValue && this.parentValue !== '') {
            searchParam.push({
                property: this.casecadeControlFieldName,
                value: this.parentValue,
                operator: this.searchOperatorType
            });
        }
        this.startWaiting();
        this.restService
            .getAll(theUrl, searchParam)
            .then((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.stopWaiting();
            if (value.data.list.length === 0) {
                this.onChange('');
            }
            this.onItemSelected(value.data.list[0]);
            this.theGrid.dataItems = [];
            this.theGrid.dataItems.push(value.data.list[0]);
        }))
            .catch((/**
         * @param {?} reason
         * @return {?}
         */
        reason => {
            this.stopWaiting();
            this.onChange('');
        }));
    }
}
TaminFieldComboBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-field-combo-box',
                template: "<div class=\"input-wrapper\">\n  <input\n    id=\"textbox\"\n    readonly=\"readonly\"\n    [disabled] = \"control.disabled\"\n    style=\"padding-left: 35px;cursor: pointer\"\n    type=\"text\"\n    class=\"tamin-form-control-input\"\n    (click)=\"onShowPicker()\"\n    [class.tamin-form-control-valid]=\"control.touched && control.valid\"\n    [class.tamin-form-control-invalid]=\"control.touched && !control.valid\"\n    #inputElement [attr.placeholder]=\"placeHolder\">\n  <span class=\"icon\" style=\"margin-left:20px\" *ngIf=\"showClearButton\" (click)=\"onClearContent()\">\n    <i\n      class=\"icon-cancel\"\n      style=\"font-size: 1.5em\"\n      [class.tamin-form-control-valid-icon]=\"control.touched && control.valid\"\n      [class.tamin-form-control-invalid-icon]=\"control.touched && !control.valid\"></i>\n  </span>\n\n  <span class=\"icon\" #icon (click)=\"onShowPicker()\">\n    <i\n      class=\"icon-down-open\"\n      style=\"font-size: 1.5em\"\n      [class.tamin-form-control-valid-icon]=\"control.touched && control.valid\"\n      [class.tamin-form-control-invalid-icon]=\"control.touched && !control.valid\"\n    ></i>\n  </span>\n</div>\n<tamin-picker-container #picker>\n  <tamin-data-grid #theGrid (itemSelect)=\"onItemSelected($event)\" [allowBreakPoints]=\"false\" [showHover]=\"true\"></tamin-data-grid>\n</tamin-picker-container>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TaminFieldComboBoxComponent)),
                        multi: true
                    }
                ],
                styles: [".input-wrapper{position:relative}.icon{position:absolute;top:23%;left:5px;height:10px;margin-top:-5px;cursor:pointer}"]
            }] }
];
TaminFieldComboBoxComponent.propDecorators = {
    dataGridConfiguration: [{ type: Input }],
    displayField: [{ type: Input }],
    valueField: [{ type: Input }],
    casecadeControlName: [{ type: Input }],
    casecadeControlFieldName: [{ type: Input }],
    showClearButton: [{ type: Input }],
    searchOperatorType: [{ type: Input }],
    theGrid: [{ type: ViewChild, args: ['theGrid',] }],
    picker: [{ type: ViewChild, args: ['picker',] }],
    iconElement: [{ type: ViewChild, args: ['icon',] }]
};
if (false) {
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.dataGridConfiguration;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.displayField;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.valueField;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.casecadeControlName;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.casecadeControlFieldName;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.showClearButton;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.searchOperatorType;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.theGrid;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.picker;
    /** @type {?} */
    TaminFieldComboBoxComponent.prototype.iconElement;
    /**
     * @type {?}
     * @private
     */
    TaminFieldComboBoxComponent.prototype.parent;
    /**
     * @type {?}
     * @private
     */
    TaminFieldComboBoxComponent.prototype.parentValue;
}
//# sourceMappingURL=data:application/json;base64,