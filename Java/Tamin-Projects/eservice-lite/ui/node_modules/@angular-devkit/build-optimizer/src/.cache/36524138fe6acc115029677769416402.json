{"remainingRequest":"D:\\TaminProjects\\angular\\ng-tamin-portal\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\TaminProjects\\angular\\ng-tamin-portal\\node_modules\\tamin-framework\\fesm5\\tamin-framework.js","dependencies":[{"path":"D:\\TaminProjects\\angular\\ng-tamin-portal\\node_modules\\tamin-framework\\fesm5\\tamin-framework.js","mtime":1546265900044},{"path":"D:\\TaminProjects\\angular\\ng-tamin-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530539935758},{"path":"D:\\TaminProjects\\angular\\ng-tamin-portal\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_core,_angular_common_http,rxjs_operators,jalali_moment,_angular_cdk_layout,tslint_lib_error,_angular_forms,rxjs,popper.js,tslib,_angular_router,_angular_common,_angular_cdk_platform PURE_IMPORTS_END */\nimport { Injectable, Component, ElementRef, EventEmitter, Input, Output, ViewChild, ChangeDetectorRef, HostListener, NgModule, Pipe, ContentChildren, Injector, Inject, forwardRef, defineInjectable, inject } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, HttpClientModule, HttpErrorResponse } from '@angular/common/http';\nimport { timeout, debounceTime, distinctUntilChanged, switchMap, catchError } from 'rxjs/operators';\nimport * as momentNs from 'jalali-moment';\nimport { BreakpointObserver, Breakpoints, LayoutModule } from '@angular/cdk/layout';\nimport { Error as Error$1 } from 'tslint/lib/error';\nimport { ControlContainer, NG_VALUE_ACCESSOR, FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { fromEvent, Subscription, Subject, ReplaySubject, timer, throwError } from 'rxjs';\nimport PopperJs from 'popper.js';\nimport { __extends } from 'tslib';\nimport { Router } from '@angular/router';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Platform } from '@angular/cdk/platform';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nvar DataColumnViewType = {\n    Label: 'Label',\n    ThousandSeperated: 'ThousandSeperated',\n    PersianDate: 'PersianDate',\n    PersianDateTime: 'PersianDateTime',\n    RowNumber: 'RowNumber',\n    Custom: 'Custom',\n    CustomRow: 'CustomRow',\n};\nvar TaminDataColumn = /*@__PURE__*/ (function () {\n    function TaminDataColumn() {\n    }\n    return TaminDataColumn;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nvar GenericRestService = /*@__PURE__*/ (function () {\n    function GenericRestService(http) {\n        this.http = http;\n        this.restUrl = '';\n        this.timeout = 180000;\n        this.pagingPath = '';\n    }\n    /**\n     * @param {?} querySearchParams\n     * @param {?} querySortParams\n     * @return {?}\n     */\n    GenericRestService.prototype.getAll = /**\n     * @param {?} querySearchParams\n     * @param {?} querySortParams\n     * @return {?}\n     */\n        function (querySearchParams, querySortParams) {\n            var _this = this;\n            /** @type {?} */\n            var headers = new HttpHeaders();\n            /** @type {?} */\n            var params = new HttpParams();\n            params.append('filter', JSON.stringify(querySearchParams));\n            params.append('sort', JSON.stringify(querySortParams));\n            params = params.append('_dc', (new Date()).getTime().toString());\n            return new Promise(function (resolve, reject) {\n                _this.http.get(_this.restUrl, { headers: headers, params: params })\n                    .pipe(timeout(_this.timeout))\n                    .toPromise()\n                    .then(function (response) { return resolve(response); })\n                    .catch(function (error) { return reject(_this.handleError(error)); });\n            });\n        };\n    /**\n     * @param {?} includeMetaData\n     * @param {?} pageNo\n     * @param {?} pageSize\n     * @param {?} querySearchParams\n     * @param {?} querySortParams\n     * @return {?}\n     */\n    GenericRestService.prototype.getPagedEntity = /**\n     * @param {?} includeMetaData\n     * @param {?} pageNo\n     * @param {?} pageSize\n     * @param {?} querySearchParams\n     * @param {?} querySortParams\n     * @return {?}\n     */\n        function (includeMetaData, pageNo, pageSize, querySearchParams, querySortParams) {\n            var _this = this;\n            /** @type {?} */\n            var params = new HttpParams();\n            /** @type {?} */\n            var headers = new HttpHeaders();\n            params = params.append('filter', JSON.stringify(querySearchParams));\n            params = params.append('sort', JSON.stringify(querySortParams));\n            //params = params.append('start', pageNo.toString());\n            params = params.append('start', ((pageNo - 1) * pageSize).toString());\n            params = params.append('limit', pageSize.toString());\n            params = params.append('_dc', (new Date()).getTime().toString());\n            /** @type {?} */\n            var url = this.restUrl + \"/\" + this.pagingPath;\n            return new Promise(function (resolve, reject) {\n                _this.http.get(url, { headers: headers, params: params })\n                    .pipe(timeout(_this.timeout))\n                    .toPromise()\n                    .then(function (response) { return resolve(response); })\n                    .catch(function (error) { return reject(_this.handleError(error)); });\n            });\n        };\n    /**\n     * @param {?} includeMetaData\n     * @param {?} pageNo\n     * @param {?} pageSize\n     * @param {?} querySearchParams\n     * @param {?} querySortParams\n     * @return {?}\n     */\n    GenericRestService.prototype.getPagedObject = /**\n     * @param {?} includeMetaData\n     * @param {?} pageNo\n     * @param {?} pageSize\n     * @param {?} querySearchParams\n     * @param {?} querySortParams\n     * @return {?}\n     */\n        function (includeMetaData, pageNo, pageSize, querySearchParams, querySortParams) {\n            var _this = this;\n            /** @type {?} */\n            var params = new HttpParams();\n            /** @type {?} */\n            var headers = new HttpHeaders();\n            params = params.append('filter', JSON.stringify(querySearchParams));\n            params = params.append('sort', JSON.stringify(querySortParams));\n            // params = params.append('start', pageNo.toString());\n            params = params.append('start', ((pageNo - 1) * pageSize).toString());\n            params = params.append('limit', pageSize.toString());\n            params = params.append('_dc', (new Date()).getTime().toString());\n            /** @type {?} */\n            var url = this.restUrl + \"/\" + this.pagingPath;\n            return new Promise(function (resolve, reject) {\n                _this.http.get(url, { headers: headers, params: params })\n                    .pipe(timeout(_this.timeout))\n                    .toPromise()\n                    .then(function (response) { return resolve(response); })\n                    .catch(function (error) { return reject(_this.handleError(error)); });\n            });\n        };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    GenericRestService.prototype.getById = /**\n     * @param {?} id\n     * @return {?}\n     */\n        function (id) {\n            var _this = this;\n            /** @type {?} */\n            var url = this.restUrl + \"/\" + id;\n            return new Promise(function (resolve, reject) {\n                _this.http.get(url)\n                    .pipe(timeout(_this.timeout))\n                    .toPromise()\n                    .then(function (response) { return resolve(response); })\n                    .catch(function (error) { return reject(_this.handleError(error)); });\n            });\n        };\n    /**\n     * @param {?} ids\n     * @return {?}\n     */\n    GenericRestService.prototype.getByMultipleId = /**\n     * @param {?} ids\n     * @return {?}\n     */\n        function (ids) {\n            var _this = this;\n            /** @type {?} */\n            var url = \"\" + this.restUrl;\n            ids.forEach(function (id) {\n                url += \"/\" + id;\n            });\n            return new Promise(function (resolve, reject) {\n                _this.http.get(url)\n                    .pipe(timeout(_this.timeout))\n                    .toPromise()\n                    .then(function (response) { return resolve(response); })\n                    .catch(function (error) { return reject(_this.handleError(error)); });\n            });\n        };\n    /**\n     * @param {?} dataItem\n     * @return {?}\n     */\n    GenericRestService.prototype.create = /**\n     * @param {?} dataItem\n     * @return {?}\n     */\n        function (dataItem) {\n            var _this = this;\n            /** @type {?} */\n            var url = this.restUrl;\n            return new Promise(function (resolve, reject) {\n                _this.http\n                    .post(url, dataItem)\n                    .pipe(timeout(_this.timeout))\n                    .toPromise()\n                    .then(function (response) { return resolve(response); })\n                    .catch(function (error) { return reject(_this.handleError(error)); });\n            });\n        };\n    /**\n     * @param {?} dataItem\n     * @return {?}\n     */\n    GenericRestService.prototype.update = /**\n     * @param {?} dataItem\n     * @return {?}\n     */\n        function (dataItem) {\n            var _this = this;\n            /** @type {?} */\n            var url = this.restUrl;\n            return new Promise(function (resolve, reject) {\n                _this.http\n                    .put(url, dataItem)\n                    .pipe(timeout(_this.timeout))\n                    .toPromise()\n                    .then(function (response) { return resolve(response); })\n                    .catch(function (error) { return reject(_this.handleError(error)); });\n            });\n        };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    GenericRestService.prototype.delete = /**\n     * @param {?} id\n     * @return {?}\n     */\n        function (id) {\n            var _this = this;\n            /** @type {?} */\n            var url = this.restUrl + \"/\" + id;\n            return new Promise(function (resolve, reject) {\n                _this.http\n                    .delete(url)\n                    .pipe(timeout(_this.timeout))\n                    .toPromise()\n                    .then(function (response) { return resolve(response); })\n                    .catch(function (error) { return reject(_this.handleError(error)); });\n            });\n        };\n    /**\n     * @protected\n     * @param {?} error\n     * @return {?}\n     */\n    GenericRestService.prototype.handleError = /**\n     * @protected\n     * @param {?} error\n     * @return {?}\n     */\n        function (error) {\n            return error;\n        };\n    return GenericRestService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminDataGridConfiguration = /*@__PURE__*/ (function () {\n    function TaminDataGridConfiguration() {\n        this.actionColumnCaption = 'عملیات';\n        this.pagerSize = 5;\n        this.loadDataOnInit = false;\n        this.pagerCurrentPage = 1;\n    }\n    return TaminDataGridConfiguration;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar moment = momentNs;\nvar TaminPersianService = /*@__PURE__*/ (function () {\n    function TaminPersianService() {\n        this._numberRange = '[\\u06F0-\\u06F9]';\n        this._charRange = ['[\\u06A9\\u06AF\\u06C0\\u06CC\\u060C',\n            '\\u062A\\u062B\\u062C\\u062D\\u062E\\u062F',\n            '\\u063A\\u064A\\u064B\\u064C\\u064D\\u064E',\n            '\\u064F\\u067E\\u0670\\u0686\\u0698\\u200C',\n            '\\u0621-\\u0629\\u0630-\\u0639\\u0641-\\u0654]'].join('');\n        this._rtlPunctuations = '(،|؟|«|»|؛|٬)';\n        this._ltrPunctuations = '(\\\\.|:|\\\\!|\\\\-|\\\\[|\\\\]|\\\\(|\\\\)|/)';\n        this._number = new RegExp('^' + this._numberRange + '+$');\n        this._letter = new RegExp('^' + this._charRange + '+$');\n        this._punctuation = new RegExp('^' + this.combineRegExps(this._rtlPunctuations, this._ltrPunctuations) + '+$');\n        this._text = new RegExp('^' + this.combineRegExps(this._numberRange, this._charRange, this._rtlPunctuations, this._ltrPunctuations, '\\\\s') + '+$');\n        this._rtl = new RegExp('^' + this.combineRegExps(this._charRange, this._numberRange, this._rtlPunctuations, '\\\\s') + '+$');\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    TaminPersianService.prototype.getPersianDate = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            try {\n                /** @type {?} */\n                var tmp = moment.from(value.toLocaleDateString(), 'en');\n                if (tmp.isValid()) {\n                    return tmp.locale('fa').format('YYYY/MM/DD');\n                }\n                return null;\n            }\n            catch (e) {\n                return '';\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    TaminPersianService.prototype.getPersianDayOfWeek = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            try {\n                /** @type {?} */\n                var dayOfWeeks = ['یکشنبه', 'دوشنبه', 'سه شنبه', 'چهارشنبه', 'پنج شنبه', 'جمعه', 'شنبه'];\n                /** @type {?} */\n                var tmp = moment.from(value.toLocaleDateString(), 'en');\n                if (tmp.isValid()) {\n                    return dayOfWeeks[tmp.locale('fa').day()];\n                }\n                return null;\n            }\n            catch (e) {\n                return '';\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    TaminPersianService.prototype.getGregorianDate = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            /** @type {?} */\n            var tmp = moment.from(value, 'fa', 'YYYY/MM/DD');\n            if (tmp.isValid()) {\n                return tmp.toDate();\n            }\n            return null;\n        };\n    /**\n     * @private\n     * @param {...?} params\n     * @return {?}\n     */\n    TaminPersianService.prototype.combineRegExps = /**\n     * @private\n     * @param {...?} params\n     * @return {?}\n     */\n        function () {\n            var params = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                params[_i] = arguments[_i];\n            }\n            /** @type {?} */\n            var combined = '(';\n            for (var i = 0; i < arguments.length; i++) {\n                combined += '(';\n                if (i !== arguments.length - 1) {\n                    combined += arguments[i] + ')|';\n                }\n                else {\n                    combined += arguments[i] + ')';\n                }\n            }\n            return combined + ')';\n        };\n    /** @nocollapse */ TaminPersianService.ngInjectableDef = defineInjectable({ factory: function TaminPersianService_Factory() { return new TaminPersianService(); }, token: TaminPersianService, providedIn: \"root\" });\n    return TaminPersianService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar OverlayService = /*@__PURE__*/ (function () {\n    function OverlayService() {\n    }\n    /**\n     * @param {?=} element\n     * @return {?}\n     */\n    OverlayService.prototype.show = /**\n     * @param {?=} element\n     * @return {?}\n     */\n        function (element) {\n            if (element === void 0) {\n                element = null;\n            }\n            /** @type {?} */\n            var overlay = new PlainOverlay(element, { blur: 1, style: { zIndex: 9000 } });\n            return overlay.show();\n        };\n    /**\n     * @param {?} message\n     * @param {?=} element\n     * @return {?}\n     */\n    OverlayService.prototype.showMessage = /**\n     * @param {?} message\n     * @param {?=} element\n     * @return {?}\n     */\n        function (message, element) {\n            if (element === void 0) {\n                element = null;\n            }\n            /** @type {?} */\n            var html = '<div></div><div class=\"tamin-loader-loader4\"></div>' + '<hr>' + message;\n            /** @type {?} */\n            var messageElement = document.createElement('div');\n            messageElement.classList.add('overlay-message');\n            // messageElement.classList.add('tamin-loader-loader3');\n            messageElement.innerHTML = html;\n            /** @type {?} */\n            var overlay = new PlainOverlay(element, { blur: 1, face: messageElement });\n            return overlay.show();\n        };\n    /**\n     * @param {?} overlay\n     * @return {?}\n     */\n    OverlayService.prototype.isShown = /**\n     * @param {?} overlay\n     * @return {?}\n     */\n        function (overlay) {\n            return (overlay && (overlay.state === PlainOverlay.STATE_SHOWING || overlay.state === PlainOverlay.STATE_SHOWN));\n        };\n    /**\n     * @param {?} overlay\n     * @return {?}\n     */\n    OverlayService.prototype.hide = /**\n     * @param {?} overlay\n     * @return {?}\n     */\n        function (overlay) {\n            overlay.hide();\n        };\n    /** @nocollapse */ OverlayService.ngInjectableDef = defineInjectable({ factory: function OverlayService_Factory() { return new OverlayService(); }, token: OverlayService, providedIn: \"root\" });\n    return OverlayService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminRestService = /*@__PURE__*/ (function () {\n    function TaminRestService(taminApplicationConfig, http) {\n        this.taminApplicationConfig = taminApplicationConfig;\n        this.http = http;\n        this.URL_ERROR = 'url not specified';\n        this.ID_ERROR = 'id not specified';\n    }\n    /**\n     * @protected\n     * @param {?} url\n     * @param {?=} pageNo\n     * @param {?=} pageSize\n     * @param {?=} searchParams\n     * @param {?=} sortParams\n     * @param {?=} query\n     * @return {?}\n     */\n    TaminRestService.prototype.getData = /**\n     * @protected\n     * @param {?} url\n     * @param {?=} pageNo\n     * @param {?=} pageSize\n     * @param {?=} searchParams\n     * @param {?=} sortParams\n     * @param {?=} query\n     * @return {?}\n     */\n        function (url, pageNo, pageSize, searchParams, sortParams, query) {\n            var _this = this;\n            // let headers = new HttpHeaders();\n            /** @type {?} */\n            var params = new HttpParams();\n            if (pageNo && pageSize) {\n                params = params.append('page', pageNo.toString());\n                params = params.append('start', ((pageNo - 1) * pageSize).toString());\n                params = params.append('limit', pageSize.toString());\n            }\n            if (query) {\n                Object.keys(query).forEach(function (key) {\n                    params = params.append(key, query[key]);\n                });\n            }\n            if (searchParams) {\n                params = params.append('filter', JSON.stringify(searchParams));\n            }\n            if (sortParams) {\n                params = params.append('sort', JSON.stringify(sortParams));\n            }\n            params = params.append('_dc', (new Date()).getTime().toString());\n            return new Promise(function (resolve, reject) {\n                _this.http.get(url, { params: params })\n                    .pipe(timeout(_this.taminApplicationConfig.restTimeout))\n                    .toPromise()\n                    .then(function (value) {\n                    resolve(value);\n                })\n                    .catch(function (reason) {\n                    reject(reason);\n                });\n            });\n        };\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    TaminRestService.prototype.getBlob = /**\n     * @param {?} url\n     * @return {?}\n     */\n        function (url) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                _this.http.get(url, { responseType: 'blob' })\n                    .pipe(timeout(_this.taminApplicationConfig.restTimeout))\n                    .toPromise()\n                    .then(function (response) { return resolve(response); })\n                    .catch(function (error) { return reject(error); });\n            });\n        };\n    /**\n     * @param {?} url\n     * @param {?=} querySearchParams\n     * @param {?=} querySortParams\n     * @param {?=} query\n     * @return {?}\n     */\n    TaminRestService.prototype.getAll = /**\n     * @param {?} url\n     * @param {?=} querySearchParams\n     * @param {?=} querySortParams\n     * @param {?=} query\n     * @return {?}\n     */\n        function (url, querySearchParams, querySortParams, query) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                if (url.trim() === '') {\n                    reject(new Error(_this.URL_ERROR));\n                }\n                _this.getData(url, null, null, querySearchParams, querySortParams, query)\n                    .then(function (response) { return resolve(response); })\n                    .catch(function (error) { return reject(error); });\n            });\n        };\n    /**\n     * @param {?} url\n     * @param {?} pageNo\n     * @param {?} pageSize\n     * @param {?=} querySearchParams\n     * @param {?=} querySortParams\n     * @param {?=} query\n     * @return {?}\n     */\n    TaminRestService.prototype.getPage = /**\n     * @param {?} url\n     * @param {?} pageNo\n     * @param {?} pageSize\n     * @param {?=} querySearchParams\n     * @param {?=} querySortParams\n     * @param {?=} query\n     * @return {?}\n     */\n        function (url, pageNo, pageSize, querySearchParams, querySortParams, query) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                _this.getData(url, pageNo, pageSize, querySearchParams, querySortParams, query)\n                    .then(function (response) { return resolve(response); })\n                    .catch(function (error) { return reject(error); });\n            });\n        };\n    /**\n     * @template TModel\n     * @param {?} url\n     * @param {?=} querySearchParams\n     * @param {?=} querySortParams\n     * @param {?=} query\n     * @return {?}\n     */\n    TaminRestService.prototype.getAllManaged = /**\n     * @template TModel\n     * @param {?} url\n     * @param {?=} querySearchParams\n     * @param {?=} querySortParams\n     * @param {?=} query\n     * @return {?}\n     */\n        function (url, querySearchParams, querySortParams, query) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                _this.getData(url, null, null, querySearchParams, querySortParams, query)\n                    .then(function (response) {\n                    if (response.data) {\n                        resolve(((response.data)));\n                    }\n                    else if (response.list) {\n                        resolve(((response.list)));\n                    }\n                })\n                    .catch(function (error) { return reject(error); });\n            });\n        };\n    /**\n     * @template TModel\n     * @param {?} url\n     * @param {?} pageNo\n     * @param {?} pageSize\n     * @param {?=} querySearchParams\n     * @param {?=} querySortParams\n     * @param {?=} query\n     * @return {?}\n     */\n    TaminRestService.prototype.getPageManaged = /**\n     * @template TModel\n     * @param {?} url\n     * @param {?} pageNo\n     * @param {?} pageSize\n     * @param {?=} querySearchParams\n     * @param {?=} querySortParams\n     * @param {?=} query\n     * @return {?}\n     */\n        function (url, pageNo, pageSize, querySearchParams, querySortParams, query) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                _this.getData(url, pageNo, pageSize, querySearchParams, querySortParams, query)\n                    .then(function (response) {\n                    if (response.data) {\n                        resolve(((response.data)));\n                    }\n                    else if (response.list) {\n                        resolve(((response.list)));\n                    }\n                })\n                    .catch(function (error) { return reject(error); });\n            });\n        };\n    /**\n     * @param {?} url\n     * @param {?} id\n     * @return {?}\n     */\n    TaminRestService.prototype.getById = /**\n     * @param {?} url\n     * @param {?} id\n     * @return {?}\n     */\n        function (url, id) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                if (url.trim() === '') {\n                    reject(new Error(_this.URL_ERROR));\n                }\n                if (id.trim() === '') {\n                    reject(new Error(_this.ID_ERROR));\n                }\n                /** @type {?} */\n                var theUrl = url + \"/\" + id;\n                _this.getData(theUrl)\n                    .then(function (response) { return resolve(response); })\n                    .catch(function (error) { return reject(error); });\n            });\n        };\n    /**\n     * @template TModel\n     * @param {?} url\n     * @param {?} id\n     * @return {?}\n     */\n    TaminRestService.prototype.getByIdManaged = /**\n     * @template TModel\n     * @param {?} url\n     * @param {?} id\n     * @return {?}\n     */\n        function (url, id) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                _this.getData(url)\n                    .then(function (response) { return resolve(((response.data))); })\n                    .catch(function (error) { return reject(error); });\n            });\n        };\n    /**\n     * @param {?} url\n     * @param {?} data\n     * @return {?}\n     */\n    TaminRestService.prototype.create = /**\n     * @param {?} url\n     * @param {?} data\n     * @return {?}\n     */\n        function (url, data) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                if (url.trim() === '') {\n                    reject(new Error(_this.URL_ERROR));\n                }\n                _this.http\n                    .post(url, data)\n                    .pipe(timeout(_this.taminApplicationConfig.restTimeout))\n                    .toPromise()\n                    .then(function (response) {\n                    resolve(response);\n                })\n                    .catch(function (error) {\n                    reject(error);\n                });\n            });\n        };\n    /**\n     * @template TModel\n     * @param {?} url\n     * @param {?} id\n     * @param {?} data\n     * @return {?}\n     */\n    TaminRestService.prototype.update = /**\n     * @template TModel\n     * @param {?} url\n     * @param {?} id\n     * @param {?} data\n     * @return {?}\n     */\n        function (url, id, data) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                if (url.trim() === '') {\n                    reject(new Error(_this.URL_ERROR));\n                }\n                if (id.trim() === '') {\n                    reject(new Error(_this.ID_ERROR));\n                }\n                /** @type {?} */\n                var theUrl = url + \"/\" + id;\n                _this.http\n                    .put(theUrl, data)\n                    .pipe(timeout(_this.taminApplicationConfig.restTimeout))\n                    .toPromise()\n                    .then(function (response) { return resolve(response); })\n                    .catch(function (error) { return reject(error); });\n            });\n        };\n    /**\n     * @param {?} url\n     * @param {?} id\n     * @return {?}\n     */\n    TaminRestService.prototype.delete = /**\n     * @param {?} url\n     * @param {?} id\n     * @return {?}\n     */\n        function (url, id) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                if (url.trim() === '') {\n                    reject(new Error(_this.URL_ERROR));\n                }\n                if (id.trim() === '') {\n                    reject(new Error(_this.ID_ERROR));\n                }\n                /** @type {?} */\n                var theUrl = url + \"/\" + id;\n                _this.http\n                    .delete(theUrl)\n                    .pipe(timeout(_this.taminApplicationConfig.restTimeout))\n                    .toPromise()\n                    .then(function (response) { return resolve(response); })\n                    .catch(function (error) { return reject(error); });\n            });\n        };\n    /** @nocollapse */ TaminRestService.ngInjectableDef = defineInjectable({ factory: function TaminRestService_Factory() { return new TaminRestService(inject(\"taminApplicationConfig\"), inject(HttpClient)); }, token: TaminRestService, providedIn: \"root\" });\n    return TaminRestService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PersianNumberPipe = /*@__PURE__*/ (function () {\n    function PersianNumberPipe() {\n    }\n    /**\n     * @param {?} value\n     * @param {?=} args\n     * @return {?}\n     */\n    PersianNumberPipe.prototype.transform = /**\n     * @param {?} value\n     * @param {?=} args\n     * @return {?}\n     */\n        function (value, args) {\n            if (!value) {\n                return null;\n            }\n            /** @type {?} */\n            var tmp = value.toString();\n            if (args && args === 'cs') {\n                /** @type {?} */\n                var parts = value.toString().split('.');\n                parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n                tmp = parts.join('.');\n            }\n            return tmp.toString()\n                .replace(/0/g, '۰')\n                .replace(/1/g, '۱')\n                .replace(/2/g, '۲')\n                .replace(/3/g, '۳')\n                .replace(/4/g, '۴')\n                .replace(/5/g, '۵')\n                .replace(/6/g, '۶')\n                .replace(/7/g, '۷')\n                .replace(/8/g, '۸')\n                .replace(/9/g, '۹');\n        };\n    return PersianNumberPipe;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminDataGridComponent = /*@__PURE__*/ (function () {\n    function TaminDataGridComponent(genericRestService, changeDetectorRef, taminRestService, taminPersianService, persianNumberPipe, breakpointObserver, overlayService) {\n        this.genericRestService = genericRestService;\n        this.changeDetectorRef = changeDetectorRef;\n        this.taminRestService = taminRestService;\n        this.taminPersianService = taminPersianService;\n        this.persianNumberPipe = persianNumberPipe;\n        this.breakpointObserver = breakpointObserver;\n        this.overlayService = overlayService;\n        this.renderMode = 'desktop';\n        this.actionColumnCaption = 'عملیات';\n        this.selectedDataItems = [];\n        this.pagerSize = 5;\n        this.loadDataOnInit = false;\n        this.showLoadOverlay = true;\n        this.showHover = false;\n        this.hasError = false;\n        this.pagerCurrentPage = 1;\n        this.itemSelect = new EventEmitter();\n        this.itemAction = new EventEmitter();\n        this.beforeRefreshData = new EventEmitter();\n        this.afterRefreshData = new EventEmitter();\n        this.refreshDataError = new EventEmitter();\n        this.allowBreakPoints = true;\n        this.breakPoints = [Breakpoints.Small, Breakpoints.Handset];\n        this._overlay = null;\n    }\n    Object.defineProperty(TaminDataGridComponent.prototype, \"configuration\", {\n        set: /**\n         * @param {?} data\n         * @return {?}\n         */ function (data) {\n            this.serviceUrl = data.serviceUrl;\n            this.visibleColumns = data.visibleColumns;\n            this.actionColumns = data.actionColumns;\n            this.searchParams = data.searchParams;\n            this.sortParams = data.sortParams;\n            this.viewType = data.viewType;\n            this.showActionColumn = data.showActionColumn;\n            this.actionColumnCaption = data.actionColumnCaption;\n            this.rowEditable = data.rowEditable;\n            this.rowDeletable = data.rowDeletable;\n            this.dataItems = data.dataItems;\n            this.showFooter = data.showFooter;\n            this.showPager = data.showPager;\n            this.pagerSize = data.pagerSize;\n            this.loadDataOnInit = data.loadDataOnInit;\n            this.pagerCurrentPage = data.pagerCurrentPage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.breakpointObserver\n                .observe(this.breakPoints)\n                .subscribe(function (state) {\n                if (!_this.allowBreakPoints) {\n                    return;\n                }\n                if (state.matches) {\n                    if (_this.renderMode !== 'mobile') {\n                        _this.renderMode = 'mobile';\n                    }\n                }\n                else {\n                    if (_this.renderMode !== 'desktop') {\n                        _this.renderMode = 'desktop';\n                    }\n                }\n            });\n            if (this.sortParams && this.sortParams.length !== 0) {\n                this.sortColumnName = this.sortParams[0].property;\n                this.sortColumnMethod = this.sortParams[0].direction;\n            }\n        };\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.cloneObject = /**\n     * @param {?} obj\n     * @return {?}\n     */\n        function (obj) {\n            return Object.assign({}, obj);\n        };\n    /**\n     * @param {?=} showOverlay\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.refreshData = /**\n     * @param {?=} showOverlay\n     * @return {?}\n     */\n        function (showOverlay) {\n            var _this = this;\n            if (showOverlay === void 0) {\n                showOverlay = true;\n            }\n            return new Promise(function (resolve, reject) {\n                _this.hasError = false;\n                if (!_this.serviceUrl || _this.serviceUrl === '') {\n                    reject(new Error$1('ServiceUrl has not value'));\n                    return;\n                }\n                _this.beforeRefreshData.emit();\n                _this.loading = true;\n                if (_this.showLoadOverlay && showOverlay) {\n                    _this._overlay = _this.overlayService.show(_this.gridContainer.nativeElement);\n                }\n                /** @type {?} */\n                var sortParams = [];\n                if (_this.sortColumnName) {\n                    sortParams.push({\n                        property: _this.sortColumnName,\n                        direction: _this.sortColumnMethod\n                    });\n                }\n                if (!_this.pagerSize || _this.pagerSize <= 0) {\n                    _this.pagerSize = 1000; // Max allowed\n                    _this.taminRestService.getAll(_this.serviceUrl, _this.searchParams, sortParams)\n                        .then(function (value) {\n                        if (_this.showLoadOverlay && showOverlay) {\n                            _this._overlay.hide(_this._overlay);\n                        }\n                        _this.loading = false;\n                        _this.dataItems = value.data.list;\n                        _this.totalRows = value.data.total;\n                        _this.totalPages = Math.ceil(_this.totalRows / _this.pagerSize);\n                        _this.pagerCurrentPage = _this.totalPages > 0 ? 1 : 0;\n                        _this.afterRefreshData.emit();\n                        resolve();\n                    })\n                        .catch(function (reason) {\n                        if (_this.showLoadOverlay && showOverlay) {\n                            _this._overlay.hide(_this._overlay);\n                        }\n                        _this.loading = false;\n                        _this.hasError = true;\n                        _this.refreshDataError.emit(reason);\n                        reject(reason);\n                    });\n                }\n                else {\n                    _this.taminRestService.getPage(_this.serviceUrl, _this.pagerCurrentPage, _this.pagerSize, _this.searchParams, sortParams)\n                        .then(function (value) {\n                        if (_this.showLoadOverlay && showOverlay) {\n                            _this._overlay.hide(_this._overlay);\n                        }\n                        _this.loading = false;\n                        _this.dataItems = value.data.list;\n                        _this.totalRows = value.data.total;\n                        _this.totalPages = Math.ceil(_this.totalRows / _this.pagerSize);\n                        _this.afterRefreshData.emit();\n                        resolve();\n                    })\n                        .catch(function (reason) {\n                        if (_this.showLoadOverlay && showOverlay) {\n                            _this._overlay.hide(_this._overlay);\n                        }\n                        _this.loading = false;\n                        _this.hasError = true;\n                        _this.refreshDataError.emit(reason);\n                        reject(reason);\n                    });\n                }\n            });\n        };\n    /**\n     * @param {?} dataItem\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.onSelectItem = /**\n     * @param {?} dataItem\n     * @return {?}\n     */\n        function (dataItem) {\n            this.selectedDataItem = dataItem;\n            this.itemSelect.emit(dataItem);\n        };\n    /**\n     * @param {?} dataItem\n     * @param {?} event\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.onItemCheckBoxClick = /**\n     * @param {?} dataItem\n     * @param {?} event\n     * @return {?}\n     */\n        function (dataItem, event) {\n            if (this.selectedDataItems.indexOf(dataItem) === -1 && event.target.checked) {\n                this.selectedDataItems.push(dataItem);\n            }\n            if (!event.target.checked) {\n                /** @type {?} */\n                var index = this.selectedDataItems.indexOf(dataItem, 0);\n                if (index > -1) {\n                    this.selectedDataItems.splice(index, 1);\n                }\n            }\n        };\n    /**\n     * @param {?} dataItem\n     * @param {?} actionCell\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.onActionClicked = /**\n     * @param {?} dataItem\n     * @param {?} actionCell\n     * @return {?}\n     */\n        function (dataItem, actionCell) {\n            this.selectedDataItem = dataItem;\n            this.itemAction.emit({ dataItem: dataItem, actionCell: actionCell });\n        };\n    /**\n     * @param {?} pagerCurrentPage\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.onPagerPageChanged = /**\n     * @param {?} pagerCurrentPage\n     * @return {?}\n     */\n        function (pagerCurrentPage) {\n            this.pagerCurrentPage = pagerCurrentPage;\n            this.refreshData();\n        };\n    /**\n     * @param {?} dataItem\n     * @param {?} cell\n     * @param {?} index\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.getDataItemString = /**\n     * @param {?} dataItem\n     * @param {?} cell\n     * @param {?} index\n     * @return {?}\n     */\n        function (dataItem, cell, index) {\n            /** @type {?} */\n            var result = dataItem;\n            if (cell.columnViewType !== DataColumnViewType.RowNumber) {\n                /** @type {?} */\n                var fields = cell.columnName.split('.');\n                for (var i = 0; i < fields.length; i++) {\n                    if (!result[fields[i]]) {\n                        result = '';\n                    }\n                    else {\n                        result = result[fields[i]];\n                    }\n                }\n            }\n            switch (cell.columnViewType) {\n                case DataColumnViewType.Label:\n                    return result;\n                case DataColumnViewType.ThousandSeperated:\n                    /** @type {?} */\n                    var parts = result.split('.');\n                    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n                    return parts.join('.');\n                case DataColumnViewType.RowNumber:\n                    return (index + 1 + (this.pagerSize * (this.pagerCurrentPage - 1))).toString();\n                case DataColumnViewType.PersianDate:\n                    try {\n                        /** @type {?} */\n                        var date = new Date(result);\n                        return this.taminPersianService.getPersianDate(date);\n                    }\n                    catch (e) {\n                        return 'خطا در تبدیل تاریخ';\n                    }\n                case DataColumnViewType.Custom:\n                    return cell.columnTranslator(result);\n                case DataColumnViewType.CustomRow:\n                    return cell.columnTranslator(dataItem, cell.columnName);\n            }\n        };\n    /**\n     * @param {?} dataItem\n     * @param {?} cell\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.getDataItemAction = /**\n     * @param {?} dataItem\n     * @param {?} cell\n     * @return {?}\n     */\n        function (dataItem, cell) {\n            if (!cell.columnStyle) {\n                return '';\n            }\n            /** @type {?} */\n            var fields = cell.columnName.split('.');\n            /** @type {?} */\n            var result = dataItem;\n            for (var i = 0; i < fields.length; i++) {\n                if (!result[fields[i]]) {\n                    result = '-';\n                }\n                else {\n                    result = result[fields[i]];\n                }\n            }\n            return cell.columnStyle(result);\n        };\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} column\n     * @param {?} index\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.cellRendererSelector = /**\n     * @private\n     * @param {?} item\n     * @param {?} column\n     * @param {?} index\n     * @return {?}\n     */\n        function (item, column, index) {\n            if (column.columnViewType === DataColumnViewType.RowNumber) {\n                return this.getDataItemString(item[column.columnName], column, index);\n            }\n            if (this.cellRenderer) {\n                /** @type {?} */\n                var result = this.cellRenderer(item, column);\n                if (result.handled) {\n                    return result.data;\n                }\n            }\n            return this.getDataItemString(item, column, index);\n        };\n    /**\n     * @param {?} item\n     * @param {?} column\n     * @param {?} i\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.generateContent = /**\n     * @param {?} item\n     * @param {?} column\n     * @param {?} i\n     * @return {?}\n     */\n        function (item, column, i) {\n            return this.persianNumberPipe.transform(this.cellRendererSelector(item, column, i));\n        };\n    /**\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.loadDataOnInit) {\n                this.refreshData();\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.onActionMenuItemClicked = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.itemAction.emit(event);\n        };\n    /**\n     * @param {?} item\n     * @param {?} column\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.getCellStylerResult = /**\n     * @param {?} item\n     * @param {?} column\n     * @return {?}\n     */\n        function (item, column) {\n            return this.cellStyler ? this.cellStyler(item, column) : '';\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.getRowStylerResult = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            return this.rowStyler ? this.rowStyler(item) : '';\n        };\n    /**\n     * @param {?} item\n     * @param {?} actionCell\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.actionRender = /**\n     * @param {?} item\n     * @param {?} actionCell\n     * @return {?}\n     */\n        function (item, actionCell) {\n            if (this.actionRenderer) {\n                this.actionRenderer(item, actionCell);\n            }\n            return actionCell;\n        };\n    /**\n     * @param {?} column\n     * @return {?}\n     */\n    TaminDataGridComponent.prototype.onSort = /**\n     * @param {?} column\n     * @return {?}\n     */\n        function (column) {\n            if (this.sortColumnName === column.columnName) {\n                this.sortColumnMethod = this.sortColumnMethod === 'ASC' ? 'DESC' : 'ASC';\n            }\n            if (this.sortColumnName !== column.columnName) {\n                this.sortColumnName = column.columnName;\n                this.sortColumnMethod = 'ASC';\n            }\n            this.refreshData();\n        };\n    return TaminDataGridComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FieldBaseComponent = /*@__PURE__*/ (function () {\n    function FieldBaseComponent(overlayService, controlContainer, persianNumberPipe, injector) {\n        this.overlayService = overlayService;\n        this.controlContainer = controlContainer;\n        this.persianNumberPipe = persianNumberPipe;\n        this.injector = injector;\n        this.subscription = new Subscription();\n        this.onTouched = function () {\n        };\n        this.onChange = function (value) {\n        };\n    }\n    /**\n     * @return {?}\n     */\n    FieldBaseComponent.prototype.getInputElementRef = /**\n     * @return {?}\n     */\n        function () {\n            return this.inputElement;\n        };\n    /**\n     * @return {?}\n     */\n    FieldBaseComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.initValueAccessor();\n            this.initializeComponent();\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    FieldBaseComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    FieldBaseComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouched = fn;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    FieldBaseComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.inputElement.nativeElement.value = value;\n            this.onChange(value);\n        };\n    /**\n     * @return {?}\n     */\n    FieldBaseComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.overlay) {\n                this.overlayService.hide(this.overlay);\n            }\n            this.subscription.unsubscribe();\n        };\n    /**\n     * @protected\n     * @param {?} val\n     * @return {?}\n     */\n    FieldBaseComponent.prototype.getValue = /**\n     * @protected\n     * @param {?} val\n     * @return {?}\n     */\n        function (val) {\n            return val;\n        };\n    /**\n     * @protected\n     * @return {?}\n     */\n    FieldBaseComponent.prototype.initValueAccessor = /**\n     * @protected\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.control = this.controlContainer.control.get(this.formControlName);\n            /** @type {?} */\n            var keyups = fromEvent(this.inputElement.nativeElement, 'keyup').pipe(debounceTime(400), distinctUntilChanged());\n            this.subscription.add(keyups.subscribe(function (evt) {\n                if (_this.maskRef) {\n                    _this.onChange(_this.getValue(_this.maskRef.unmaskedValue));\n                }\n                else {\n                    _this.onChange(_this.getValue(evt.target.value));\n                }\n            }));\n            /** @type {?} */\n            var focuses = fromEvent(this.inputElement.nativeElement, 'focus');\n            this.subscription.add(focuses.subscribe(function (evt) {\n                _this.onTouched();\n            }));\n        };\n    /**\n     * @return {?}\n     */\n    FieldBaseComponent.prototype.startWaiting = /**\n     * @return {?}\n     */\n        function () {\n            this.overlay = this.overlayService.show(this.inputElement.nativeElement);\n        };\n    /**\n     * @return {?}\n     */\n    FieldBaseComponent.prototype.stopWaiting = /**\n     * @return {?}\n     */\n        function () {\n            this.overlayService.hide(this.overlay);\n        };\n    /**\n     * @protected\n     * @return {?}\n     */\n    FieldBaseComponent.prototype.initializeComponent = /**\n     * @protected\n     * @return {?}\n     */\n        function () {\n        };\n    return FieldBaseComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PickerContainerComponent = /*@__PURE__*/ (function () {\n    function PickerContainerComponent(changeDetectorRef) {\n        this.changeDetectorRef = changeDetectorRef;\n        this.adjustWidth = true;\n        this.placement = 'bottom-end';\n        this.padding = '5px';\n    }\n    /**\n     * @return {?}\n     */\n    PickerContainerComponent.prototype.toggle = /**\n     * @return {?}\n     */\n        function () {\n            this.shown = !this.shown;\n            this.changeDetectorRef.detectChanges();\n            if (this.shown) {\n                if (this.adjustWidth) {\n                    this.picker.nativeElement.style.width = this.parent.nativeElement.getBoundingClientRect().width - 3 + 'px';\n                }\n                if (this._thePopper) {\n                    this._thePopper = null;\n                }\n                this._thePopper = new PopperJs(this.parent.nativeElement, this.picker.nativeElement, {\n                    placement: ((this.placement)),\n                });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    PickerContainerComponent.prototype.show = /**\n     * @return {?}\n     */\n        function () {\n            this.shown = true;\n        };\n    /**\n     * @return {?}\n     */\n    PickerContainerComponent.prototype.hide = /**\n     * @return {?}\n     */\n        function () {\n            this.shown = false;\n        };\n    /**\n     * @return {?}\n     */\n    PickerContainerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @return {?}\n     */\n    PickerContainerComponent.prototype.update = /**\n     * @return {?}\n     */\n        function () {\n            if (this.shown) {\n                this._thePopper.scheduleUpdate();\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    PickerContainerComponent.prototype.documentEventHandler = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (this.shown) {\n                if (event.code === 'Tab' || event.code === 'Escape') {\n                    this.toggle();\n                }\n                /** @type {?} */\n                var shouldHidePicker = !this.picker.nativeElement.contains(event.target);\n                shouldHidePicker = shouldHidePicker && !this.parent.nativeElement.contains(event.target);\n                if (this.button) {\n                    shouldHidePicker = shouldHidePicker && !this.button.nativeElement.contains(event.target);\n                }\n                if (shouldHidePicker) {\n                    this.hide();\n                }\n            }\n        };\n    return PickerContainerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFieldAutoCompleteDataGridComponent = /*@__PURE__*/ (function (_super) {\n    __extends(TaminFieldAutoCompleteDataGridComponent, _super);\n    function TaminFieldAutoCompleteDataGridComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.searchOperator = 'LIKE';\n        _this.searchPattern = '*{term}*';\n        _this.searchTerm = new Subject();\n        _this.filter = [];\n        _this.beforeLoad = new EventEmitter();\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    TaminFieldAutoCompleteDataGridComponent.prototype.initializeComponent = /**\n     * @return {?}\n     */\n        function () {\n            this.picker.parent = this.inputElement;\n            this.search(this.searchTerm).subscribe();\n            this.theGrid.configuration = this.dataGridConfiguration;\n        };\n    /**\n     * @return {?}\n     */\n    TaminFieldAutoCompleteDataGridComponent.prototype.initValueAccessor = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.control = this.controlContainer.control.get(this.formControlName);\n            /** @type {?} */\n            var keyups = fromEvent(this.inputElement.nativeElement, 'keyup');\n            this.subscription.add(keyups.subscribe(function (evt) {\n                _this.searchTerm.next(evt.target.value);\n            }));\n            /** @type {?} */\n            var focuses = fromEvent(this.inputElement.nativeElement, 'focus');\n            this.subscription.add(focuses.subscribe(function (evt) {\n                _this.onTouched();\n            }));\n        };\n    /**\n     * @return {?}\n     */\n    TaminFieldAutoCompleteDataGridComponent.prototype.hidePopup = /**\n     * @return {?}\n     */\n        function () {\n            this.picker.toggle();\n            this.inputElement.nativeElement.readOnly = false;\n        };\n    /**\n     * @return {?}\n     */\n    TaminFieldAutoCompleteDataGridComponent.prototype.showPopup = /**\n     * @return {?}\n     */\n        function () {\n            this.picker.toggle();\n        };\n    /**\n     * @param {?} terms\n     * @return {?}\n     */\n    TaminFieldAutoCompleteDataGridComponent.prototype.search = /**\n     * @param {?} terms\n     * @return {?}\n     */\n        function (terms) {\n            var _this = this;\n            return terms.pipe(debounceTime(400), distinctUntilChanged(), switchMap(function (term) { return _this.searchEntries(term); }));\n        };\n    /**\n     * @param {?} term\n     * @return {?}\n     */\n    TaminFieldAutoCompleteDataGridComponent.prototype.searchEntries = /**\n     * @param {?} term\n     * @return {?}\n     */\n        function (term) {\n            if (term === '') {\n                this.hidePopup();\n            }\n            else {\n                this.theGrid.searchParams = [];\n                /** @type {?} */\n                var searchTerm = this.searchPattern.replace('{term}', term);\n                this.theGrid.searchParams = [{ property: this.displayField, value: searchTerm, operator: this.searchOperator }];\n                this.theGrid.searchParams = this.theGrid.searchParams.concat(this.filter);\n                this.beforeLoad.emit();\n                this.theGrid.refreshData();\n                this.showPopup();\n            }\n            this.onChange('');\n            return term === '' ? [] : term;\n        };\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    TaminFieldAutoCompleteDataGridComponent.prototype.onGridItemSelected = /**\n     * @param {?} val\n     * @return {?}\n     */\n        function (val) {\n            if (!val[this.displayField]) {\n                this.inputElement.nativeElement.value = '';\n            }\n            else {\n                this.inputElement.nativeElement.value = val[this.displayField];\n            }\n            this.onChange(val);\n            this.hidePopup();\n        };\n    /**\n     * @return {?}\n     */\n    TaminFieldAutoCompleteDataGridComponent.prototype.afterRefreshData = /**\n     * @return {?}\n     */\n        function () {\n            this.picker.update();\n        };\n    /**\n     * @protected\n     * @param {?} val\n     * @return {?}\n     */\n    TaminFieldAutoCompleteDataGridComponent.prototype.getValue = /**\n     * @protected\n     * @param {?} val\n     * @return {?}\n     */\n        function (val) {\n            return val[this.valueField];\n        };\n    return TaminFieldAutoCompleteDataGridComponent;\n}(FieldBaseComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar moment$1 = momentNs;\nvar TaminPersianDatePickerComponent = /*@__PURE__*/ (function () {\n    function TaminPersianDatePickerComponent() {\n        this.dayData = [];\n        this.yearData = [];\n        this.monthData = [];\n        this.dateChanged = new EventEmitter();\n        this.cancel = new EventEmitter();\n    }\n    Object.defineProperty(TaminPersianDatePickerComponent.prototype, \"currentDate\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._currentDate;\n        },\n        set: /**\n         * @param {?} date\n         * @return {?}\n         */ function (date) {\n            if (date !== undefined && date !== null) {\n                this._currentDate = date;\n                this.generateDayData();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.onChangeView('DayPicker');\n        };\n    Object.defineProperty(TaminPersianDatePickerComponent.prototype, \"currentMonthName\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return moment$1(this.currentDate).locale('fa').format('MMMM');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaminPersianDatePickerComponent.prototype, \"currentYear\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return moment$1(this.currentDate).jYear();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.generateDayData = /**\n     * @return {?}\n     */\n        function () {\n            this.dayData = [];\n            /** @type {?} */\n            var today = moment$1(this.currentDate !== undefined ? this.currentDate : new Date());\n            /** @type {?} */\n            var currentMonth = today.jMonth() + 1;\n            /** @type {?} */\n            var currentDay = today.jDate();\n            /** @type {?} */\n            var firstDayInMonth = today.startOf('jMonth');\n            /** @type {?} */\n            var firstElementInGrid = firstDayInMonth.subtract(firstDayInMonth.jDay(), 'day');\n            /** @type {?} */\n            var data = [];\n            for (var i = 0; i < 42; i++) {\n                /** @type {?} */\n                var tmp = firstElementInGrid.clone().add(i, 'd');\n                data.push({\n                    year: tmp.jYear(),\n                    month: tmp.jMonth() + 1,\n                    day: tmp.jDate(),\n                    persianDay: tmp.jDate(),\n                    today: (tmp.jMonth() + 1 === currentMonth) && (tmp.jDate() === currentDay),\n                    date: tmp.toDate(),\n                    nextPrevMonth: (tmp.jMonth() + 1) !== currentMonth\n                });\n            }\n            this.dayData = data;\n        };\n    /**\n     * @param {?} startYear\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.generateYearData = /**\n     * @param {?} startYear\n     * @return {?}\n     */\n        function (startYear) {\n            /** @type {?} */\n            var today = moment$1(this.currentDate);\n            /** @type {?} */\n            var currentYear = today.jYear();\n            this.yearData = [];\n            /** @type {?} */\n            var year = startYear;\n            /** @type {?} */\n            var data = [];\n            for (var i = 0; i < 20; i++) {\n                data.push({\n                    year: year + i,\n                    currentYear: currentYear === (year + i)\n                });\n            }\n            this.yearData = data;\n        };\n    /**\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.generateMonthData = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var tmp = moment$1(this.currentDate);\n            /** @type {?} */\n            var currentMonth = tmp.jMonth() + 1;\n            this.monthData = [\n                {\n                    name: 'فروردین',\n                    month: 1,\n                    currentMonth: currentMonth === 1\n                },\n                {\n                    name: 'اردیبهشت',\n                    month: 2,\n                    currentMonth: currentMonth === 2\n                },\n                {\n                    name: 'خرداد',\n                    month: 3,\n                    currentMonth: currentMonth === 3\n                },\n                {\n                    name: 'تیر',\n                    month: 4,\n                    currentMonth: currentMonth === 4\n                },\n                {\n                    name: 'مرداد',\n                    month: 5,\n                    currentMonth: currentMonth === 5\n                },\n                {\n                    name: 'شهریور',\n                    month: 6,\n                    currentMonth: currentMonth === 6\n                },\n                {\n                    name: 'مهر',\n                    month: 7,\n                    currentMonth: currentMonth === 7\n                },\n                {\n                    name: 'آبان',\n                    month: 8,\n                    currentMonth: currentMonth === 8\n                },\n                {\n                    name: 'آذر',\n                    month: 9,\n                    currentMonth: currentMonth === 9\n                },\n                {\n                    name: 'دی',\n                    month: 10,\n                    currentMonth: currentMonth === 10\n                }, {\n                    name: 'بهمن',\n                    month: 11,\n                    currentMonth: currentMonth === 11\n                },\n                {\n                    name: 'اسفند',\n                    month: 12,\n                    currentMonth: currentMonth === 12\n                }\n            ];\n        };\n    /**\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.hide = /**\n     * @return {?}\n     */\n        function () {\n            this.cancel.emit();\n        };\n    /**\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.onPrevMonth = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var today = moment$1(this.currentDate);\n            today.subtract(1, 'jmonth');\n            today.jDate(1);\n            this.currentDate = today.toDate();\n            this.generateDayData();\n        };\n    /**\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.onNextMonth = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var today = moment$1(this.currentDate);\n            today.add(1, 'jmonth');\n            today.jDate(1);\n            this.currentDate = today.toDate();\n            this.generateDayData();\n        };\n    /**\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.onToday = /**\n     * @return {?}\n     */\n        function () {\n            this.currentDate = new Date();\n            this.generateDayData();\n            this.dateChanged.emit(this._currentDate);\n        };\n    /**\n     * @param {?} day\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.onSetDay = /**\n     * @param {?} day\n     * @return {?}\n     */\n        function (day) {\n            /** @type {?} */\n            var today = moment$1(this.currentDate);\n            today.jDate(day);\n            this.currentDate = today.toDate();\n            this.generateDayData();\n            this.dateChanged.emit(this._currentDate);\n        };\n    /**\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.setView = /**\n     * @return {?}\n     */\n        function () {\n            this.viewState = 'DayPicker';\n        };\n    /**\n     * @param {?} viewName\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.onChangeView = /**\n     * @param {?} viewName\n     * @return {?}\n     */\n        function (viewName) {\n            /** @type {?} */\n            var today = moment$1(this.currentDate);\n            switch (viewName) {\n                case 'YearPicker':\n                    this.viewState = 'YearPicker';\n                    this.generateYearData(today.jYear());\n                    break;\n                case 'MonthPicker':\n                    this.viewState = 'MonthPicker';\n                    this.generateMonthData();\n                    break;\n                case 'DayPicker':\n                    this.viewState = 'DayPicker';\n                    this.generateDayData();\n                    break;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.onPrevYearGroup = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var startYear = this.yearData[0].year - 20;\n            this.generateYearData(startYear);\n        };\n    /**\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.onNextYearGroup = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var startYear = this.yearData[0].year + 20;\n            this.generateYearData(startYear);\n        };\n    /**\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.onThisYear = /**\n     * @return {?}\n     */\n        function () {\n            this.currentDate = new Date();\n            this.onChangeView('DayPicker');\n        };\n    /**\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.onThisMonth = /**\n     * @return {?}\n     */\n        function () {\n            this.currentDate = new Date();\n            this.onChangeView('DayPicker');\n        };\n    /**\n     * @param {?} year\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.onSetYear = /**\n     * @param {?} year\n     * @return {?}\n     */\n        function (year) {\n            /** @type {?} */\n            var tmp = moment$1(this.currentDate);\n            tmp.jYear(year);\n            this.currentDate = tmp.toDate();\n            this.onChangeView('DayPicker');\n        };\n    /**\n     * @param {?} month\n     * @return {?}\n     */\n    TaminPersianDatePickerComponent.prototype.onSetMonth = /**\n     * @param {?} month\n     * @return {?}\n     */\n        function (month) {\n            /** @type {?} */\n            var tmp = moment$1(this.currentDate);\n            tmp.jMonth(month - 1);\n            this.currentDate = tmp.toDate();\n            this.onChangeView('DayPicker');\n        };\n    return TaminPersianDatePickerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFieldNumberComponent = /*@__PURE__*/ (function (_super) {\n    __extends(TaminFieldNumberComponent, _super);\n    function TaminFieldNumberComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.min = -Number.MAX_VALUE;\n        _this.max = Number.MAX_VALUE;\n        _this.negativeNumberColor = 'red';\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    TaminFieldNumberComponent.prototype.initializeComponent = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var me = this;\n            this.maskRef = new IMask(this.inputElement.nativeElement, {\n                mask: Number,\n                thousandsSeparator: ',',\n                min: me.min,\n                max: me.max\n            });\n        };\n    return TaminFieldNumberComponent;\n}(FieldBaseComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFieldComboBoxStaticComponent = /*@__PURE__*/ (function (_super) {\n    __extends(TaminFieldComboBoxStaticComponent, _super);\n    function TaminFieldComboBoxStaticComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.dataItems = [];\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    TaminFieldComboBoxStaticComponent.prototype.initializeComponent = /**\n     * @return {?}\n     */\n        function () {\n            this.picker.parent = this.inputElement;\n            this.picker.button = this.iconElement;\n        };\n    /**\n     * @return {?}\n     */\n    TaminFieldComboBoxStaticComponent.prototype.onShowPicker = /**\n     * @return {?}\n     */\n        function () {\n            this.picker.toggle();\n        };\n    /**\n     * @param {?} itemData\n     * @return {?}\n     */\n    TaminFieldComboBoxStaticComponent.prototype.renderItem = /**\n     * @param {?} itemData\n     * @return {?}\n     */\n        function (itemData) {\n            if (this.itemRenderer) {\n                return this.itemRenderer(itemData);\n            }\n            return itemData[this.displayField];\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    TaminFieldComboBoxStaticComponent.prototype.onSelect = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            this.onChange(item[this.valueField]);\n            this.inputElement.nativeElement.value = item[this.displayField];\n            this.picker.toggle();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    TaminFieldComboBoxStaticComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var _this = this;\n            /** @type {?} */\n            var tmp = this.dataItems.find(function (c) { return c[_this.valueField] === value; });\n            if (tmp) {\n                this.inputElement.nativeElement.value = tmp[this.displayField];\n            }\n            else {\n                this.inputElement.nativeElement.value = '';\n            }\n            this.onChange(value);\n        };\n    return TaminFieldComboBoxStaticComponent;\n}(FieldBaseComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar moment$2 = momentNs;\nvar TaminFieldPersianDateComponent = /*@__PURE__*/ (function (_super) {\n    __extends(TaminFieldPersianDateComponent, _super);\n    function TaminFieldPersianDateComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(TaminFieldPersianDateComponent.prototype, \"value\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return moment$2.from(this.inputElement.nativeElement.value, 'fa', 'YYYY/MM/DD').toDate();\n        },\n        set: /**\n         * @param {?} val\n         * @return {?}\n         */ function (val) {\n            /** @type {?} */\n            var tmp = moment$2(new Date(val));\n            this.inputElement.nativeElement.value = tmp.locale('fa').format('YYYY/MM/DD');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @protected\n     * @param {?} val\n     * @return {?}\n     */\n    TaminFieldPersianDateComponent.prototype.getValue = /**\n     * @protected\n     * @param {?} val\n     * @return {?}\n     */\n        function (val) {\n            if (val.length === 8) {\n                return moment$2.from(val, 'fa', 'YYYY/MM/DD').toDate();\n            }\n            return '';\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    TaminFieldPersianDateComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (value === '' || value === undefined || value === null) {\n                return;\n            }\n            /** @type {?} */\n            var tmp = moment$2(new Date(value));\n            this.inputElement.nativeElement.value = tmp.locale('fa').format('YYYY/MM/DD');\n            this.onChange(value);\n        };\n    /**\n     * @return {?}\n     */\n    TaminFieldPersianDateComponent.prototype.initializeComponent = /**\n     * @return {?}\n     */\n        function () {\n            this.picker.parent = this.inputElement;\n            this.picker.button = this.iconElement;\n            this._setInputMask();\n        };\n    /**\n     * @return {?}\n     */\n    TaminFieldPersianDateComponent.prototype.onShowPicker = /**\n     * @return {?}\n     */\n        function () {\n            if (this.control.disabled) {\n                return;\n            }\n            this.inputElement.nativeElement.focus();\n            this.picker.toggle();\n        };\n    /**\n     * @return {?}\n     */\n    TaminFieldPersianDateComponent.prototype.hidePopup = /**\n     * @return {?}\n     */\n        function () {\n            // this.pickerVisibility = 'hidden';\n            this.picker.hide();\n            this.inputElement.nativeElement.readOnly = false;\n        };\n    /**\n     * @return {?}\n     */\n    TaminFieldPersianDateComponent.prototype.showPopup = /**\n     * @return {?}\n     */\n        function () {\n            this.inputElement.nativeElement.readOnly = true;\n            /** @type {?} */\n            var val = this.inputElement.nativeElement.value;\n            /** @type {?} */\n            var tmp = moment$2.from(val, 'fa', 'YYYY/MM/DD');\n            if (tmp.isValid()) {\n                this.persianDatePicker.currentDate = new Date(tmp.toDate());\n            }\n            this.persianDatePicker.setView();\n            this.picker.show();\n            // this._thePopper.update();\n        };\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    TaminFieldPersianDateComponent.prototype.onPickerChange = /**\n     * @param {?} val\n     * @return {?}\n     */\n        function (val) {\n            if (val !== undefined) {\n                this.inputElement.nativeElement.focus();\n                this.value = val;\n                this.onChange(this.value);\n                this.hidePopup();\n            }\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    TaminFieldPersianDateComponent.prototype._setInputMask = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            this.maskRef = new IMask(this.inputElement.nativeElement, {\n                mask: 'YYYY/MM/DD',\n                blocks: {\n                    DD: {\n                        mask: IMask.MaskedRange,\n                        from: 1,\n                        to: 31,\n                        validate: function (value, masked) {\n                            /** @type {?} */\n                            var tmp = masked.parent._value.split('/');\n                            /** @type {?} */\n                            var yyyy = tmp[0];\n                            /** @type {?} */\n                            var mm = tmp[1];\n                            /** @type {?} */\n                            var dd = value;\n                            /** @type {?} */\n                            var theDate;\n                            // if (masked.parent._value.length === 9 && tmp[2] === '0') {\n                            // return true;\n                            // }\n                            // if (masked.parent._value.length === 9 && tmp[2] === '3') {\n                            //  dd = '30';\n                            // }\n                            theDate = moment$2.from(yyyy + \"/\" + mm + \"/\" + dd, 'fa', 'YYYY/MM/DD');\n                            return theDate.isValid();\n                        }\n                    },\n                    MM: {\n                        mask: IMask.MaskedRange,\n                        from: 1,\n                        to: 12\n                    },\n                    YYYY: {\n                        mask: IMask.MaskedRange,\n                        from: 1000,\n                        to: 9999\n                    },\n                },\n                placeholderLazy: false,\n            });\n        };\n    return TaminFieldPersianDateComponent;\n}(FieldBaseComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFieldValidatorComponent = /*@__PURE__*/ (function () {\n    function TaminFieldValidatorComponent(controlContainer) {\n        this.controlContainer = controlContainer;\n    }\n    Object.defineProperty(TaminFieldValidatorComponent.prototype, \"errorMessages\", {\n        set: /**\n         * @param {?} errorMessages\n         * @return {?}\n         */ function (errorMessages) {\n            // errorMessages.forEach((item) => {\n            //   const temp = (<ValidationMessageModel[]>this._errorMessages).find(c => c.name === item.name);\n            //   if (!temp) {\n            //     this._errorMessages.push(item);\n            //   } else {\n            //     temp.value = item.value;\n            //   }\n            // });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TaminFieldValidatorComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.configureErrorMessages();\n            this._control = this.controlContainer.control.get(this.formControlName);\n        };\n    Object.defineProperty(TaminFieldValidatorComponent.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._control;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaminFieldValidatorComponent.prototype, \"errorMessage\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (!this._control.valid) {\n                var _loop_1 = function (propertyName) {\n                    if (this_1._control.errors.hasOwnProperty(propertyName)) {\n                        return { value: (((this_1._errorMessages))).find(function (p) { return p.name === propertyName; }).value };\n                    }\n                };\n                var this_1 = this;\n                for (var propertyName in this._control.errors) {\n                    var state_1 = _loop_1(propertyName);\n                    if (typeof state_1 === \"object\")\n                        return state_1.value;\n                }\n            }\n            return '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TaminFieldValidatorComponent.prototype.configureErrorMessages = /**\n     * @return {?}\n     */\n        function () {\n            this._errorMessages = [\n                { name: 'required', value: 'مقدار فیلد الزامی می باشد' },\n                { name: 'pattern', value: 'الگوی مقدار صحیح نمی باشد' },\n                { name: 'email', value: 'ایمیل نادرست است' },\n                { name: 'minlength', value: '' },\n                { name: 'maxlength', value: 'مقدار فیلد از حد مجاز بیشتر است' },\n                { name: 'min', value: '' },\n                { name: 'max', value: '' },\n                { name: 'requiredTrue', value: '' },\n                { name: 'nullValidator', value: '' },\n                { name: 'compose', value: '' },\n                { name: 'composeAsync', value: '' },\n                { name: 'requiredNumber', value: 'مقدار فیلد الزامی می باشد' },\n                { name: 'persianDate', value: 'تاریخ نادرست است' },\n                { name: 'nationalId', value: 'کد ملی نادرست است' }\n            ];\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    TaminFieldValidatorComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    TaminFieldValidatorComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    TaminFieldValidatorComponent.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n        };\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    TaminFieldValidatorComponent.prototype.writeValue = /**\n     * @param {?} obj\n     * @return {?}\n     */\n        function (obj) {\n        };\n    return TaminFieldValidatorComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminModalComponent = /*@__PURE__*/ (function () {\n    function TaminModalComponent(overlayService) {\n        this.overlayService = overlayService;\n        this.width = '80%';\n        this._overlay = null;\n        this.alertifyRef = null;\n    }\n    /**\n     * @return {?}\n     */\n    TaminModalComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.createDialog();\n        };\n    /**\n     * @return {?}\n     */\n    TaminModalComponent.prototype.show = /**\n     * @return {?}\n     */\n        function () {\n            if (this.alertifyRef) {\n                this.alertifyRef.destroy();\n                this.alertifyRef = null;\n            }\n            // self = this.modal.open();\n            if (this.title === '') {\n                this.title = ' ';\n            }\n            this.modalElement.nativeElement.style.display = 'block';\n            this.alertifyRef = alertify.genericDialog(this.modalElement.nativeElement, this.title, this.width, this.maximizable);\n        };\n    /**\n     * @return {?}\n     */\n    TaminModalComponent.prototype.showOverlay = /**\n     * @return {?}\n     */\n        function () {\n            if (this.alertifyRef === null) {\n                return;\n            }\n            if (this._overlay) {\n                return;\n            }\n            this._overlay = this.overlayService.show(this.alertifyRef.elements.dialog);\n        };\n    /**\n     * @return {?}\n     */\n    TaminModalComponent.prototype.hideOverlay = /**\n     * @return {?}\n     */\n        function () {\n            if (this.alertifyRef === null) {\n                return;\n            }\n            if (!this._overlay) {\n                return;\n            }\n            this.overlayService.hide(this._overlay);\n        };\n    /**\n     * @return {?}\n     */\n    TaminModalComponent.prototype.hide = /**\n     * @return {?}\n     */\n        function () {\n            if (this.alertifyRef === null) {\n                return;\n            }\n            this.alertifyRef.destroy();\n            this.alertifyRef = null;\n        };\n    /**\n     * @return {?}\n     */\n    TaminModalComponent.prototype.createDialog = /**\n     * @return {?}\n     */\n        function () {\n            if (!alertify.genericDialog) {\n                alertify.dialog('genericDialog', function () {\n                    return {\n                        main: function (content, title, width, maximizable) {\n                            this.setting('title', title);\n                            this.setting('width', width);\n                            this.setting('maximizable', maximizable);\n                            this.setContent(content);\n                        },\n                        setup: function () {\n                            return {\n                                options: {\n                                    resizable: false,\n                                    padding: false,\n                                    frameless: false,\n                                    autoReset: false,\n                                    closableByDimmer: false\n                                }\n                            };\n                        },\n                        settings: {\n                            width: '',\n                            onClose: undefined\n                        },\n                        hooks: {\n                            onrestore: function () {\n                                this.elements.dialog.style.width = this.get('width');\n                            },\n                            onshow: function () {\n                                this.elements.dialog.style.maxWidth = 'none';\n                                this.elements.dialog.style.width = this.get('width');\n                            }\n                        }\n                    };\n                });\n            }\n        };\n    return TaminModalComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFieldNatioanlIdComponent = /*@__PURE__*/ (function (_super) {\n    __extends(TaminFieldNatioanlIdComponent, _super);\n    function TaminFieldNatioanlIdComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    TaminFieldNatioanlIdComponent.prototype.initializeComponent = /**\n     * @return {?}\n     */\n        function () {\n            this._setInputMask();\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    TaminFieldNatioanlIdComponent.prototype._setInputMask = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            this.maskRef = new IMask(this.inputElement.nativeElement, {\n                mask: '0000000000'\n            });\n        };\n    return TaminFieldNatioanlIdComponent;\n}(FieldBaseComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminImageUploadComponent = /*@__PURE__*/ (function () {\n    function TaminImageUploadComponent(http) {\n        this.http = http;\n        this.onImageUploaded = new EventEmitter();\n        this.onImageDeleted = new EventEmitter();\n        this.displayPreview = 'none';\n    }\n    Object.defineProperty(TaminImageUploadComponent.prototype, \"imageGuid\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._imageGuid;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (!value) {\n                return;\n            }\n            this._imageGuid = value;\n            this.loadImage(this._imageGuid);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TaminImageUploadComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @param {?} imageGuid\n     * @return {?}\n     */\n    TaminImageUploadComponent.prototype.loadImage = /**\n     * @param {?} imageGuid\n     * @return {?}\n     */\n        function (imageGuid) {\n            var _this = this;\n            this._imageGuid = imageGuid;\n            /** @type {?} */\n            var url = this.restUrl + \"/\" + this.imageGuid;\n            /** @type {?} */\n            var image = this.previewImage.nativeElement;\n            this.http.get(url)\n                .toPromise()\n                .then(function (value) {\n                image.src = \"data:image/jpeg;base64,\" + (((value))).data;\n                _this.displayPreview = 'unset';\n            })\n                .catch(function (reason) {\n                console.error(reason);\n            });\n        };\n    // loadImage(imageGuid: string) {\n    //   this.imageGuid = imageGuid;\n    //   let url = `${this.restUrl}/${this.imageGuid}`;\n    //   let headers = new HttpHeaders({ 'Content-Type': 'image/jpg' });\n    //   let params = new HttpParams();\n    //   params.append('responseType', 'blob');\n    //   params = params.append('_dc', (new Date()).getTime().toString());\n    //   let image = this.previewImage.nativeElement;\n    //   this.http.get(url, { headers,  params }).subscribe(\n    //       data => {\n    //         //let blob = new Blob([data.arrayBuffer()], { type: data.headers.get('Content-Type') });\n    //         let imageurl = window.URL.createObjectURL(data);\n    //         image.src = imageurl;\n    //         // image.src = 'data:image/jpeg;base64,' + data.arrayBuffer();\n    //         // this.onImageUploaded.emit(this.imageGuid);\n    //         this.displayPreview = \"unset\";\n    //       },\n    //       error => {\n    //        // console.log(error);\n    //         this.imageGuid = '';\n    //       }\n    //     );\n    // }\n    /*upload(event) {\n      this.imageGuid = 'در حال بارگزاری';\n      let inputfile = event.dataTransfer ? event.dataTransfer : event.target;\n      let image = this.previewImage.nativeElement;\n      let reader = new FileReader();\n      reader.onload = function (e) {\n        let src = (e.target as FileReader).result;\n        image.src = src;\n      };\n      if (inputfile.files.length > 0) {\n        let file: File = inputfile.files[0];\n        let formData = new FormData();\n        formData.append('file', file, file.name);\n        //let headers = new HttpHeaders({'Content-Type': 'multipart/form-data'});\n        this.http.post(this.restUrl, formData).subscribe(\n          data => {\n            reader.readAsDataURL(event.target.files[0]);\n            this.imageGuid = data.toString();//.text();\n            if (this.onImageUploaded)\n              this.onImageUploaded.emit(this.imageGuid);\n            this.displayPreview = 'unset';\n          },\n          error => {\n            //console.log(error);\n            this.imageGuid = '';\n          }\n        );\n      }\n    }*/\n    // loadImage(imageGuid: string) {\n    //   this.imageGuid = imageGuid;\n    //   let url = `${this.restUrl}/${this.imageGuid}`;\n    //   let headers = new HttpHeaders({ 'Content-Type': 'image/jpg' });\n    //   let params = new HttpParams();\n    //   params.append('responseType', 'blob');\n    //   params = params.append('_dc', (new Date()).getTime().toString());\n    //   let image = this.previewImage.nativeElement;\n    //   this.http.get(url, { headers,  params }).subscribe(\n    //       data => {\n    //         //let blob = new Blob([data.arrayBuffer()], { type: data.headers.get('Content-Type') });\n    //         let imageurl = window.URL.createObjectURL(data);\n    //         image.src = imageurl;\n    //         // image.src = 'data:image/jpeg;base64,' + data.arrayBuffer();\n    //         // this.onImageUploaded.emit(this.imageGuid);\n    //         this.displayPreview = \"unset\";\n    //       },\n    //       error => {\n    //        // console.log(error);\n    //         this.imageGuid = '';\n    //       }\n    //     );\n    // }\n    /*upload(event) {\n        this.imageGuid = 'در حال بارگزاری';\n        let inputfile = event.dataTransfer ? event.dataTransfer : event.target;\n        let image = this.previewImage.nativeElement;\n        let reader = new FileReader();\n        reader.onload = function (e) {\n          let src = (e.target as FileReader).result;\n          image.src = src;\n        };\n        if (inputfile.files.length > 0) {\n          let file: File = inputfile.files[0];\n          let formData = new FormData();\n          formData.append('file', file, file.name);\n          //let headers = new HttpHeaders({'Content-Type': 'multipart/form-data'});\n          this.http.post(this.restUrl, formData).subscribe(\n            data => {\n              reader.readAsDataURL(event.target.files[0]);\n              this.imageGuid = data.toString();//.text();\n              if (this.onImageUploaded)\n                this.onImageUploaded.emit(this.imageGuid);\n              this.displayPreview = 'unset';\n            },\n            error => {\n              //console.log(error);\n              this.imageGuid = '';\n            }\n          );\n        }\n      }*/\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    TaminImageUploadComponent.prototype.upload =\n        // loadImage(imageGuid: string) {\n        //   this.imageGuid = imageGuid;\n        //   let url = `${this.restUrl}/${this.imageGuid}`;\n        //   let headers = new HttpHeaders({ 'Content-Type': 'image/jpg' });\n        //   let params = new HttpParams();\n        //   params.append('responseType', 'blob');\n        //   params = params.append('_dc', (new Date()).getTime().toString());\n        //   let image = this.previewImage.nativeElement;\n        //   this.http.get(url, { headers,  params }).subscribe(\n        //       data => {\n        //         //let blob = new Blob([data.arrayBuffer()], { type: data.headers.get('Content-Type') });\n        //         let imageurl = window.URL.createObjectURL(data);\n        //         image.src = imageurl;\n        //         // image.src = 'data:image/jpeg;base64,' + data.arrayBuffer();\n        //         // this.onImageUploaded.emit(this.imageGuid);\n        //         this.displayPreview = \"unset\";\n        //       },\n        //       error => {\n        //        // console.log(error);\n        //         this.imageGuid = '';\n        //       }\n        //     );\n        // }\n        /*upload(event) {\n            this.imageGuid = 'در حال بارگزاری';\n            let inputfile = event.dataTransfer ? event.dataTransfer : event.target;\n            let image = this.previewImage.nativeElement;\n            let reader = new FileReader();\n            reader.onload = function (e) {\n              let src = (e.target as FileReader).result;\n              image.src = src;\n            };\n            if (inputfile.files.length > 0) {\n              let file: File = inputfile.files[0];\n              let formData = new FormData();\n              formData.append('file', file, file.name);\n              //let headers = new HttpHeaders({'Content-Type': 'multipart/form-data'});\n              this.http.post(this.restUrl, formData).subscribe(\n                data => {\n                  reader.readAsDataURL(event.target.files[0]);\n                  this.imageGuid = data.toString();//.text();\n                  if (this.onImageUploaded)\n                    this.onImageUploaded.emit(this.imageGuid);\n                  this.displayPreview = 'unset';\n                },\n                error => {\n                  //console.log(error);\n                  this.imageGuid = '';\n                }\n              );\n            }\n          }*/\n        /**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            var _this = this;\n            this.imageGuid = 'در حال بارگزاری';\n            /** @type {?} */\n            var inputfile = event.dataTransfer ? event.dataTransfer : event.target;\n            /** @type {?} */\n            var image = this.previewImage.nativeElement;\n            /** @type {?} */\n            var reader = new FileReader();\n            if (inputfile.files.length > 0) {\n                /** @type {?} */\n                var file_1 = inputfile.files[0];\n                reader.readAsDataURL(file_1);\n                reader.onload = function () {\n                    /** @type {?} */\n                    var formData = new FormData();\n                    formData.append('file', file_1, file_1.name);\n                    _this.http.post(_this.restUrl, formData).toPromise()\n                        .then(function (response) {\n                        /** @type {?} */\n                        var src = reader.result;\n                        image.src = src;\n                        _this.imageGuid = response['guid'];\n                        if (_this.onImageUploaded) {\n                            _this.onImageUploaded.emit(_this.imageGuid);\n                        }\n                        _this.displayPreview = 'unset';\n                    })\n                        .catch(function (error) {\n                        // console.log(\"Upload error:\", error);\n                        _this.imageGuid = '';\n                    });\n                };\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    TaminImageUploadComponent.prototype.uploadBase64 = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var _this = this;\n            this.imageGuid = 'در حال بارگزاری';\n            /** @type {?} */\n            var inputfile = event.dataTransfer ? event.dataTransfer : event.target;\n            /** @type {?} */\n            var image = this.previewImage.nativeElement;\n            /** @type {?} */\n            var reader = new FileReader();\n            if (inputfile.files.length > 0) {\n                /** @type {?} */\n                var file = inputfile.files[0];\n                reader.readAsDataURL(file);\n                reader.onload = function () {\n                    // let headers = new HttpHeaders({'Content-Type': 'text/plain'});\n                    /** @type {?} */\n                    var headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n                    _this.http.post(_this.restUrl, (((reader.result))).split(',')[1], { headers: headers }).toPromise()\n                        .then(function (response) {\n                        /** @type {?} */\n                        var src = reader.result;\n                        image.src = src;\n                        _this.imageGuid = response['guid'];\n                        if (_this.onImageUploaded) {\n                            _this.onImageUploaded.emit(_this.imageGuid);\n                        }\n                        _this.displayPreview = 'unset';\n                    })\n                        .catch(function (error) {\n                        // console.log(\"Upload error:\", error);\n                        _this.imageGuid = '';\n                    });\n                };\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TaminImageUploadComponent.prototype.removeImage = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var url = this.restUrl + \"/\" + this.imageGuid;\n            /** @type {?} */\n            var image = this.previewImage.nativeElement;\n            image.src = '';\n            this.onImageDeleted.emit(this.imageGuid);\n            this.imageGuid = '';\n            this.http.delete(url).subscribe(function (data) {\n            }, function (error) {\n            });\n        };\n    return TaminImageUploadComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFormControlComponent = /*@__PURE__*/ (function () {\n    function TaminFormControlComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    TaminFormControlComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return TaminFormControlComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminAccordionComponent = /*@__PURE__*/ (function () {\n    function TaminAccordionComponent() {\n        this.active = false;\n        this.toggleAccordion = new EventEmitter();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    TaminAccordionComponent.prototype.onClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            event.preventDefault();\n            this.toggleAccordion.emit(this.active);\n        };\n    /**\n     * @return {?}\n     */\n    TaminAccordionComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return TaminAccordionComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminAccordionGroupComponent = /*@__PURE__*/ (function () {\n    function TaminAccordionGroupComponent() {\n        this.subscriptions = [];\n    }\n    /**\n     * @return {?}\n     */\n    TaminAccordionGroupComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @return {?}\n     */\n    TaminAccordionGroupComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._accordions = this.accordions;\n            this.removeSubscriptions();\n            this.addSubscriptions();\n            this.accordions.changes.subscribe(function (rex) {\n                _this._accordions = rex;\n                _this.removeSubscriptions();\n                _this.addSubscriptions();\n            });\n        };\n    /**\n     * @return {?}\n     */\n    TaminAccordionGroupComponent.prototype.addSubscriptions = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._accordions.forEach(function (a) {\n                /** @type {?} */\n                var subscription = a.toggleAccordion.subscribe(function (e) {\n                    _this.toogleAccordion(a);\n                });\n                _this.subscriptions.push(subscription);\n            });\n        };\n    /**\n     * @return {?}\n     */\n    TaminAccordionGroupComponent.prototype.removeSubscriptions = /**\n     * @return {?}\n     */\n        function () {\n            this.subscriptions.forEach(function (sub) {\n                sub.unsubscribe();\n            });\n        };\n    /**\n     * @param {?} accordion\n     * @return {?}\n     */\n    TaminAccordionGroupComponent.prototype.toogleAccordion = /**\n     * @param {?} accordion\n     * @return {?}\n     */\n        function (accordion) {\n            if (!accordion.active) {\n                this.accordions.forEach(function (a) { return a.active = false; });\n            }\n            // set active accordion\n            accordion.active = !accordion.active;\n        };\n    /**\n     * @return {?}\n     */\n    TaminAccordionGroupComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.removeSubscriptions();\n        };\n    return TaminAccordionGroupComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminTabComponent = /*@__PURE__*/ (function () {\n    function TaminTabComponent() {\n        this.visible = true;\n    }\n    /**\n     * @return {?}\n     */\n    TaminTabComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return TaminTabComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFieldMaskComponent = /*@__PURE__*/ (function (_super) {\n    __extends(TaminFieldMaskComponent, _super);\n    function TaminFieldMaskComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(TaminFieldMaskComponent.prototype, \"mask\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.maskRef.mask;\n        },\n        set: /**\n         * @param {?} mask\n         * @return {?}\n         */ function (mask) {\n            this.maskRef = new IMask(this.inputElement.nativeElement, {\n                mask: mask,\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaminFieldMaskComponent.prototype, \"regex\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.maskRef.regex;\n        },\n        set: /**\n         * @param {?} regex\n         * @return {?}\n         */ function (regex) {\n            this.maskRef = new IMask(this.inputElement.nativeElement, {\n                mask: new RegExp(regex),\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TaminFieldMaskComponent.prototype.initializeComponent = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return TaminFieldMaskComponent;\n}(FieldBaseComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminMenuModel = /*@__PURE__*/ (function () {\n    function TaminMenuModel() {\n    }\n    return TaminMenuModel;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminSiteTopMenuComponent = /*@__PURE__*/ (function () {\n    function TaminSiteTopMenuComponent(genericRestService, router, ref) {\n        this.genericRestService = genericRestService;\n        this.router = router;\n        this.ref = ref;\n        this.menuData = new TaminMenuModel();\n        this.stack = [];\n        this.dummy = true;\n    }\n    /**\n     * @return {?}\n     */\n    TaminSiteTopMenuComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.genericRestService.restUrl = this.restUrl;\n            this.genericRestService.getAll([], [])\n                .then(function (data) {\n                _this.menuData = data.data;\n                _this.stack.push(data.data);\n            })\n                .catch(function (error) {\n            });\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    TaminSiteTopMenuComponent.prototype.handleMenu = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            // debugger;\n            if (item.url !== '') {\n                if (item['url-type'] === 'external') {\n                    window.open(item.url);\n                }\n                this.router.navigateByUrl('/' + item.url);\n                this.dummy = false;\n                this.ref.detectChanges();\n                this.dummy = true;\n                this.ref.detectChanges();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TaminSiteTopMenuComponent.prototype.toggleMobileMenu = /**\n     * @return {?}\n     */\n        function () {\n            if (this.mobileMenuBody.nativeElement.style.display === 'block') {\n                this.mobileMenuBody.nativeElement.style.display = 'none';\n                this.mobileMenuButton.nativeElement.style.background = '#000a';\n                this.mobileMenuButton.nativeElement.style.color = 'white';\n            }\n            else {\n                this.mobileMenuBody.nativeElement.style.display = 'block';\n                /** @type {?} */\n                var rect = window.document.body.getBoundingClientRect();\n                this.mobileMenuBody.nativeElement.style.width = rect.width + 'px';\n                this.mobileMenuButton.nativeElement.style.background = '#00779caa';\n                this.mobileMenuButton.nativeElement.style.color = 'white';\n            }\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    TaminSiteTopMenuComponent.prototype.windowResizeHandler = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            /** @type {?} */\n            var rect = window.document.body.getBoundingClientRect();\n            this.mobileMenuBody.nativeElement.style.width = rect.width + 'px';\n        };\n    /**\n     * @param {?} menuItem\n     * @return {?}\n     */\n    TaminSiteTopMenuComponent.prototype.onMobileMenuItemClick = /**\n     * @param {?} menuItem\n     * @return {?}\n     */\n        function (menuItem) {\n            if (menuItem.items !== undefined && menuItem.items.length !== 0) {\n                this.stack.push(menuItem);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TaminSiteTopMenuComponent.prototype.onMobileMenuReturn = /**\n     * @return {?}\n     */\n        function () {\n            this.stack.pop();\n        };\n    return TaminSiteTopMenuComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminDataPagerComponent = /*@__PURE__*/ (function () {\n    function TaminDataPagerComponent() {\n        this.pageChanged = new EventEmitter();\n        this.refreshData = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    TaminDataPagerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.pagerCurrentPage > this.pagerTotal) {\n                this.pagerCurrentPage = this.pagerTotal;\n            }\n            else if (this.pagerCurrentPage < 1) {\n                this.pagerCurrentPage = 1;\n            }\n        };\n    /**\n     * @param {?} changeAmount\n     * @return {?}\n     */\n    TaminDataPagerComponent.prototype.changePage = /**\n     * @param {?} changeAmount\n     * @return {?}\n     */\n        function (changeAmount) {\n            /** @type {?} */\n            var oldPage = this.pagerCurrentPage;\n            if (changeAmount > 1) {\n                this.pagerCurrentPage = this.pagerTotal;\n            }\n            else if (changeAmount < -1) {\n                this.pagerCurrentPage = 1;\n            }\n            else {\n                this.pagerCurrentPage = parseFloat(this.pagerCurrentPage.toString()) + parseFloat(changeAmount.toString());\n                if (this.pagerCurrentPage < 1) {\n                    this.pagerCurrentPage = 1;\n                }\n                if (this.pagerCurrentPage > this.pagerTotal) {\n                    this.pagerCurrentPage = this.pagerTotal;\n                }\n            }\n            if (oldPage !== this.pagerCurrentPage) {\n                this.pageChanged.emit(this.pagerCurrentPage);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TaminDataPagerComponent.prototype.onRefresh = /**\n     * @return {?}\n     */\n        function () {\n            this.refreshData.emit();\n        };\n    return TaminDataPagerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminSiteBottomMenuComponent = /*@__PURE__*/ (function () {\n    function TaminSiteBottomMenuComponent(router) {\n        this.router = router;\n    }\n    /**\n     * @return {?}\n     */\n    TaminSiteBottomMenuComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    TaminSiteBottomMenuComponent.prototype.handleMenu = /**\n     * @param {?} item\n     * @return {?}\n     */\n        function (item) {\n            if (item.url !== '') {\n                this.router.navigate([item.url]);\n            }\n        };\n    return TaminSiteBottomMenuComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFieldCheckboxComponent = /*@__PURE__*/ (function (_super) {\n    __extends(TaminFieldCheckboxComponent, _super);\n    function TaminFieldCheckboxComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(TaminFieldCheckboxComponent.prototype, \"required\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.control.validator === null) {\n                return false;\n            }\n            /** @type {?} */\n            var validator = this.control.validator((({})));\n            return (validator && (validator.required));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    TaminFieldCheckboxComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            // debugger;\n            this.inputElement.nativeElement.checked = value;\n            this.onChange(value);\n        };\n    /**\n     * @protected\n     * @return {?}\n     */\n    TaminFieldCheckboxComponent.prototype.initValueAccessor = /**\n     * @protected\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.control = this.controlContainer.control.get(this.formControlName);\n            /** @type {?} */\n            var change = fromEvent(this.inputElement.nativeElement, 'change');\n            this.subscription.add(change.subscribe(function (evt) {\n                _this.onChange(evt.target.checked);\n            }));\n            /** @type {?} */\n            var focuses = fromEvent(this.inputElement.nativeElement, 'focus');\n            this.subscription.add(focuses.subscribe(function (evt) {\n                _this.onTouched();\n            }));\n        };\n    return TaminFieldCheckboxComponent;\n}(FieldBaseComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFieldTextComponent = /*@__PURE__*/ (function (_super) {\n    __extends(TaminFieldTextComponent, _super);\n    function TaminFieldTextComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.maxLength = Number.MAX_SAFE_INTEGER;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    TaminFieldTextComponent.prototype.initializeComponent = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return TaminFieldTextComponent;\n}(FieldBaseComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminTabPanelComponent = /*@__PURE__*/ (function () {\n    function TaminTabPanelComponent() {\n        this.currentTab = 0;\n    }\n    /**\n     * @return {?}\n     */\n    TaminTabPanelComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @return {?}\n     */\n    TaminTabPanelComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            console.log('ngAfterContentInit');\n            this.tabComponents.forEach(function (item, index) {\n                if (index === _this.currentTab) {\n                    item.present = true;\n                }\n            });\n        };\n    /**\n     * @param {?} tab\n     * @param {?} index\n     * @return {?}\n     */\n    TaminTabPanelComponent.prototype.onClick = /**\n     * @param {?} tab\n     * @param {?} index\n     * @return {?}\n     */\n        function (tab, index) {\n            this.currentTab = index;\n            this.tabComponents.forEach(function (item) { return item.present = item === tab; });\n        };\n    return TaminTabPanelComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFieldComboBoxComponent = /*@__PURE__*/ (function (_super) {\n    __extends(TaminFieldComboBoxComponent, _super);\n    function TaminFieldComboBoxComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    TaminFieldComboBoxComponent.prototype.initializeComponent = /**\n     * @return {?}\n     */\n        function () {\n            this.initializeGrid();\n            this.picker.parent = this.inputElement;\n            this.picker.button = this.iconElement;\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    TaminFieldComboBoxComponent.prototype.initializeGrid = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            this.theGrid.configuration = this.dataGridConfiguration;\n            this.theGrid.loadDataOnInit = false;\n        };\n    /**\n     * @return {?}\n     */\n    TaminFieldComboBoxComponent.prototype.onShowPicker = /**\n     * @return {?}\n     */\n        function () {\n            this.picker.toggle();\n            this.theGrid.refreshData();\n        };\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    TaminFieldComboBoxComponent.prototype.onGridItemSelected = /**\n     * @param {?} val\n     * @return {?}\n     */\n        function (val) {\n            if (!val[this.displayField]) {\n                this.inputElement.nativeElement.value = '';\n            }\n            else {\n                this.inputElement.nativeElement.value = val[this.displayField];\n            }\n            this.onChange(val);\n            this.picker.toggle();\n        };\n    return TaminFieldComboBoxComponent;\n}(FieldBaseComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminTagComponent = /*@__PURE__*/ (function (_super) {\n    __extends(TaminTagComponent, _super);\n    function TaminTagComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TaminTagComponent;\n}(FieldBaseComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminPageNotFoundComponent = /*@__PURE__*/ (function () {\n    function TaminPageNotFoundComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    TaminPageNotFoundComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return TaminPageNotFoundComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFieldLabelComponent = /*@__PURE__*/ (function () {\n    function TaminFieldLabelComponent(controlContainer) {\n        this.controlContainer = controlContainer;\n    }\n    /**\n     * @return {?}\n     */\n    TaminFieldLabelComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.control = this.controlContainer.control.get(this.formControlName);\n        };\n    Object.defineProperty(TaminFieldLabelComponent.prototype, \"required\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.control.validator === null) {\n                return false;\n            }\n            /** @type {?} */\n            var validator = this.control.validator((({})));\n            return (validator && (validator.required || validator.requiredNumber));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    TaminFieldLabelComponent.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    TaminFieldLabelComponent.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n        };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    TaminFieldLabelComponent.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n        };\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    TaminFieldLabelComponent.prototype.writeValue = /**\n     * @param {?} obj\n     * @return {?}\n     */\n        function (obj) {\n        };\n    return TaminFieldLabelComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminSecurityService = /*@__PURE__*/ (function () {\n    function TaminSecurityService(taminApplicationConfig, router, httpClient) {\n        this.taminApplicationConfig = taminApplicationConfig;\n        this.router = router;\n        this.httpClient = httpClient;\n        this._currentUser = null;\n        this.tokenName = 'TAMIN';\n        this.tokenExpire = 'TAMINEXPIRE';\n        this.redirectUrl = 'REDIRECT_URL';\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    TaminSecurityService.prototype.addRedirectUrl = /**\n     * @param {?} url\n     * @return {?}\n     */\n        function (url) {\n            localStorage.setItem(this.redirectUrl, url);\n        };\n    /**\n     * @return {?}\n     */\n    TaminSecurityService.prototype.getRedirectUrl = /**\n     * @return {?}\n     */\n        function () {\n            return localStorage.getItem(this.redirectUrl);\n        };\n    /**\n     * @return {?}\n     */\n    TaminSecurityService.prototype.removeRedirectUrl = /**\n     * @return {?}\n     */\n        function () {\n            localStorage.removeItem(this.redirectUrl);\n        };\n    /**\n     * @return {?}\n     */\n    TaminSecurityService.prototype.getAuthToken = /**\n     * @return {?}\n     */\n        function () {\n            return this.getToken(this.tokenName);\n        };\n    /**\n     * @param {?} tokenName\n     * @param {?} token\n     * @return {?}\n     */\n    TaminSecurityService.prototype.addToken = /**\n     * @param {?} tokenName\n     * @param {?} token\n     * @return {?}\n     */\n        function (tokenName, token) {\n            localStorage.setItem(tokenName, token);\n        };\n    /**\n     * @param {?} tokenName\n     * @return {?}\n     */\n    TaminSecurityService.prototype.getToken = /**\n     * @param {?} tokenName\n     * @return {?}\n     */\n        function (tokenName) {\n            return localStorage.getItem(tokenName);\n        };\n    Object.defineProperty(TaminSecurityService.prototype, \"currentUser\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._currentUser;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TaminSecurityService.prototype.removeToken = /**\n     * @return {?}\n     */\n        function () {\n            localStorage.removeItem(this.tokenName);\n            localStorage.removeItem(this.tokenExpire);\n            this._currentUser = null;\n        };\n    /**\n     * @return {?}\n     */\n    TaminSecurityService.prototype.checkToken = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var accessToken = localStorage.getItem(this.tokenName);\n            /** @type {?} */\n            var expiresIn = localStorage.getItem(this.tokenExpire);\n            if (accessToken && expiresIn) {\n                /** @type {?} */\n                var thisTime = Number(new Date().getTime());\n                if (Number(thisTime) > Number(expiresIn)) {\n                    this.removeToken();\n                    return false;\n                }\n                return true;\n            }\n            else {\n                return false;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TaminSecurityService.prototype.loginCallbackCheck = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var tmp1 = window.location.hash.replace('#', '').split('&');\n            /** @type {?} */\n            var hashParams = tmp1.map(function (value) {\n                /** @type {?} */\n                var t = value.split('=');\n                /** @type {?} */\n                var n = t[0];\n                /** @type {?} */\n                var v = t[1];\n                /** @type {?} */\n                var result = {};\n                result[n] = v;\n                return result;\n            });\n            /** @type {?} */\n            var tmp2 = window.location.search.replace('?', '').split('&');\n            /** @type {?} */\n            var searchParams = tmp2.map(function (value) {\n                /** @type {?} */\n                var t = value.split('=');\n                /** @type {?} */\n                var n = t[0];\n                /** @type {?} */\n                var v = t[1];\n                /** @type {?} */\n                var result = {};\n                result[n] = v;\n                return result;\n            });\n            /** @type {?} */\n            var accessToken = hashParams.find(function (value) {\n                return value.hasOwnProperty('access_token');\n            });\n            /** @type {?} */\n            var expiresIn = hashParams.find(function (value) {\n                return value.hasOwnProperty('expires_in');\n            });\n            /** @type {?} */\n            var hp = searchParams.find(function (value) {\n                return value.hasOwnProperty('hp');\n            });\n            if (accessToken && expiresIn) {\n                this.addToken(this.tokenName, accessToken['access_token']);\n                /** @type {?} */\n                var currentTime = new Date().getTime();\n                this.addToken(this.tokenExpire, Number(currentTime) + (Number(expiresIn['expires_in']) * 1000));\n                window.history.replaceState({}, document.title, '');\n                if (hp) {\n                    window.history.replaceState({}, document.title, '/#/' + hp['hp']);\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TaminSecurityService.prototype.getUserName = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                _this.httpClient.get(_this.taminApplicationConfig.getUserNameUrl)\n                    .toPromise()\n                    .then(function (data) {\n                    resolve(data.data.firstName + \" \" + data.data.lastName);\n                })\n                    .catch(function (reason) {\n                    reject('');\n                });\n            });\n        };\n    /**\n     * @return {?}\n     */\n    TaminSecurityService.prototype.getCurrentUser = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._currentUser = null;\n            return new Promise(function (resolve, reject) {\n                if (_this.currentUser !== null) {\n                    resolve(_this.currentUser);\n                }\n                else {\n                    _this.httpClient.get(_this.taminApplicationConfig.getUserNameUrl)\n                        .toPromise()\n                        .then(function (data) {\n                        _this._currentUser = data.data;\n                        resolve(data.data);\n                    })\n                        .catch(function (reason) {\n                        reject(reason);\n                    });\n                }\n            });\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    TaminSecurityService.prototype.redirectToLoginWithCordova = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            this.router.navigate(['login']);\n            // const url = [\n            //   this.taminApplicationConfig.authenticationEndpoint,\n            //   '?',\n            //   // `redirect_uri=${window.location.href}`,\n            //   `redirect_uri=${this.taminApplicationConfig.redirectUrl}`,\n            //   '&',\n            //   `response_type=${this.taminApplicationConfig.responseType}`,\n            //   '&',\n            //   `client_id=${this.taminApplicationConfig.clientId}`\n            // ].join('');\n            //\n            // SafariViewController.isAvailable(function (available) {\n            //   if (available) {\n            //     SafariViewController.show(\n            //       {\n            //         url: url\n            //       },\n            //       function (result) {\n            //       },\n            //       function (error) {\n            //       }\n            //     );\n            //   }\n            // });\n        };\n    /**\n     * @private\n     * @param {?=} url\n     * @return {?}\n     */\n    TaminSecurityService.prototype.redirectToLoginWithBrowser = /**\n     * @private\n     * @param {?=} url\n     * @return {?}\n     */\n        function (url) {\n            if (url === void 0) {\n                url = '';\n            }\n            this.removeToken();\n            /** @type {?} */\n            var adressParts = url === '' ? window.location.href.split('/#/') : url;\n            /** @type {?} */\n            var hp = '';\n            /** @type {?} */\n            var returnUrl = '';\n            if (adressParts.length === 1) {\n                returnUrl = adressParts[0];\n            }\n            else {\n                hp = adressParts[1];\n                returnUrl = adressParts[0] + '?hp=' + hp;\n            }\n            window.location.href = [\n                this.taminApplicationConfig.authenticationEndpoint,\n                '?',\n                \"redirect_uri=\" + this.taminApplicationConfig.redirectUrl,\n                '&',\n                \"response_type=\" + this.taminApplicationConfig.responseType,\n                '&',\n                \"client_id=\" + this.taminApplicationConfig.clientId\n            ].join('');\n        };\n    /**\n     * @param {?=} url\n     * @return {?}\n     */\n    TaminSecurityService.prototype.redirectToLogin = /**\n     * @param {?=} url\n     * @return {?}\n     */\n        function (url) {\n            if (url === void 0) {\n                url = '';\n            }\n            if (window.hasOwnProperty('cordova')) {\n                this.redirectToLoginWithCordova();\n            }\n            else {\n                if (url !== '') {\n                    this.addRedirectUrl(url);\n                }\n                this.redirectToLoginWithBrowser(url);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TaminSecurityService.prototype.getLoginUrl = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var tmp = [\n                this.taminApplicationConfig.authenticationEndpoint,\n                '?',\n                \"redirect_uri=\" + this.taminApplicationConfig.redirectUrl,\n                '&',\n                \"response_type=\" + this.taminApplicationConfig.responseType,\n                '&',\n                \"client_id=\" + this.taminApplicationConfig.clientId\n            ].join('');\n            return tmp;\n        };\n    /**\n     * @return {?}\n     */\n    TaminSecurityService.prototype.redirectToLogout = /**\n     * @return {?}\n     */\n        function () {\n            if (window.hasOwnProperty('cordova')) {\n                this.removeToken();\n                // this.redirectToLogoutWithCordova();\n            }\n            else {\n                /** @type {?} */\n                var returnUrl = this.taminApplicationConfig.baseUrl;\n                this.removeToken();\n                window.location.href =\n                    this.taminApplicationConfig.logoutUrl + \"?redirect_uri=\" + this.taminApplicationConfig.redirectUrl + \"&response_type=\" + this.taminApplicationConfig.responseType + \"&client_id=\" + this.taminApplicationConfig.clientId;\n            }\n        };\n    /**\n     * @param {?} un\n     * @param {?} pw\n     * @return {?}\n     */\n    TaminSecurityService.prototype.mobileLogin = /**\n     * @param {?} un\n     * @param {?} pw\n     * @return {?}\n     */\n        function (un, pw) {\n            var _this = this;\n            this.removeToken();\n            return new Promise(function (resolve, reject) {\n                taminLogin.login(un, pw, _this.taminApplicationConfig.authenticationEndpoint, 'inspection-mobile', '123456', function (value) {\n                    /** @type {?} */\n                    var result = JSON.parse(value);\n                    _this.addToken(_this.tokenName, result.access_token);\n                    /** @type {?} */\n                    var currentTime = new Date().getTime();\n                    _this.addToken(_this.tokenExpire, Number(currentTime) + (Number(result.access_token) * 1000));\n                    resolve();\n                }, function () {\n                    reject();\n                });\n            });\n        };\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    TaminSecurityService.prototype.hasAccressTo = /**\n     * @param {?} url\n     * @return {?}\n     */\n        function (url) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                _this.httpClient.get(url)\n                    .toPromise()\n                    .then(function (data) {\n                    resolve(true);\n                })\n                    .catch(function (error) {\n                    resolve(false);\n                });\n            });\n        };\n    /** @nocollapse */ TaminSecurityService.ngInjectableDef = defineInjectable({ factory: function TaminSecurityService_Factory() { return new TaminSecurityService(inject(\"taminApplicationConfig\"), inject(Router), inject(HttpClient)); }, token: TaminSecurityService, providedIn: \"root\" });\n    return TaminSecurityService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminSiteHeaderComponent = /*@__PURE__*/ (function () {\n    function TaminSiteHeaderComponent(taminSecurityService) {\n        this.taminSecurityService = taminSecurityService;\n        this.showLogin = true;\n    }\n    /**\n     * @return {?}\n     */\n    TaminSiteHeaderComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this.taminSecurityService.checkToken()) {\n                this.userName = '';\n            }\n            else {\n                if (this.taminSecurityService.currentUser) {\n                    this.userName = this.taminSecurityService.currentUser.firstName + \" \" + this.taminSecurityService.currentUser.lastName;\n                }\n                this.taminSecurityService.getCurrentUser()\n                    .then(function (data) { return _this.userName = data.firstName + \" \" + data.lastName; })\n                    .catch(function (error) {\n                });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TaminSiteHeaderComponent.prototype.onLogin = /**\n     * @return {?}\n     */\n        function () {\n            this.taminSecurityService.redirectToLogin();\n        };\n    /**\n     * @return {?}\n     */\n    TaminSiteHeaderComponent.prototype.onLogout = /**\n     * @return {?}\n     */\n        function () {\n            this.taminSecurityService.redirectToLogout();\n        };\n    /**\n     * @return {?}\n     */\n    TaminSiteHeaderComponent.prototype.onUserProfile = /**\n     * @return {?}\n     */\n        function () {\n            alert('نمایش پروفایل کاربر در دست ساخت است.');\n        };\n    return TaminSiteHeaderComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminLazyLoadService = /*@__PURE__*/ (function () {\n    function TaminLazyLoadService(document) {\n        this.document = document;\n        this.loadedLibraries = {};\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    TaminLazyLoadService.prototype.loadJs = /**\n     * @param {?} url\n     * @return {?}\n     */\n        function (url) {\n            var _this = this;\n            if (this.loadedLibraries[url]) {\n                return this.loadedLibraries[url].asObservable();\n            }\n            this.loadedLibraries[url] = new ReplaySubject();\n            /** @type {?} */\n            var script = this.document.createElement('script');\n            script.type = 'text/javascript';\n            script.src = url;\n            script.onload = function () {\n                _this.loadedLibraries[url].next('');\n                _this.loadedLibraries[url].complete();\n            };\n            this.document.body.appendChild(script);\n            return this.loadedLibraries[url].asObservable();\n        };\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    TaminLazyLoadService.prototype.loadCss = /**\n     * @param {?} url\n     * @return {?}\n     */\n        function (url) {\n            var _this = this;\n            if (this.loadedLibraries[url]) {\n                return this.loadedLibraries[url].asObservable();\n            }\n            this.loadedLibraries[url] = new ReplaySubject();\n            /** @type {?} */\n            var script = this.document.createElement('link');\n            script.rel = 'stylesheet';\n            script.href = url;\n            script.onload = function () {\n                _this.loadedLibraries[url].next('');\n                _this.loadedLibraries[url].complete();\n            };\n            this.document.body.appendChild(script);\n            return this.loadedLibraries[url].asObservable();\n        };\n    /** @nocollapse */ TaminLazyLoadService.ngInjectableDef = defineInjectable({ factory: function TaminLazyLoadService_Factory() { return new TaminLazyLoadService(inject(DOCUMENT)); }, token: TaminLazyLoadService, providedIn: \"root\" });\n    return TaminLazyLoadService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminChartComponent = /*@__PURE__*/ (function () {\n    function TaminChartComponent(taminLazyLoadService) {\n        this.taminLazyLoadService = taminLazyLoadService;\n        this.defaultColors = [\n            [255, 99, 132],\n            [54, 162, 235],\n            [255, 206, 86],\n            [231, 233, 237],\n            [75, 192, 192],\n            [151, 187, 205],\n            [220, 220, 220],\n            [247, 70, 74],\n            [70, 191, 189],\n            [253, 180, 92],\n            [148, 159, 177],\n            [77, 83, 96]\n        ];\n        this.labels = [];\n        this.options = {};\n        this.chartClick = new EventEmitter();\n        this.chartHover = new EventEmitter();\n        this.initFlag = false;\n    }\n    /**\n     * @return {?}\n     */\n    TaminChartComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.ctx = this.element.nativeElement.getContext('2d');\n            this.cvs = this.element.nativeElement;\n            this.initFlag = true;\n            this.taminLazyLoadService.loadJs(this.lib).toPromise().then(function () {\n                if (_this.data || _this.datasets) {\n                    _this.refresh();\n                }\n            }).catch(function (error) {\n                //console.error(error);\n            });\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    TaminChartComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (this.initFlag) {\n                // Check if the changes are in the data or datasets\n                if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {\n                    if (changes['data']) {\n                        this.updateChartData(changes['data'].currentValue);\n                    }\n                    else {\n                        this.updateChartData(changes['datasets'].currentValue);\n                    }\n                    this.chart.update();\n                }\n                else {\n                    // otherwise rebuild the chart\n                    this.refresh();\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TaminChartComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.chart) {\n                this.chart.destroy();\n                this.chart = void 0;\n            }\n        };\n    /**\n     * @param {?} ctx\n     * @return {?}\n     */\n    TaminChartComponent.prototype.getChartBuilder = /**\n     * @param {?} ctx\n     * @return {?}\n     */\n        function (ctx /*, data:Array<any>, options:any*/) {\n            var _this = this;\n            /** @type {?} */\n            var datasets = this.getDatasets();\n            /** @type {?} */\n            var options = Object.assign({}, this.options);\n            if (this.legend === false) {\n                options.legend = { display: false };\n            }\n            // hock for onHover and onClick events\n            options.hover = options.hover || {};\n            if (!options.hover.onHover) {\n                options.hover.onHover = function (active) {\n                    if (active && !active.length) {\n                        return;\n                    }\n                    _this.chartHover.emit({ active: active });\n                };\n            }\n            if (!options.onClick) {\n                options.onClick = function (event, active) {\n                    _this.chartClick.emit({ event: event, active: active });\n                };\n            }\n            /** @type {?} */\n            var opts = {\n                type: this.chartType,\n                data: {\n                    labels: this.labels,\n                    datasets: datasets\n                },\n                options: options\n            };\n            return new Chart(ctx, opts);\n        };\n    /**\n     * @private\n     * @param {?} newDataValues\n     * @return {?}\n     */\n    TaminChartComponent.prototype.updateChartData = /**\n     * @private\n     * @param {?} newDataValues\n     * @return {?}\n     */\n        function (newDataValues) {\n            if (Array.isArray(newDataValues[0].data)) {\n                this.chart.data.datasets.forEach(function (dataset, i) {\n                    dataset.data = newDataValues[i].data;\n                    if (newDataValues[i].label) {\n                        dataset.label = newDataValues[i].label;\n                    }\n                });\n            }\n            else {\n                this.chart.data.datasets[0].data = newDataValues;\n            }\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    TaminChartComponent.prototype.getDatasets = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var datasets = void 0;\n            // in case if datasets is not provided, but data is present\n            if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {\n                if (Array.isArray(this.data[0])) {\n                    datasets = (((this.data))).map(function (data, index) {\n                        return { data: data, label: _this.labels[index] || \"Label \" + index };\n                    });\n                }\n                else {\n                    datasets = [{ data: this.data, label: \"Label 0\" }];\n                }\n            }\n            if (this.datasets && this.datasets.length ||\n                (datasets && datasets.length)) {\n                datasets = (this.datasets || datasets)\n                    .map(function (elm, index) {\n                    /** @type {?} */\n                    var newElm = Object.assign({}, elm);\n                    if (_this.colors && _this.colors.length) {\n                        Object.assign(newElm, _this.colors[index]);\n                    }\n                    else {\n                        Object.assign(newElm, _this.getColors(_this.chartType, index, newElm.data.length));\n                    }\n                    return newElm;\n                });\n            }\n            if (!datasets) {\n                throw new Error(\"ng-charts configuration error, data or datasets field are required to render char \" + this.chartType);\n            }\n            return datasets;\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    TaminChartComponent.prototype.refresh = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            this.chart = this.getChartBuilder(this.ctx);\n        };\n    /**\n     * @private\n     * @param {?} colour\n     * @param {?} alpha\n     * @return {?}\n     */\n    TaminChartComponent.prototype.rgba = /**\n     * @private\n     * @param {?} colour\n     * @param {?} alpha\n     * @return {?}\n     */\n        function (colour, alpha) {\n            return 'rgba(' + colour.concat(alpha).join(',') + ')';\n        };\n    /**\n     * @private\n     * @param {?} min\n     * @param {?} max\n     * @return {?}\n     */\n    TaminChartComponent.prototype.getRandomInt = /**\n     * @private\n     * @param {?} min\n     * @param {?} max\n     * @return {?}\n     */\n        function (min, max) {\n            return Math.floor(Math.random() * (max - min + 1)) + min;\n        };\n    /**\n     * @private\n     * @param {?} colors\n     * @return {?}\n     */\n    TaminChartComponent.prototype.formatLineColor = /**\n     * @private\n     * @param {?} colors\n     * @return {?}\n     */\n        function (colors) {\n            return {\n                backgroundColor: this.rgba(colors, 0.4),\n                borderColor: this.rgba(colors, 1),\n                pointBackgroundColor: this.rgba(colors, 1),\n                pointBorderColor: '#fff',\n                pointHoverBackgroundColor: '#fff',\n                pointHoverBorderColor: this.rgba(colors, 0.8)\n            };\n        };\n    /**\n     * @private\n     * @param {?} colors\n     * @return {?}\n     */\n    TaminChartComponent.prototype.formatBarColor = /**\n     * @private\n     * @param {?} colors\n     * @return {?}\n     */\n        function (colors) {\n            return {\n                backgroundColor: this.rgba(colors, 0.6),\n                borderColor: this.rgba(colors, 1),\n                hoverBackgroundColor: this.rgba(colors, 0.8),\n                hoverBorderColor: this.rgba(colors, 1)\n            };\n        };\n    /**\n     * @private\n     * @param {?} colors\n     * @return {?}\n     */\n    TaminChartComponent.prototype.formatPieColors = /**\n     * @private\n     * @param {?} colors\n     * @return {?}\n     */\n        function (colors) {\n            var _this = this;\n            return {\n                backgroundColor: colors.map(function (color) { return _this.rgba(color, 0.6); }),\n                borderColor: colors.map(function () { return '#fff'; }),\n                pointBackgroundColor: colors.map(function (color) { return _this.rgba(color, 1); }),\n                pointBorderColor: colors.map(function () { return '#fff'; }),\n                pointHoverBackgroundColor: colors.map(function (color) { return _this.rgba(color, 1); }),\n                pointHoverBorderColor: colors.map(function (color) { return _this.rgba(color, 1); })\n            };\n        };\n    /**\n     * @private\n     * @param {?} colors\n     * @return {?}\n     */\n    TaminChartComponent.prototype.formatPolarAreaColors = /**\n     * @private\n     * @param {?} colors\n     * @return {?}\n     */\n        function (colors) {\n            var _this = this;\n            return {\n                backgroundColor: colors.map(function (color) { return _this.rgba(color, 0.6); }),\n                borderColor: colors.map(function (color) { return _this.rgba(color, 1); }),\n                hoverBackgroundColor: colors.map(function (color) { return _this.rgba(color, 0.8); }),\n                hoverBorderColor: colors.map(function (color) { return _this.rgba(color, 1); })\n            };\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    TaminChartComponent.prototype.getRandomColor = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n            return [this.getRandomInt(0, 255), this.getRandomInt(0, 255), this.getRandomInt(0, 255)];\n        };\n    /**\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    TaminChartComponent.prototype.generateColor = /**\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            return this.defaultColors[index] || this.getRandomColor();\n        };\n    /**\n     * @private\n     * @param {?} count\n     * @return {?}\n     */\n    TaminChartComponent.prototype.generateColors = /**\n     * @private\n     * @param {?} count\n     * @return {?}\n     */\n        function (count) {\n            /** @type {?} */\n            var colorsArr = new Array(count);\n            for (var i = 0; i < count; i++) {\n                colorsArr[i] = this.defaultColors[i] || this.getRandomColor();\n            }\n            return colorsArr;\n        };\n    /**\n     * @private\n     * @param {?} chartType\n     * @param {?} index\n     * @param {?} count\n     * @return {?}\n     */\n    TaminChartComponent.prototype.getColors = /**\n     * @private\n     * @param {?} chartType\n     * @param {?} index\n     * @param {?} count\n     * @return {?}\n     */\n        function (chartType, index, count) {\n            if (chartType === 'pie' || chartType === 'doughnut') {\n                return this.formatPieColors(this.generateColors(count));\n            }\n            if (chartType === 'polarArea') {\n                return this.formatPolarAreaColors(this.generateColors(count));\n            }\n            if (chartType === 'line' || chartType === 'radar') {\n                return this.formatLineColor(this.generateColor(index));\n            }\n            if (chartType === 'bar' || chartType === 'horizontalBar') {\n                return this.formatBarColor(this.generateColor(index));\n            }\n            return ((this.generateColor(index)));\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    TaminChartComponent.prototype.windowResizeHandler = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            //this.refresh(); Makes some problems on hover.\n        };\n    return TaminChartComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminSiteFooterComponent = /*@__PURE__*/ (function () {\n    function TaminSiteFooterComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    TaminSiteFooterComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return TaminSiteFooterComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFieldStaticTextComponent = /*@__PURE__*/ (function (_super) {\n    __extends(TaminFieldStaticTextComponent, _super);\n    function TaminFieldStaticTextComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    TaminFieldStaticTextComponent.prototype.initializeComponent = /**\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    TaminFieldStaticTextComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.inputElement.nativeElement.value = this.persianNumberPipe.transform(value);\n            this.onChange(value);\n        };\n    return TaminFieldStaticTextComponent;\n}(FieldBaseComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar MonitoringComponent = /*@__PURE__*/ (function () {\n    function MonitoringComponent(genericRestService) {\n        this.genericRestService = genericRestService;\n        this.refreshInterval = 60000;\n        this.normalWaitingTime = 10000;\n        this.warningWaitingTime = 30000;\n        this.dangerWaitingTime = 50000;\n        this.timeout = 60000;\n        this.started = new EventEmitter();\n        this.stopped = new EventEmitter();\n        this.alive = false;\n        this.serviceTotalRowsCollected = new Map();\n        this.serviceWaitingTimes = new Map();\n        this.serviceStartTimes = new Map();\n        this.dbWaitingTimes = new Map();\n        this.dbStartTimes = new Map();\n        this.statusColor = '#bbbbbb';\n        this.dbChartLabels = [];\n        this.dbChartData = [];\n        this.dbChartType = 'bar';\n        this.dbChartOptions = {};\n        this.serviceChartLabels = ['ResponseTime', 'TimeoutRange'];\n        this.serviceChartData = [];\n        this.serviceChartType = 'pie';\n        this._subscription = new Subscription();\n        this.dbChartOptions = {\n            scales: {\n                yAxes: [{\n                        ticks: {\n                            beginAtZero: true\n                        }\n                    }]\n            }\n        };\n    }\n    /**\n     * @return {?}\n     */\n    MonitoringComponent.prototype.startTimer = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.alive = true;\n            this._subscription = timer(1000, this.refreshInterval).subscribe(function () {\n                _this.refreshData();\n            });\n            this.started.emit();\n        };\n    /**\n     * @return {?}\n     */\n    MonitoringComponent.prototype.stopTimer = /**\n     * @return {?}\n     */\n        function () {\n            if (this.alive) {\n                this.alive = false;\n                this._subscription.unsubscribe();\n            }\n            this.stopped.emit();\n            this.statusColor = '#bbbbbb';\n        };\n    /**\n     * @return {?}\n     */\n    MonitoringComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.serviceUrls) {\n                for (var index = 0; index < this.serviceUrls.length; index++) {\n                    this.serviceStartTimes.set(this.serviceUrls[index], 0);\n                    this.serviceWaitingTimes.set(this.serviceUrls[index], 0);\n                    this.serviceTotalRowsCollected.set(this.serviceUrls[index], 0);\n                    this.serviceChartData.push({ data: [0, this.timeout], label: this.serviceUrls[index] });\n                }\n            }\n            else {\n                this.serviceChartData.push({ data: [0, 0], label: '' });\n            }\n            this.dbChartData.push({ data: [0, 0], label: '' });\n            this.startTimer();\n        };\n    /**\n     * @return {?}\n     */\n    MonitoringComponent.prototype.refreshData = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.serviceUrls.forEach(function (serviceUrl) {\n                _this.serviceStartTimes.set(serviceUrl, Date.now());\n                _this.genericRestService.restUrl = serviceUrl;\n                _this.genericRestService.timeout = _this.timeout;\n                _this.genericRestService.getPagedObject(true, 0, 10, [], [])\n                    .then(function (objectResultWrapper) {\n                    _this.serviceWaitingTimes.set(serviceUrl, Date.now() - _this.serviceStartTimes.get(serviceUrl));\n                    if (_this.serviceWaitingTimes.get(serviceUrl) <= _this.normalWaitingTime) {\n                        _this.statusColor = 'green';\n                    }\n                    if (_this.serviceWaitingTimes.get(serviceUrl) > _this.normalWaitingTime && _this.serviceWaitingTimes.get(serviceUrl) <= _this.warningWaitingTime) {\n                        _this.statusColor = 'green';\n                    }\n                    if (_this.serviceWaitingTimes.get(serviceUrl) > _this.warningWaitingTime) {\n                        _this.statusColor = '#ff9900';\n                    }\n                    if (_this.serviceWaitingTimes.get(serviceUrl) > _this.dangerWaitingTime) {\n                        _this.statusColor = 'red';\n                    }\n                    _this.refreshServiceChart();\n                })\n                    .catch(function (error) {\n                    _this.serviceWaitingTimes.set(serviceUrl, _this.timeout);\n                    _this.statusColor = 'red';\n                    _this.refreshServiceChart();\n                });\n            });\n        };\n    /**\n     * @return {?}\n     */\n    MonitoringComponent.prototype.refreshServiceChart = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.serviceChartData = [];\n            this.serviceUrls.forEach(function (serviceUrl) {\n                /** @type {?} */\n                var newValue = _this.timeout - _this.serviceWaitingTimes.get(serviceUrl);\n                if (newValue < 0) {\n                    newValue = 0;\n                }\n                _this.serviceChartData.push({ data: [_this.serviceWaitingTimes.get(serviceUrl), newValue], label: serviceUrl });\n            });\n        };\n    /**\n     * @return {?}\n     */\n    MonitoringComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._subscription.unsubscribe();\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    MonitoringComponent.prototype.serviceChartClicked = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    MonitoringComponent.prototype.serviceChartHovered = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    MonitoringComponent.prototype.dbChartClicked = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    MonitoringComponent.prototype.dbChartHovered = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n        };\n    return MonitoringComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminMapComponent = /*@__PURE__*/ (function () {\n    function TaminMapComponent(taminLazyLoadService) {\n        this.taminLazyLoadService = taminLazyLoadService;\n        this.js = 'http://www.openlayers.org/api/OpenLayers.js';\n        this.width = '100%';\n        this.height = '100%';\n    }\n    /**\n     * @return {?}\n     */\n    TaminMapComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.id = (new Date()).getTime().toString();\n        };\n    /**\n     * @return {?}\n     */\n    TaminMapComponent.prototype.load = /**\n     * @return {?}\n     */\n        function () {\n            return this.taminLazyLoadService.loadJs(this.js).toPromise();\n        };\n    /**\n     * @param {?} latitude\n     * @param {?} longitude\n     * @param {?} zoom\n     * @return {?}\n     */\n    TaminMapComponent.prototype.setLocation = /**\n     * @param {?} latitude\n     * @param {?} longitude\n     * @param {?} zoom\n     * @return {?}\n     */\n        function (latitude, longitude, zoom) {\n            /** @type {?} */\n            var map = new OpenLayers.Map(this.id);\n            map.addLayer(new OpenLayers.Layer.OSM());\n            /** @type {?} */\n            var lonLat = new OpenLayers.LonLat(longitude, latitude)\n                .transform(new OpenLayers.Projection('EPSG:4326'), map.getProjectionObject());\n            /** @type {?} */\n            var markers = new OpenLayers.Layer.Markers('Markers');\n            markers.addMarker(new OpenLayers.Marker(lonLat));\n            map.setCenter(lonLat, zoom);\n        };\n    return TaminMapComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFieldStaticPersianDateComponent = /*@__PURE__*/ (function (_super) {\n    __extends(TaminFieldStaticPersianDateComponent, _super);\n    function TaminFieldStaticPersianDateComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    TaminFieldStaticPersianDateComponent.prototype.initializeComponent = /**\n     * @return {?}\n     */\n        function () {\n            this._taminPersianService = this.injector.get(TaminPersianService);\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    TaminFieldStaticPersianDateComponent.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.inputElement.nativeElement.value = value ? this.persianNumberPipe.transform(this._taminPersianService.getPersianDate(new Date(value))) : '';\n            this.onChange(value);\n        };\n    return TaminFieldStaticPersianDateComponent;\n}(FieldBaseComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminPdfViewerComponent = /*@__PURE__*/ (function () {\n    function TaminPdfViewerComponent(http) {\n        this.http = http;\n        this.errorMessage = 'خطا در دریافت اطلاعات';\n        this.beforeLoad = new EventEmitter();\n        this.afterLoad = new EventEmitter();\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    TaminPdfViewerComponent.prototype.getBlob = /**\n     * @param {?} url\n     * @return {?}\n     */\n        function (url) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                _this.http.get(url, { responseType: 'blob' })\n                    .pipe(timeout(6000))\n                    .toPromise()\n                    .then(function (response) { return resolve(response); })\n                    .catch(function (error) { return reject(error); });\n            });\n        };\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    TaminPdfViewerComponent.prototype.open = /**\n     * @param {?} url\n     * @return {?}\n     */\n        function (url) {\n            var _this = this;\n            this.beforeLoad.emit();\n            this.getBlob(url)\n                .then(function (value) {\n                _this.iframe.nativeElement.src = URL.createObjectURL(value);\n                _this.afterLoad.emit();\n                _this.theModal.show();\n            })\n                .catch(function (reason) {\n                _this.afterLoad.emit();\n                //this.modalError.show('خطا', this.errorMessage);\n            });\n        };\n    /**\n     * @return {?}\n     */\n    TaminPdfViewerComponent.prototype.close = /**\n     * @return {?}\n     */\n        function () {\n            this.theModal.hide();\n        };\n    /**\n     * @return {?}\n     */\n    TaminPdfViewerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return TaminPdfViewerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminWizardItemComponent = /*@__PURE__*/ (function () {\n    function TaminWizardItemComponent() {\n    }\n    Object.defineProperty(TaminWizardItemComponent.prototype, \"visible\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._visible;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TaminWizardItemComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.hide();\n        };\n    /**\n     * @return {?}\n     */\n    TaminWizardItemComponent.prototype.show = /**\n     * @return {?}\n     */\n        function () {\n            this.wizardItem.nativeElement.style.display = 'block';\n            this._visible = true;\n        };\n    /**\n     * @return {?}\n     */\n    TaminWizardItemComponent.prototype.hide = /**\n     * @return {?}\n     */\n        function () {\n            this.wizardItem.nativeElement.style.display = 'none';\n            this._visible = false;\n        };\n    return TaminWizardItemComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminWizardComponent = /*@__PURE__*/ (function () {\n    function TaminWizardComponent() {\n        this.stepChanging = new EventEmitter();\n        this.stepChanged = new EventEmitter();\n    }\n    Object.defineProperty(TaminWizardComponent.prototype, \"currentItem\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.items.toArray()[this._current];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaminWizardComponent.prototype, \"nextItem\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this._current < this.items.length) {\n                return this.items.toArray()[this._current + 1];\n            }\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaminWizardComponent.prototype, \"prevItem\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this._current > 0) {\n                return this.items.toArray()[this._current - 1];\n            }\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TaminWizardComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @return {?}\n     */\n    TaminWizardComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.items.length > 0) {\n                this._current = 0;\n                this.refresh();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TaminWizardComponent.prototype.onNextStep = /**\n     * @return {?}\n     */\n        function () {\n            if (this.items.length > 0 && this.items.length > this._current) {\n                if (this.stepChanging) {\n                    this.stepChanging.emit(new WizardNavigationData(this._current, 'forward'));\n                }\n                else {\n                    this.setNext();\n                    this.refresh();\n                    this.stepChanged.emit(new WizardNavigationData(this._current, 'forward'));\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TaminWizardComponent.prototype.onPrevStep = /**\n     * @return {?}\n     */\n        function () {\n            if (this.items.length > 0 && this._current > 0) {\n                if (this.stepChanging) {\n                    this.stepChanging.emit(new WizardNavigationData(this._current, 'backward'));\n                }\n                else {\n                    this.setPrev();\n                    this.refresh();\n                    this.stepChanged.emit(new WizardNavigationData(this._current, 'backward'));\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TaminWizardComponent.prototype.setNext = /**\n     * @return {?}\n     */\n        function () {\n            if (this.items.length > 0 && this.items.length > this._current) {\n                ++this._current;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TaminWizardComponent.prototype.setPrev = /**\n     * @return {?}\n     */\n        function () {\n            if (this.items.length > 0 && this._current > 0) {\n                --this._current;\n            }\n        };\n    /**\n     * @param {?} step\n     * @return {?}\n     */\n    TaminWizardComponent.prototype.setStep = /**\n     * @param {?} step\n     * @return {?}\n     */\n        function (step) {\n            if (this.items.length > 0 && step > 0 && step < this.items.length) {\n                this._current = step;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    TaminWizardComponent.prototype.refresh = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.items.forEach(function (item, index) {\n                if (item.visible) {\n                    item.hide();\n                }\n                if (_this._current === index) {\n                    item.show();\n                }\n            });\n        };\n    return TaminWizardComponent;\n}());\nvar WizardNavigationData = /*@__PURE__*/ (function () {\n    function WizardNavigationData(currentStep, direction) {\n        this.currentStep = currentStep;\n        this.direction = direction;\n    }\n    return WizardNavigationData;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminMenuButtonComponent = /*@__PURE__*/ (function () {\n    function TaminMenuButtonComponent() {\n        this.menuItems = [];\n        this.expanded = 'false';\n    }\n    /**\n     * @return {?}\n     */\n    TaminMenuButtonComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.menuId = 'id_' + new Date().getTime().toString();\n        };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    TaminMenuButtonComponent.prototype.onMenuClicked = /**\n     * @param {?} name\n     * @return {?}\n     */\n        function (name) {\n        };\n    /**\n     * @return {?}\n     */\n    TaminMenuButtonComponent.prototype.onButtonClicked = /**\n     * @return {?}\n     */\n        function () {\n            this.expanded = this.expanded === 'false' ? 'true' : 'false';\n        };\n    return TaminMenuButtonComponent;\n}());\nvar MenuItem = /*@__PURE__*/ (function () {\n    function MenuItem(title, disabled, name) {\n        this.title = title;\n        this.disabled = disabled;\n        this.name = name;\n    }\n    return MenuItem;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminProcessIndicatorComponent = /*@__PURE__*/ (function () {\n    function TaminProcessIndicatorComponent() {\n        this.steps = [];\n        this.currentStep = 0;\n    }\n    /**\n     * @return {?}\n     */\n    TaminProcessIndicatorComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return TaminProcessIndicatorComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFieldPasswordComponent = /*@__PURE__*/ (function (_super) {\n    __extends(TaminFieldPasswordComponent, _super);\n    function TaminFieldPasswordComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.showPasswordMeter = true;\n        _this.complexity = '';\n        _this.score = '';\n        return _this;\n        // initPwdChk() {\n        // this.scorebar.nativeElement.style.backgroundPosition = '0';\n        // }\n    }\n    /**\n     * @return {?}\n     */\n    TaminFieldPasswordComponent.prototype.initializeComponent = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var keyups = fromEvent(this.inputElement.nativeElement, 'keyup');\n            this.subscription.add(keyups.subscribe(function (evt) {\n                _this.checkPassword(evt.target.value);\n            }));\n        };\n    /**\n     * @param {?} pwd\n     * @return {?}\n     */\n    TaminFieldPasswordComponent.prototype.checkPassword = /**\n     * @param {?} pwd\n     * @return {?}\n     */\n        function (pwd) {\n            this.color = 'white';\n            this.complexity = '';\n            this.score = '';\n            if (pwd.trim().length === 0) {\n                return;\n            }\n            /** @type {?} */\n            var nScore = 0;\n            /** @type {?} */\n            var nLength = 0;\n            /** @type {?} */\n            var nAlphaUC = 0;\n            /** @type {?} */\n            var nAlphaLC = 0;\n            /** @type {?} */\n            var nNumber = 0;\n            /** @type {?} */\n            var nSymbol = 0;\n            /** @type {?} */\n            var nMidChar = 0;\n            /** @type {?} */\n            var nRequirements = 0;\n            /** @type {?} */\n            var nAlphasOnly = 0;\n            /** @type {?} */\n            var nNumbersOnly = 0;\n            /** @type {?} */\n            var nUnqChar = 0;\n            /** @type {?} */\n            var nRepChar = 0;\n            /** @type {?} */\n            var nRepInc = 0;\n            /** @type {?} */\n            var nConsecAlphaUC = 0;\n            /** @type {?} */\n            var nConsecAlphaLC = 0;\n            /** @type {?} */\n            var nConsecNumber = 0;\n            /** @type {?} */\n            var nSeqAlpha = 0;\n            /** @type {?} */\n            var nSeqNumber = 0;\n            /** @type {?} */\n            var nSeqSymbol = 0;\n            /** @type {?} */\n            var nReqChar = 0;\n            // nMultConsecCharType = 0;\n            // const nMultRepChar = 1, nMultConsecSymbol = 1;\n            /** @type {?} */\n            var nMultMidChar = 2;\n            /** @type {?} */\n            var \n            /*nMultRequirements = 2,*/\n            nMultConsecAlphaUC = 2;\n            /** @type {?} */\n            var nMultConsecAlphaLC = 2;\n            /** @type {?} */\n            var nMultConsecNumber = 2;\n            /** @type {?} */\n            var \n            /*nMultAlphaUC = 3,*/\n            /*nMultAlphaLC = 3,*/\n            nMultSeqAlpha = 3;\n            /** @type {?} */\n            var nMultSeqNumber = 3;\n            /** @type {?} */\n            var nMultSeqSymbol = 3;\n            /** @type {?} */\n            var nMultLength = 4;\n            /** @type {?} */\n            var nMultNumber = 4;\n            /** @type {?} */\n            var nMultSymbol = 6;\n            /** @type {?} */\n            var nTmpAlphaUC = '';\n            /** @type {?} */\n            var nTmpAlphaLC = '';\n            /** @type {?} */\n            var nTmpNumber = '';\n            /** @type {?} */\n            var nTmpSymbol = '';\n            /** @type {?} */\n            var sAlphas = 'abcdefghijklmnopqrstuvwxyz';\n            /** @type {?} */\n            var sNumerics = '01234567890';\n            /** @type {?} */\n            var sSymbols = ')!@#$%^&*()';\n            /** @type {?} */\n            var nMinPwdLen = 8;\n            if (document.all)\n                ;\n            if (pwd) {\n                nScore = Number(pwd.length * nMultLength);\n                nLength = pwd.length;\n                /** @type {?} */\n                var arrPwd = pwd.replace(/\\s+/g, '').split(/\\s*/);\n                /** @type {?} */\n                var arrPwdLen = arrPwd.length;\n                for (var a = 0; a < arrPwdLen; a++) {\n                    if (arrPwd[a].match(/[A-Z]/g)) {\n                        if (nTmpAlphaUC !== '') {\n                            if (Number(nTmpAlphaUC + 1) === a) {\n                                nConsecAlphaUC++;\n                            }\n                        }\n                        nTmpAlphaUC = a.toString();\n                        nAlphaUC++;\n                    }\n                    else if (arrPwd[a].match(/[a-z]/g)) {\n                        if (nTmpAlphaLC !== '') {\n                            if (Number(nTmpAlphaLC + 1) === a) {\n                                nConsecAlphaLC++;\n                            }\n                        }\n                        nTmpAlphaLC = a.toString();\n                        nAlphaLC++;\n                    }\n                    else if (arrPwd[a].match(/[0-9]/g)) {\n                        if (a > 0 && a < (arrPwdLen - 1)) {\n                            nMidChar++;\n                        }\n                        if (nTmpNumber !== '') {\n                            if (Number(nTmpNumber + 1) === a) {\n                                nConsecNumber++;\n                            }\n                        }\n                        nTmpNumber = a.toString();\n                        nNumber++;\n                    }\n                    else if (arrPwd[a].match(/[^a-zA-Z0-9_]/g)) {\n                        if (a > 0 && a < (arrPwdLen - 1)) {\n                            nMidChar++;\n                        }\n                        nTmpSymbol = a.toString();\n                        nSymbol++;\n                    }\n                    /** @type {?} */\n                    var bCharExists = false;\n                    for (var b = 0; b < arrPwdLen; b++) {\n                        if (arrPwd[a] === arrPwd[b] && a !== b) {\n                            bCharExists = true;\n                            nRepInc += Math.abs(arrPwdLen / (b - a));\n                        }\n                    }\n                    if (bCharExists) {\n                        nRepChar++;\n                        nUnqChar = arrPwdLen - nRepChar;\n                        nRepInc = (nUnqChar) ? Math.ceil(nRepInc / nUnqChar) : Math.ceil(nRepInc);\n                    }\n                }\n                /* Check for sequential alpha string patterns (forward and reverse) */\n                for (var s = 0; s < 23; s++) {\n                    /** @type {?} */\n                    var sFwd = sAlphas.substring(s, Number(s + 3));\n                    /** @type {?} */\n                    var sRev = this.strReverse(sFwd);\n                    if (pwd.toLowerCase().indexOf(sFwd) !== -1 || pwd.toLowerCase().indexOf(sRev) !== -1) {\n                        nSeqAlpha++;\n                    }\n                }\n                for (var s = 0; s < 8; s++) {\n                    /** @type {?} */\n                    var sFwd = sNumerics.substring(s, Number(s + 3));\n                    /** @type {?} */\n                    var sRev = this.strReverse(sFwd);\n                    if (pwd.toLowerCase().indexOf(sFwd) !== -1 || pwd.toLowerCase().indexOf(sRev) !== -1) {\n                        nSeqNumber++;\n                    }\n                }\n                for (var s = 0; s < 8; s++) {\n                    /** @type {?} */\n                    var sFwd = sSymbols.substring(s, Number(s + 3));\n                    /** @type {?} */\n                    var sRev = this.strReverse(sFwd);\n                    if (pwd.toLowerCase().indexOf(sFwd) !== -1 || pwd.toLowerCase().indexOf(sRev) !== -1) {\n                        nSeqSymbol++;\n                    }\n                }\n                if (nAlphaUC > 0 && nAlphaUC < nLength) {\n                    nScore = Number(nScore + ((nLength - nAlphaUC) * 2));\n                }\n                if (nAlphaLC > 0 && nAlphaLC < nLength) {\n                    nScore = Number(nScore + ((nLength - nAlphaLC) * 2));\n                }\n                if (nNumber > 0 && nNumber < nLength) {\n                    nScore = Number(nScore + (nNumber * nMultNumber));\n                }\n                if (nSymbol > 0) {\n                    nScore = Number(nScore + (nSymbol * nMultSymbol));\n                }\n                if (nMidChar > 0) {\n                    nScore = Number(nScore + (nMidChar * nMultMidChar));\n                }\n                if ((nAlphaLC > 0 || nAlphaUC > 0) && nSymbol === 0 && nNumber === 0) {\n                    nScore = Number(nScore - nLength);\n                    nAlphasOnly = nLength;\n                }\n                if (nAlphaLC === 0 && nAlphaUC === 0 && nSymbol === 0 && nNumber > 0) {\n                    nScore = Number(nScore - nLength);\n                    nNumbersOnly = nLength;\n                }\n                if (nRepChar > 0) {\n                    nScore = Number(nScore - nRepInc);\n                }\n                if (nConsecAlphaUC > 0) {\n                    nScore = Number(nScore - (nConsecAlphaUC * nMultConsecAlphaUC));\n                }\n                if (nConsecAlphaLC > 0) {\n                    nScore = Number(nScore - (nConsecAlphaLC * nMultConsecAlphaLC));\n                }\n                if (nConsecNumber > 0) {\n                    nScore = Number(nScore - (nConsecNumber * nMultConsecNumber));\n                }\n                if (nSeqAlpha > 0) {\n                    nScore = Number(nScore - (nSeqAlpha * nMultSeqAlpha));\n                }\n                if (nSeqNumber > 0) {\n                    nScore = Number(nScore - (nSeqNumber * nMultSeqNumber));\n                }\n                if (nSeqSymbol > 0) {\n                    nScore = Number(nScore - (nSeqSymbol * nMultSeqSymbol));\n                }\n                /** @type {?} */\n                var arrChars = [nLength, nAlphaUC, nAlphaLC, nNumber, nSymbol];\n                /** @type {?} */\n                var arrCharsIds = ['nLength', 'nAlphaUC', 'nAlphaLC', 'nNumber', 'nSymbol'];\n                /** @type {?} */\n                var arrCharsLen = arrChars.length;\n                /** @type {?} */\n                var minVal = void 0;\n                for (var c = 0; c < arrCharsLen; c++) {\n                    // let oImg = $('div_' + arrCharsIds[c]);\n                    // let oBonus = $(arrCharsIds[c] + 'Bonus');\n                    // $(arrCharsIds[c]).innerHTML = arrChars[c];\n                    if (arrCharsIds[c] === 'nLength') {\n                        minVal = Number(nMinPwdLen - 1);\n                    }\n                    else {\n                        minVal = 0;\n                    }\n                    if (arrChars[c] === Number(minVal + 1)) {\n                        nReqChar++;\n                    }\n                    else if (arrChars[c] > Number(minVal + 1)) {\n                        nReqChar++;\n                    }\n                }\n                nRequirements = nReqChar;\n                /** @type {?} */\n                var nMinReqChars = void 0;\n                if (pwd.length >= nMinPwdLen) {\n                    nMinReqChars = 3;\n                }\n                else {\n                    nMinReqChars = 4;\n                }\n                if (nRequirements > nMinReqChars) {\n                    nScore = Number(nScore + (nRequirements * 2));\n                }\n                arrChars = [nMidChar, nRequirements];\n                arrCharsIds = ['nMidChar', 'nRequirements'];\n                arrCharsLen = arrChars.length;\n                for (var c = 0; c < arrCharsLen; c++) {\n                    if (arrCharsIds[c] === 'nRequirements') {\n                        minVal = nMinReqChars;\n                    }\n                    else {\n                        minVal = 0;\n                    }\n                }\n                arrChars = [nAlphasOnly, nNumbersOnly, nRepChar, nConsecAlphaUC, nConsecAlphaLC, nConsecNumber, nSeqAlpha, nSeqNumber, nSeqSymbol];\n                arrCharsIds = ['nAlphasOnly', 'nNumbersOnly', 'nRepChar', 'nConsecAlphaUC', 'nConsecAlphaLC', 'nConsecNumber', 'nSeqAlpha', 'nSeqNumber', 'nSeqSymbol'];\n                arrCharsLen = arrChars.length;\n                for (var c = 0; c < arrCharsLen; c++) {\n                    // const oImg = $('div_' + arrCharsIds[c]);\n                    // const oBonus = $(arrCharsIds[c] + 'Bonus');\n                    // $(arrCharsIds[c]).innerHTML = arrChars[c];\n                    if (arrChars[c] > 0)\n                        ;\n                }\n                if (nScore > 100) {\n                    nScore = 100;\n                }\n                else if (nScore < 0) {\n                    nScore = 0;\n                }\n                if (nScore >= 0 && nScore < 20) {\n                    this.complexity = 'خیلی ضعیف';\n                    this.meter.nativeElement.style.width = nScore + '%';\n                    this.color = 'darkred';\n                }\n                else if (nScore >= 20 && nScore < 40) {\n                    this.meter.nativeElement.style.width = nScore + '%';\n                    this.color = 'red';\n                    this.complexity = 'ضعیف';\n                }\n                else if (nScore >= 40 && nScore < 60) {\n                    this.meter.nativeElement.style.width = nScore + '%';\n                    this.color = 'greenyellow';\n                    this.complexity = 'خوب';\n                }\n                else if (nScore >= 60 && nScore < 80) {\n                    this.meter.nativeElement.style.width = nScore + '%';\n                    this.color = 'lightgreen';\n                    this.complexity = 'قوی';\n                }\n                else if (nScore >= 80 && nScore <= 100) {\n                    this.meter.nativeElement.style.width = nScore + '%';\n                    this.color = 'green';\n                    this.complexity = 'خیلی قوی';\n                }\n                this.score = nScore.toString();\n                this.meter.nativeElement.style.width = nScore + '%';\n                // oScore.innerHTML  = nScore + '%';\n                // oComplexity.innerHTML = sComplexity;\n            }\n            else {\n                this.score = nScore.toString() + '%';\n                // this.initPwdChk();\n                // oScore.innerHTML = nScore + '%';\n                // oComplexity.innerHTML = sComplexity;\n            }\n        };\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    TaminFieldPasswordComponent.prototype.strReverse = /**\n     * @param {?} str\n     * @return {?}\n     */\n        function (str) {\n            /** @type {?} */\n            var newstring = '';\n            for (var s = 0; s < str.length; s++) {\n                newstring = str.charAt(s) + newstring;\n            }\n            return newstring;\n        };\n    return TaminFieldPasswordComponent;\n}(FieldBaseComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFieldTextAreaComponent = /*@__PURE__*/ (function (_super) {\n    __extends(TaminFieldTextAreaComponent, _super);\n    function TaminFieldTextAreaComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.rows = 4;\n        _this.cols = 50;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    TaminFieldTextAreaComponent.prototype.initializeComponent = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return TaminFieldTextAreaComponent;\n}(FieldBaseComponent));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar moment$3 = momentNs;\nvar PersianDateTimePipe = /*@__PURE__*/ (function () {\n    function PersianDateTimePipe() {\n    }\n    /**\n     * @param {?} value\n     * @param {?=} args\n     * @return {?}\n     */\n    PersianDateTimePipe.prototype.transform = /**\n     * @param {?} value\n     * @param {?=} args\n     * @return {?}\n     */\n        function (value, args) {\n            /** @type {?} */\n            var tmp = moment$3.from(value.toLocaleDateString(), 'en');\n            if (tmp.isValid()) {\n                return tmp.locale('fa').format('YYYY/MM/DD');\n            }\n            return null;\n        };\n    return PersianDateTimePipe;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminPageBaseComponent = /*@__PURE__*/ (function () {\n    function TaminPageBaseComponent(injector) {\n        this.injector = injector;\n        this.overlays = [];\n        this.isModal = false;\n        this._overlayService = injector.get(OverlayService);\n        this._restService = injector.get(TaminRestService);\n        this._securityService = injector.get(TaminSecurityService);\n        this._persianDateTime = injector.get(PersianDateTimePipe);\n        this._persianNumberPipe = injector.get(PersianNumberPipe);\n        this._router = injector.get(Router);\n        this._formBuilder = injector.get(FormBuilder);\n        this._host = injector.get(ElementRef);\n    }\n    Object.defineProperty(TaminPageBaseComponent.prototype, \"visible\", {\n        set: /**\n         * @param {?} val\n         * @return {?}\n         */ function (val) {\n            this._host.nativeElement.style.display = val ? 'block' : 'none';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.internalInitialize();\n            this.initializePage();\n        };\n    Object.defineProperty(TaminPageBaseComponent.prototype, \"title\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._title;\n        },\n        set: /**\n         * @param {?} val\n         * @return {?}\n         */ function (val) {\n            this._title = val;\n            document.title = 'سازمان تامین اجتماعی' + ' - ' + this._title;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.overlays.forEach(function (item) {\n                _this._overlayService.hide(item.overlay);\n            });\n            this.destroyPage();\n        };\n    Object.defineProperty(TaminPageBaseComponent.prototype, \"restService\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._restService;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaminPageBaseComponent.prototype, \"formBuilder\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._formBuilder;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaminPageBaseComponent.prototype, \"currentUser\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._securityService.currentUser;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaminPageBaseComponent.prototype, \"securityService\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._securityService;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.getPersianDate = /**\n     * @param {?} date\n     * @return {?}\n     */\n        function (date) {\n            try {\n                return this._persianDateTime.transform(new Date(date));\n            }\n            catch (_a) {\n                return 'تاریخ نادرست';\n            }\n        };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.redirectTo = /**\n     * @param {?} path\n     * @return {?}\n     */\n        function (path) {\n            this._router.navigate([path]);\n        };\n    /**\n     * @param {?} title\n     * @param {?} message\n     * @param {?=} callback\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.showInfoMessageBox = /**\n     * @param {?} title\n     * @param {?} message\n     * @param {?=} callback\n     * @return {?}\n     */\n        function (title, message, callback) {\n            if (callback === void 0) {\n                callback = null;\n            }\n            if (callback) {\n                alertify.alert(title, message, callback);\n            }\n            else {\n                alertify.alert(title, message);\n            }\n        };\n    /**\n     * @param {?} title\n     * @param {?} message\n     * @param {?=} callback\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.showErrorMessageBox = /**\n     * @param {?} title\n     * @param {?} message\n     * @param {?=} callback\n     * @return {?}\n     */\n        function (title, message, callback) {\n            if (callback === void 0) {\n                callback = null;\n            }\n            /** @type {?} */\n            var theTitle = \"<span style=\\\"color: red\\\">\" + title + \"</span>\";\n            if (callback) {\n                alertify.alert(theTitle, message, callback);\n            }\n            else {\n                alertify.alert(theTitle, message);\n            }\n        };\n    /**\n     * @param {?} title\n     * @param {?} message\n     * @param {?} yesCallback\n     * @param {?} noCallback\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.showQuestionBox = /**\n     * @param {?} title\n     * @param {?} message\n     * @param {?} yesCallback\n     * @param {?} noCallback\n     * @return {?}\n     */\n        function (title, message, yesCallback, noCallback) {\n            alertify.confirm(title, message, yesCallback, noCallback)\n                .set({\n                labels: { ok: 'بلی', cancel: 'خیر' }\n            });\n        };\n    /**\n     * @param {?} title\n     * @param {?} message\n     * @param {?} retryCallback\n     * @param {?} cancelCallback\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.showRetryBox = /**\n     * @param {?} title\n     * @param {?} message\n     * @param {?} retryCallback\n     * @param {?} cancelCallback\n     * @return {?}\n     */\n        function (title, message, retryCallback, cancelCallback) {\n            alertify.confirm(title, message, retryCallback, cancelCallback)\n                .set({\n                labels: { ok: 'تلاش مجدد', cancel: 'انصراف' },\n                'closable': false\n            });\n        };\n    /**\n     * @param {?} str\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.getPersianNumber = /**\n     * @param {?} str\n     * @return {?}\n     */\n        function (str) {\n            return this._persianNumberPipe.transform(str);\n        };\n    /**\n     * @protected\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.initializePage = /**\n     * @protected\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @protected\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.destroyPage = /**\n     * @protected\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @param {?=} element\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.showOverlay = /**\n     * @param {?=} element\n     * @return {?}\n     */\n        function (element) {\n            if (element === void 0) {\n                element = null;\n            }\n            if (this.overlays.findIndex(function (c) { return c.overlay === element; }) >= 0) {\n                return;\n            }\n            /** @type {?} */\n            var overlay = this._overlayService.show(element);\n            /** @type {?} */\n            var id = (new Date()).getTime();\n            this.overlays.push({\n                overlay: overlay,\n                id: id.toString()\n            });\n            return id.toString();\n        };\n    /**\n     * @param {?} message\n     * @param {?=} element\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.showOverlayWithMessage = /**\n     * @param {?} message\n     * @param {?=} element\n     * @return {?}\n     */\n        function (message, element) {\n            if (element === void 0) {\n                element = null;\n            }\n            if (this.overlays.findIndex(function (c) { return c.overlay === element; }) >= 0) {\n                return;\n            }\n            /** @type {?} */\n            var overlay = this._overlayService.showMessage(message, element);\n            /** @type {?} */\n            var id = (new Date()).getTime();\n            this.overlays.push({\n                overlay: overlay,\n                id: id.toString()\n            });\n            return id.toString();\n        };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.hideOverlay = /**\n     * @param {?} id\n     * @return {?}\n     */\n        function (id) {\n            /** @type {?} */\n            var tmp = this.overlays.find(function (c) { return c.id === id; });\n            if (tmp) {\n                this._overlayService.hide(tmp.overlay);\n            }\n            /** @type {?} */\n            var index = this.overlays.findIndex(function (c) { return c.id === id; });\n            this.overlays.splice(index, 1);\n        };\n    /**\n     * @private\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.internalInitialize = /**\n     * @private\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @protected\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.loadPageData = /**\n     * @protected\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            setTimeout(function () { return _this.loadPageData(); }, 0);\n        };\n    /**\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.openModal = /**\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @param {?} form\n     * @return {?}\n     */\n    TaminPageBaseComponent.prototype.markFormGroupAsTouched = /**\n     * @param {?} form\n     * @return {?}\n     */\n        function (form) {\n            (((Object))).values(form.controls).forEach(function (control) { return control.markAsTouched(); });\n        };\n    return TaminPageBaseComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminDataGridActionMenuComponent = /*@__PURE__*/ (function () {\n    function TaminDataGridActionMenuComponent() {\n        this.actionColumns = [];\n        this.menuItemClicked = new EventEmitter();\n        this.dropdownClicked = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    TaminDataGridActionMenuComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.picker.parent = this.dropdown;\n        };\n    /**\n     * @param {?} actionColumn\n     * @return {?}\n     */\n    TaminDataGridActionMenuComponent.prototype.theMenuItemClicked = /**\n     * @param {?} actionColumn\n     * @return {?}\n     */\n        function (actionColumn) {\n            this.picker.toggle();\n            /** @type {?} */\n            var item = this.dataItem;\n            this.menuItemClicked.emit({ actionColumn: actionColumn, item: item });\n        };\n    /**\n     * @return {?}\n     */\n    TaminDataGridActionMenuComponent.prototype.dropdownClickedHandler = /**\n     * @return {?}\n     */\n        function () {\n            this.picker.toggle();\n            this.dropdownClicked.emit();\n        };\n    return TaminDataGridActionMenuComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar CallbackPipe = /*@__PURE__*/ (function () {\n    function CallbackPipe() {\n    }\n    /**\n     * @param {?} items\n     * @param {?} callback\n     * @return {?}\n     */\n    CallbackPipe.prototype.transform = /**\n     * @param {?} items\n     * @param {?} callback\n     * @return {?}\n     */\n        function (items, callback) {\n            if (!items || !callback) {\n                return items;\n            }\n            return items.filter(function (item) { return callback(item); });\n        };\n    return CallbackPipe;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminFrameworkModule = /*@__PURE__*/ (function () {\n    function TaminFrameworkModule() {\n    }\n    return TaminFrameworkModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*\n  Created by: k_kaviani\n  Revised by: a_amiri\n*/\n/** @enum {string} */\nvar SearchOperator = {\n    EQUAL: 'EQUAL',\n    EQ: 'EQ',\n    LIKE: 'LIKE',\n    NOT: 'NOT',\n    GT: 'GT',\n    LT: 'LT',\n    GTE: 'GTE',\n    LTE: 'LTE',\n};\nvar SearchParam = /*@__PURE__*/ (function () {\n    function SearchParam() {\n    }\n    return SearchParam;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nvar SortDirection = {\n    ASC: 'ASC',\n    DESC: 'DESC',\n};\nvar SortParam = /*@__PURE__*/ (function () {\n    function SortParam() {\n    }\n    return SortParam;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminValidators = /*@__PURE__*/ (function () {\n    function TaminValidators() {\n    }\n    /**\n     * @param {?} control\n     * @return {?}\n     */\n    TaminValidators.requiredNumber = /**\n     * @param {?} control\n     * @return {?}\n     */\n        function (control) {\n            /** @type {?} */\n            var value = control.value;\n            if (value === undefined || value === null || value === '') {\n                return null;\n            }\n            if (Number(value) !== 0) {\n                return null;\n            }\n            return { 'requiredNumber': false };\n        };\n    /**\n     * @param {?} control\n     * @return {?}\n     */\n    TaminValidators.nationalId = /**\n     * @param {?} control\n     * @return {?}\n     */\n        function (control) {\n            if (control.value === undefined || control.value === null || control.value === '') {\n                return undefined;\n            }\n            /** @type {?} */\n            var value = control.value;\n            if (value.length !== 10 && value.length !== 13) {\n                return { 'nationalId': false };\n            }\n            if (value.length === 10) {\n                if (value === '0000000000' ||\n                    value === '1111111111' ||\n                    value === '2222222222' ||\n                    value === '3333333333' ||\n                    value === '4444444444' ||\n                    value === '5555555555' ||\n                    value === '6666666666' ||\n                    value === '7777777777' ||\n                    value === '8888888888' ||\n                    value === '9999999999') {\n                    return { 'nationalId': false };\n                }\n                /** @type {?} */\n                var sum = 0;\n                for (var i = 0; i < 9; i++) {\n                    sum += value.charAt(i) * (10 - i);\n                }\n                /** @type {?} */\n                var s = Math.floor(sum / 11);\n                /** @type {?} */\n                var a = sum - s * 11;\n                /** @type {?} */\n                var astr = a.toString();\n                /** @type {?} */\n                var c = value.charAt(9);\n                /** @type {?} */\n                var difa = (11 - a).toString();\n                return ((a === 0 && astr === c) || (a === 1 && c === '1') || (a > 1 && c === difa)) ? null : { 'nationalId': false };\n            }\n            else {\n                return null;\n            }\n        };\n    /**\n     * @private\n     * @param {?} control\n     * @return {?}\n     */\n    TaminValidators.isNotPresent = /**\n     * @private\n     * @param {?} control\n     * @return {?}\n     */\n        function (control) {\n            /** @type {?} */\n            var value = control.value;\n            if (value === undefined || value === null) {\n                return true;\n            }\n            return value === '';\n        };\n    return TaminValidators;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TaminDataGridConfigurationFactory = /*@__PURE__*/ (function () {\n    function TaminDataGridConfigurationFactory() {\n        this._data = new TaminDataGridConfiguration();\n    }\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} url\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.addUrl = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} url\n     * @return {THIS}\n     */\n        function (url) {\n            ((this))._data.serviceUrl = url;\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} column\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.addVisibleColumn = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} column\n     * @return {THIS}\n     */\n        function (column) {\n            ((this))._data.visibleColumns.push(((column)));\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.clearVisibleColumns = /**\n     * @template THIS\n     * @this {THIS}\n     * @return {THIS}\n     */\n        function () {\n            ((this))._data.visibleColumns = [];\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} column\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.addActionColumn = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} column\n     * @return {THIS}\n     */\n        function (column) {\n            ((this))._data.actionColumns.push(((column)));\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.clearActionColumns = /**\n     * @template THIS\n     * @this {THIS}\n     * @return {THIS}\n     */\n        function () {\n            ((this))._data.actionColumns = [];\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} param\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.addSearchParam = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} param\n     * @return {THIS}\n     */\n        function (param) {\n            ((this))._data.searchParams.push(((param)));\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.clearSearchParams = /**\n     * @template THIS\n     * @this {THIS}\n     * @return {THIS}\n     */\n        function () {\n            ((this))._data.searchParams = [];\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} param\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.addSortParam = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} param\n     * @return {THIS}\n     */\n        function (param) {\n            ((this))._data.sortParams.push(((param)));\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.clearSortParams = /**\n     * @template THIS\n     * @this {THIS}\n     * @return {THIS}\n     */\n        function () {\n            ((this))._data.sortParams = [];\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} viewType\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.setViewType = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} viewType\n     * @return {THIS}\n     */\n        function (viewType) {\n            ((this))._data.viewType = viewType;\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.setShowActionColumn = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n        function (val) {\n            ((this))._data.showActionColumn = val;\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} caption\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.setActionColumnCaption = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} caption\n     * @return {THIS}\n     */\n        function (caption) {\n            ((this))._data.actionColumnCaption = caption;\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.setRowEditable = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n        function (val) {\n            ((this))._data.rowEditable = val.toString();\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.setRowDeletable = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n        function (val) {\n            ((this))._data.rowDeletable = val.toString();\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.setDataItems = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items\n     * @return {THIS}\n     */\n        function (items) {\n            ((this))._data.dataItems = items;\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.setShowFooter = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n        function (val) {\n            ((this))._data.showFooter = val.toString();\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.setShowPager = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n        function (val) {\n            ((this))._data.showPager = val;\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.setPagerSize = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n        function (val) {\n            ((this))._data.pagerSize = val;\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.setFirstLoad = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n        function (val) {\n            ((this))._data.loadDataOnInit = val;\n            return ((this));\n        };\n    /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n    TaminDataGridConfigurationFactory.prototype.setPagerCurrentPage = /**\n     * @template THIS\n     * @this {THIS}\n     * @param {?} val\n     * @return {THIS}\n     */\n        function (val) {\n            ((this))._data.pagerCurrentPage = val;\n            return ((this));\n        };\n    /**\n     * @return {?}\n     */\n    TaminDataGridConfigurationFactory.prototype.getData = /**\n     * @return {?}\n     */\n        function () {\n            return this._data;\n        };\n    return TaminDataGridConfigurationFactory;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar AuthInterceptorService = /*@__PURE__*/ (function () {\n    function AuthInterceptorService(taminSecurityService) {\n        this.taminSecurityService = taminSecurityService;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    AuthInterceptorService.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n        function (req, next) {\n            var _this = this;\n            /** @type {?} */\n            var token = this.taminSecurityService.getAuthToken();\n            if (token) {\n                req = req.clone({\n                    setHeaders: { Authorization: \"Bearer \" + token }\n                });\n            }\n            // return next.handle(req);\n            return next.handle(req)\n                .pipe(catchError(function (error) {\n                if (error.error instanceof ErrorEvent)\n                    ;\n                else {\n                    // server-side error\n                    if (error.status === 401) {\n                        alertify.alert('توجه', 'برای ادامه استفاده از سیستم می بایست مجددا نام کاربری و گذرواژه خود را وارد نمایید', function () {\n                            /** @type {?} */\n                            var adressParts = window.location.href.split('/#/');\n                            /** @type {?} */\n                            var redirectUrl = '';\n                            if (adressParts.length === 2) {\n                                redirectUrl = adressParts[1];\n                            }\n                            _this.taminSecurityService.redirectToLogin(redirectUrl);\n                        });\n                    }\n                }\n                return throwError(HttpErrorResponse);\n            }));\n            // return next.handle(req).pipe(catchError((error, caught) => {\n            //   this.handleAuthError(error);\n            //   return of(error);\n            // }) as any);\n            // if (!isNullOrUndefined(token)) {\n            //   return next.handle(req.clone({setHeaders: {'Authorization': 'Bearer ' + token}}));\n            // } else {\n            //   return next.handle(req);\n            // }\n        };\n    /** @nocollapse */ AuthInterceptorService.ngInjectableDef = defineInjectable({ factory: function AuthInterceptorService_Factory() { return new AuthInterceptorService(inject(TaminSecurityService)); }, token: AuthInterceptorService, providedIn: \"root\" });\n    return AuthInterceptorService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar PlatformService = /*@__PURE__*/ (function () {\n    function PlatformService(platform) {\n        this.platform = platform;\n    }\n    /**\n     * @return {?}\n     */\n    PlatformService.prototype.isAndroid = /**\n     * @return {?}\n     */\n        function () {\n            return this.platform.ANDROID;\n        };\n    /**\n     * @return {?}\n     */\n    PlatformService.prototype.isIOS = /**\n     * @return {?}\n     */\n        function () {\n            return this.platform.IOS;\n        };\n    /**\n     * @return {?}\n     */\n    PlatformService.prototype.isBlink = /**\n     * @return {?}\n     */\n        function () {\n            return this.platform.BLINK;\n        };\n    /**\n     * @return {?}\n     */\n    PlatformService.prototype.isEdge = /**\n     * @return {?}\n     */\n        function () {\n            return this.platform.EDGE;\n        };\n    /**\n     * @return {?}\n     */\n    PlatformService.prototype.isFirefox = /**\n     * @return {?}\n     */\n        function () {\n            return this.platform.FIREFOX;\n        };\n    /**\n     * @return {?}\n     */\n    PlatformService.prototype.isBrowser = /**\n     * @return {?}\n     */\n        function () {\n            return this.platform.isBrowser;\n        };\n    /**\n     * @return {?}\n     */\n    PlatformService.prototype.isSafari = /**\n     * @return {?}\n     */\n        function () {\n            return this.platform.SAFARI;\n        };\n    /**\n     * @return {?}\n     */\n    PlatformService.prototype.isTrident = /**\n     * @return {?}\n     */\n        function () {\n            return this.platform.TRIDENT;\n        };\n    /**\n     * @return {?}\n     */\n    PlatformService.prototype.isWebkit = /**\n     * @return {?}\n     */\n        function () {\n            return this.platform.WEBKIT;\n        };\n    /** @nocollapse */ PlatformService.ngInjectableDef = defineInjectable({ factory: function PlatformService_Factory() { return new PlatformService(inject(Platform)); }, token: PlatformService, providedIn: \"root\" });\n    return PlatformService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { PersianNumberPipe, CallbackPipe, TaminFieldTextAreaComponent, SearchParam, SearchOperator, SortParam, SortDirection, DataColumnViewType, GenericRestService, PersianDateTimePipe, MonitoringComponent, TaminFieldAutoCompleteDataGridComponent, TaminPersianDatePickerComponent, TaminFieldNumberComponent, TaminFieldComboBoxStaticComponent, TaminFieldPersianDateComponent, TaminFieldValidatorComponent, TaminModalComponent, TaminFieldNatioanlIdComponent, TaminImageUploadComponent, TaminFormControlComponent, TaminAccordionGroupComponent, TaminTabComponent, TaminFieldMaskComponent, TaminSiteTopMenuComponent, TaminSiteBottomMenuComponent, TaminDataPagerComponent, TaminAccordionComponent, TaminFieldCheckboxComponent, TaminTabPanelComponent, TaminFieldTextComponent, TaminFieldComboBoxComponent, TaminTagComponent, TaminPageNotFoundComponent, TaminFieldLabelComponent, TaminSiteHeaderComponent, TaminChartComponent, TaminSiteFooterComponent, TaminFieldStaticTextComponent, TaminValidators, TaminDataColumn, TaminDataGridComponent, TaminPersianService, FieldBaseComponent, TaminDataGridConfiguration, TaminDataGridConfigurationFactory, TaminLazyLoadService, TaminFieldStaticPersianDateComponent, TaminSecurityService, OverlayService, TaminMapComponent, TaminWizardComponent, TaminWizardItemComponent, TaminRestService, TaminPdfViewerComponent, TaminMenuButtonComponent, MenuItem, WizardNavigationData, TaminProcessIndicatorComponent, TaminFieldPasswordComponent, TaminPageBaseComponent, TaminMenuModel, AuthInterceptorService, PlatformService, TaminFrameworkModule, PickerContainerComponent as ɵa, TaminDataGridActionMenuComponent as ɵb };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",null]}