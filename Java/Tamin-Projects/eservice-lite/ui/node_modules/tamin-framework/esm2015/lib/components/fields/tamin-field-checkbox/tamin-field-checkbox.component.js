/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef } from '@angular/core';
import { FieldBaseComponent } from '../../../base/field-base.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent } from 'rxjs';
export class TaminFieldCheckboxComponent extends FieldBaseComponent {
    /**
     * @return {?}
     */
    get required() {
        if (this.control.validator === null) {
            return false;
        }
        /** @type {?} */
        const validator = this.control.validator((/** @type {?} */ ({})));
        return (validator && (validator.required));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (typeof (value) !== 'boolean') {
            value = false;
        }
        this.inputElement.nativeElement.checked = value;
        this.onChange(value);
    }
    /**
     * @protected
     * @return {?}
     */
    initValueAccessor() {
        this.control = this.controlContainer.control.get(this.formControlName);
        if (typeof (this.control.value) !== 'boolean') {
            this.control.setValue(false);
        }
        /** @type {?} */
        const change = fromEvent(this.inputElement.nativeElement, 'change');
        this.subscription.add(change.subscribe((/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            this.onChange(evt.target.checked);
        })));
        /** @type {?} */
        const focuses = fromEvent(this.inputElement.nativeElement, 'focus');
        this.subscription.add(focuses.subscribe((/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            this.onTouched();
        })));
    }
}
TaminFieldCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-field-checkbox',
                template: "<div class=\"control-group\">\n  <label class=\"control control--checkbox\" [ngClass]=\"{'disable-cursor': control.disabled}\"><span [ngClass]=\"{'disable-text': control.disabled}\"><ng-content></ng-content></span>\n    <input type=\"checkbox\" #inputElement [disabled]=\"control.disabled\"/>\n    <div class=\"control__indicator\"></div>\n  </label>\n</div>\n\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TaminFieldCheckboxComponent)),
                        multi: true
                    }
                ],
                styles: [".disable-text{color:#cacaca}.disable-cursor{cursor:default!important}.control-group{display:inline-block;vertical-align:top;text-align:left}.control{display:block;position:relative;padding-right:25px;cursor:pointer;color:#000;font-size:16px}.control input{position:absolute;z-index:-1;opacity:0}.control__indicator{position:absolute;top:2px;right:0;height:20px;width:20px;background:#e6e6e6}.control input:focus~.control__indicator,.control:hover input~.control__indicator{background:#ccc}.control input:checked~.control__indicator{background:#2aa1c0}.control input:checked:focus~.control__indicator,.control:hover input:not([disabled]):checked~.control__indicator{background:#0e647d}.control input:disabled~.control__indicator{background:#e6e6e6;opacity:.6;pointer-events:none}.control__indicator:after{content:'';position:absolute;display:none}.control input:checked~.control__indicator:after{display:block}.control--checkbox .control__indicator:after{left:8px;top:4px;width:3px;height:8px;border:solid #fff;border-width:0 2px 2px 0;transform:rotate(45deg)}.control--checkbox input:disabled~.control__indicator:after{border-color:#7b7b7b}.control--radio .control__indicator:after{left:7px;top:7px;height:6px;width:6px;border-radius:50%;background:#fff}.control--radio input:disabled~.control__indicator:after{background:#7b7b7b}.select{position:relative;display:inline-block;margin-bottom:15px;width:100%}.select select{display:inline-block;width:100%;cursor:pointer;padding:10px 15px;outline:0;border:0;border-radius:0;background:#e6e6e6;color:#7b7b7b;appearance:none;-webkit-appearance:none;-moz-appearance:none}.select select::-ms-expand{display:none}.select select:focus,.select select:hover{color:#000;background:#ccc}.select select:disabled{opacity:.5;pointer-events:none}.select__arrow{position:absolute;top:16px;right:15px;width:0;height:0;pointer-events:none;border-style:solid;border-width:8px 5px 0;border-color:#7b7b7b transparent transparent}.select select:focus~.select__arrow,.select select:hover~.select__arrow{border-top-color:#000}.select select:disabled~.select__arrow{border-top-color:#ccc}"]
            }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tZmllbGQtY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vdGFtaW4tZnJhbWV3b3JrLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZmllbGRzL3RhbWluLWZpZWxkLWNoZWNrYm94L3RhbWluLWZpZWxkLWNoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sb0NBQW9DLENBQUM7QUFDdEUsT0FBTyxFQUFrQixpQkFBaUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFjL0IsTUFBTSxPQUFPLDJCQUE0QixTQUFRLGtCQUFrQjs7OztJQUNqRSxJQUFJLFFBQVE7UUFDVixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxLQUFLLElBQUksRUFBRTtZQUNuQyxPQUFPLEtBQUssQ0FBQztTQUNkOztjQUNLLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxtQkFBQSxFQUFFLEVBQW1CLENBQUM7UUFDL0QsT0FBTyxDQUFDLFNBQVMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7O0lBR0QsVUFBVSxDQUFDLEtBQWM7UUFDdkIsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQ2hDLEtBQUssR0FBRyxLQUFLLENBQUM7U0FDZjtRQUNELElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDaEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDOzs7OztJQUVTLGlCQUFpQjtRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN2RSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM5Qjs7Y0FFSyxNQUFNLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQztRQUNuRSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUzs7OztRQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7WUFDbEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLENBQUMsRUFBQyxDQUFDLENBQUM7O2NBRUUsT0FBTyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUM7UUFDbkUsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLEdBQVEsRUFBRSxFQUFFO1lBQ2pELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNuQixDQUFDLEVBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBOUNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyxzWEFBb0Q7Z0JBRXBELFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLDJCQUEyQixFQUFDO3dCQUMxRCxLQUFLLEVBQUUsSUFBSTtxQkFDWjtpQkFDRjs7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0ZpZWxkQmFzZUNvbXBvbmVudH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9maWVsZC1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQge0Fic3RyYWN0Q29udHJvbCwgTkdfVkFMVUVfQUNDRVNTT1J9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7ZnJvbUV2ZW50fSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGFtaW4tZmllbGQtY2hlY2tib3gnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFtaW4tZmllbGQtY2hlY2tib3guY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90YW1pbi1maWVsZC1jaGVja2JveC5jb21wb25lbnQuc2NzcyddLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRhbWluRmllbGRDaGVja2JveENvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBUYW1pbkZpZWxkQ2hlY2tib3hDb21wb25lbnQgZXh0ZW5kcyBGaWVsZEJhc2VDb21wb25lbnQge1xuICBnZXQgcmVxdWlyZWQoKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuY29udHJvbC52YWxpZGF0b3IgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgdmFsaWRhdG9yID0gdGhpcy5jb250cm9sLnZhbGlkYXRvcih7fSBhcyBBYnN0cmFjdENvbnRyb2wpO1xuICAgIHJldHVybiAodmFsaWRhdG9yICYmICh2YWxpZGF0b3IucmVxdWlyZWQpKTtcbiAgfVxuXG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIGlmICh0eXBlb2YgKHZhbHVlKSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LmNoZWNrZWQgPSB2YWx1ZTtcbiAgICB0aGlzLm9uQ2hhbmdlKHZhbHVlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbml0VmFsdWVBY2Nlc3NvcigpIHtcbiAgICB0aGlzLmNvbnRyb2wgPSB0aGlzLmNvbnRyb2xDb250YWluZXIuY29udHJvbC5nZXQodGhpcy5mb3JtQ29udHJvbE5hbWUpO1xuICAgIGlmICh0eXBlb2YgKHRoaXMuY29udHJvbC52YWx1ZSkgIT09ICdib29sZWFuJykge1xuICAgICAgdGhpcy5jb250cm9sLnNldFZhbHVlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBjb25zdCBjaGFuZ2UgPSBmcm9tRXZlbnQodGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2NoYW5nZScpO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLmFkZChjaGFuZ2Uuc3Vic2NyaWJlKChldnQ6IGFueSkgPT4ge1xuICAgICAgdGhpcy5vbkNoYW5nZShldnQudGFyZ2V0LmNoZWNrZWQpO1xuICAgIH0pKTtcblxuICAgIGNvbnN0IGZvY3VzZXMgPSBmcm9tRXZlbnQodGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2ZvY3VzJyk7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKGZvY3VzZXMuc3Vic2NyaWJlKChldnQ6IGFueSkgPT4ge1xuICAgICAgICB0aGlzLm9uVG91Y2hlZCgpO1xuICAgICAgfVxuICAgICkpO1xuICB9XG59XG4iXX0=