/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FieldBaseComponent } from '../../../base/field-base.component';
var TaminFieldMaskComponent = /** @class */ (function (_super) {
    tslib_1.__extends(TaminFieldMaskComponent, _super);
    function TaminFieldMaskComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TaminFieldMaskComponent.prototype, "mask", {
        get: /**
         * @return {?}
         */
        function () {
            return this.maskRef.mask;
        },
        set: /**
         * @param {?} mask
         * @return {?}
         */
        function (mask) {
            var _this = this;
            /** @type {?} */
            var me = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.maskRef = new IMask(_this.inputElement.nativeElement, {
                    mask: mask,
                });
            }), 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TaminFieldMaskComponent.prototype, "regex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.maskRef.regex;
        },
        set: /**
         * @param {?} regex
         * @return {?}
         */
        function (regex) {
            var _this = this;
            /** @type {?} */
            var me = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.maskRef = new IMask(_this.inputElement.nativeElement, {
                    mask: new RegExp(regex),
                });
            }), 0);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TaminFieldMaskComponent.prototype.initializeComponent = /**
     * @return {?}
     */
    function () {
    };
    TaminFieldMaskComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-field-mask',
                    template: "<input\n  type=\"text\"\n  [disabled] = \"control.disabled\"\n  [attr.placeholder]=\"placeHolder\"\n  class=\"tamin-form-control-input tamin-form-control-mask\"\n  [class.tamin-form-control-valid]=\"control.touched && control?.valid\"\n  [class.tamin-form-control-invalid]=\"control.touched && !control?.valid\"\n  #inputElement>\n<span>{{hint}}</span>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return TaminFieldMaskComponent; })),
                            multi: true
                        }
                    ],
                    styles: [".tamin-form-control-mask{direction:ltr;text-align:right}"]
                }] }
    ];
    TaminFieldMaskComponent.propDecorators = {
        mask: [{ type: Input }],
        regex: [{ type: Input }]
    };
    return TaminFieldMaskComponent;
}(FieldBaseComponent));
export { TaminFieldMaskComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tZmllbGQtbWFzay5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90YW1pbi1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9maWVsZHMvdGFtaW4tZmllbGQtbWFzay90YW1pbi1maWVsZC1tYXNrLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUl0RTtJQVk2QyxtREFBa0I7SUFaL0Q7O0lBMENBLENBQUM7SUE3QkMsc0JBQWEseUNBQUk7Ozs7UUFTakI7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzNCLENBQUM7Ozs7O1FBWEQsVUFBa0IsSUFBWTtZQUE5QixpQkFPQzs7Z0JBTk8sRUFBRSxHQUFHLElBQUk7WUFDZixVQUFVOzs7WUFBQztnQkFDVCxLQUFJLENBQUMsT0FBTyxHQUFHLElBQUksS0FBSyxDQUFDLEtBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFO29CQUN4RCxJQUFJLEVBQUUsSUFBSTtpQkFDWCxDQUFDLENBQUM7WUFDTCxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUM7UUFDUixDQUFDOzs7T0FBQTtJQU1ELHNCQUFhLDBDQUFLOzs7O1FBVWxCO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUM1QixDQUFDOzs7OztRQVpELFVBQW1CLEtBQWE7WUFBaEMsaUJBUUM7O2dCQVBPLEVBQUUsR0FBRyxJQUFJO1lBRWYsVUFBVTs7O1lBQUM7Z0JBQ1QsS0FBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLEtBQUssQ0FBQyxLQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRTtvQkFDeEQsSUFBSSxFQUFFLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztpQkFDeEIsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ1IsQ0FBQzs7O09BQUE7Ozs7SUFNRCxxREFBbUI7OztJQUFuQjtJQUNBLENBQUM7O2dCQXpDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsOFdBQWdEO29CQUVoRCxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVU7Ozs0QkFBQyxjQUFNLE9BQUEsdUJBQXVCLEVBQXZCLENBQXVCLEVBQUM7NEJBQ3RELEtBQUssRUFBRSxJQUFJO3lCQUNaO3FCQUNGOztpQkFDRjs7O3VCQUVFLEtBQUs7d0JBYUwsS0FBSzs7SUFnQlIsOEJBQUM7Q0FBQSxBQTFDRCxDQVk2QyxrQkFBa0IsR0E4QjlEO1NBOUJZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05HX1ZBTFVFX0FDQ0VTU09SfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0ZpZWxkQmFzZUNvbXBvbmVudH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9maWVsZC1iYXNlLmNvbXBvbmVudCc7XG5cbmRlY2xhcmUgbGV0IElNYXNrOiBhbnk7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RhbWluLWZpZWxkLW1hc2snLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFtaW4tZmllbGQtbWFzay5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RhbWluLWZpZWxkLW1hc2suY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUYW1pbkZpZWxkTWFza0NvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBUYW1pbkZpZWxkTWFza0NvbXBvbmVudCBleHRlbmRzIEZpZWxkQmFzZUNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHNldCBtYXNrKG1hc2s6IHN0cmluZykge1xuICAgIGNvbnN0IG1lID0gdGhpcztcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMubWFza1JlZiA9IG5ldyBJTWFzayh0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LCB7XG4gICAgICAgIG1hc2s6IG1hc2ssXG4gICAgICB9KTtcbiAgICB9LCAwKTtcbiAgfVxuXG4gIGdldCBtYXNrKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubWFza1JlZi5tYXNrO1xuICB9XG5cbiAgQElucHV0KCkgc2V0IHJlZ2V4KHJlZ2V4OiBzdHJpbmcpIHtcbiAgICBjb25zdCBtZSA9IHRoaXM7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMubWFza1JlZiA9IG5ldyBJTWFzayh0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LCB7XG4gICAgICAgIG1hc2s6IG5ldyBSZWdFeHAocmVnZXgpLFxuICAgICAgfSk7XG4gICAgfSwgMCk7XG4gIH1cblxuICBnZXQgcmVnZXgoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5tYXNrUmVmLnJlZ2V4O1xuICB9XG5cbiAgaW5pdGlhbGl6ZUNvbXBvbmVudCgpIHtcbiAgfVxufVxuIl19