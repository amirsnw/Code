/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
export class TaminPersianDatePickerComponent {
    constructor() {
        this.dayData = [];
        this.yearData = [];
        this.monthData = [];
        this.dateChanged = new EventEmitter();
        this.cancel = new EventEmitter();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    set currentDate(date) {
        if (date !== undefined && date !== null) {
            this._currentDate = date;
            this.generateDayData();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onChangeView('DayPicker');
    }
    /**
     * @return {?}
     */
    get currentDate() {
        return this._currentDate;
    }
    /**
     * @return {?}
     */
    get currentMonthName() {
        // return moment(this.currentDate).locale('fa').format('MMMM');
        return (new persianDate(this.currentDate)).format('MMMM');
    }
    /**
     * @return {?}
     */
    get currentYear() {
        // return moment(this.currentDate).jYear();
        return (new persianDate(this.currentDate)).year();
    }
    /**
     * @return {?}
     */
    generateDayData() {
        this.dayData = [];
        // const today = moment(this.currentDate !== undefined ? this.currentDate : new Date());
        /** @type {?} */
        const today = new persianDate(this.currentDate !== undefined ? this.currentDate : new Date());
        // const currentMonth = today.jMonth() + 1;
        /** @type {?} */
        const currentMonth = today.month();
        // const currentDay = today.jDate();
        /** @type {?} */
        const currentDay = today.date();
        // const firstDayInMonth = today.startOf('jMonth');
        /** @type {?} */
        const firstDayInMonth = today.startOf('month');
        // const firstElementInGrid = firstDayInMonth.subtract(firstDayInMonth.jDay(), 'day');
        /** @type {?} */
        const firstElementInGrid = firstDayInMonth.subtract('days', firstDayInMonth.day());
        /** @type {?} */
        const data = [];
        for (let i = 0; i < 42; i++) {
            /** @type {?} */
            const tmp = firstElementInGrid.clone().add(i, 'd').hour(23);
            data.push({
                year: tmp.year(),
                month: tmp.month(),
                day: tmp.date(),
                persianDay: tmp.date(),
                today: (tmp.month() === currentMonth) && (tmp.date() === currentDay),
                date: tmp.toDate(),
                nextPrevMonth: tmp.month() !== currentMonth
            });
        }
        this.dayData = data;
    }
    /**
     * @param {?} startYear
     * @return {?}
     */
    generateYearData(startYear) {
        /** @type {?} */
        const today = new persianDate(this.currentDate);
        /** @type {?} */
        const currentYear = today.year();
        this.yearData = [];
        /** @type {?} */
        const year = startYear;
        /** @type {?} */
        const data = [];
        for (let i = 0; i < 20; i++) {
            data.push({
                year: year + i,
                currentYear: currentYear === (year + i)
            });
        }
        this.yearData = data;
    }
    /**
     * @return {?}
     */
    generateMonthData() {
        /** @type {?} */
        const tmp = new persianDate(this.currentDate);
        /** @type {?} */
        const currentMonth = tmp.month();
        this.monthData = [
            {
                name: 'فروردین',
                month: 1,
                currentMonth: currentMonth === 1
            },
            {
                name: 'اردیبهشت',
                month: 2,
                currentMonth: currentMonth === 2
            },
            {
                name: 'خرداد',
                month: 3,
                currentMonth: currentMonth === 3
            },
            {
                name: 'تیر',
                month: 4,
                currentMonth: currentMonth === 4
            },
            {
                name: 'مرداد',
                month: 5,
                currentMonth: currentMonth === 5
            },
            {
                name: 'شهریور',
                month: 6,
                currentMonth: currentMonth === 6
            },
            {
                name: 'مهر',
                month: 7,
                currentMonth: currentMonth === 7
            },
            {
                name: 'آبان',
                month: 8,
                currentMonth: currentMonth === 8
            },
            {
                name: 'آذر',
                month: 9,
                currentMonth: currentMonth === 9
            },
            {
                name: 'دی',
                month: 10,
                currentMonth: currentMonth === 10
            }, {
                name: 'بهمن',
                month: 11,
                currentMonth: currentMonth === 11
            },
            {
                name: 'اسفند',
                month: 12,
                currentMonth: currentMonth === 12
            }
        ];
    }
    /**
     * @return {?}
     */
    hide() {
        this.cancel.emit();
    }
    /**
     * @return {?}
     */
    onPrevMonth() {
        /** @type {?} */
        let today = new persianDate(this.currentDate);
        today = today.subtract('months', 1);
        today.date(1);
        this.currentDate = today.toDate();
        this.generateDayData();
    }
    /**
     * @return {?}
     */
    onNextMonth() {
        /** @type {?} */
        let today = new persianDate(this.currentDate);
        today = today.add('months', 1);
        today.date(1);
        this.currentDate = today.toDate();
        this.generateDayData();
    }
    /**
     * @return {?}
     */
    onToday() {
        this.currentDate = new Date();
        this.generateDayData();
        this.dateChanged.emit(this._currentDate);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    onSetDay(date) {
        this.currentDate = new Date(date);
        this.generateDayData();
        this.dateChanged.emit(this._currentDate);
    }
    /**
     * @return {?}
     */
    setView() {
        this.viewState = 'DayPicker';
    }
    /**
     * @param {?} viewName
     * @return {?}
     */
    onChangeView(viewName) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const today = new persianDate(this.currentDate);
            switch (viewName) {
                case 'YearPicker':
                    this.viewState = 'YearPicker';
                    this.generateYearData(today.year());
                    break;
                case 'MonthPicker':
                    this.viewState = 'MonthPicker';
                    this.generateMonthData();
                    break;
                case 'DayPicker':
                    this.viewState = 'DayPicker';
                    this.generateDayData();
                    break;
            }
        }));
    }
    /**
     * @return {?}
     */
    onPrevYearGroup() {
        /** @type {?} */
        const startYear = this.yearData[0].year - 20;
        this.generateYearData(startYear);
    }
    /**
     * @return {?}
     */
    onNextYearGroup() {
        /** @type {?} */
        const startYear = this.yearData[0].year + 20;
        this.generateYearData(startYear);
    }
    /**
     * @return {?}
     */
    onThisYear() {
        this.currentDate = new Date();
        this.onChangeView('DayPicker');
    }
    /**
     * @return {?}
     */
    onThisMonth() {
        this.currentDate = new Date();
        this.onChangeView('DayPicker');
    }
    /**
     * @param {?} year
     * @return {?}
     */
    onSetYear(year) {
        // const tmp = moment(this.currentDate);
        /** @type {?} */
        const tmp = new persianDate(this.currentDate);
        tmp.year(year);
        this.currentDate = tmp.toDate();
        this.onChangeView('DayPicker');
    }
    /**
     * @param {?} month
     * @return {?}
     */
    onSetMonth(month) {
        // const tmp = moment(this.currentDate);
        /** @type {?} */
        const tmp = new persianDate(this.currentDate);
        tmp.month(month);
        this.currentDate = tmp.toDate();
        this.onChangeView('DayPicker');
    }
}
TaminPersianDatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-persian-date-picker',
                template: "<div class=\"calendar-container\">\r\n  <!-- Day picker -->\r\n  <div class=\"day-picker-view\" *ngIf=\"viewState === 'DayPicker'\">\r\n    <div class=\"calendar-header\">\r\n      <div class=\"calendar-header-prev\" title=\"\u0645\u0627\u0647 \u0642\u0628\u0644\u06CC\">\r\n        <a (click)=\"onPrevMonth()\" class=\"button-effect\"><i class=\"icon-fast-fw\"></i></a></div>\r\n      <div class=\"calendar-header-title\">\r\n        <a class=\"button-effect\" (click)=\"onChangeView('MonthPicker')\" title=\"\u0627\u0646\u062A\u062E\u0627\u0628 \u0645\u0627\u0647\">{{currentMonthName}}</a>\r\n        <span style=\"padding-left: 5px\"></span>\r\n        <a class=\"button-effect\" (click)=\"onChangeView('YearPicker')\" title=\"\u0627\u0646\u062A\u062E\u0627\u0628 \u0633\u0627\u0644\">{{currentYear | persianNumber}}</a>\r\n      </div>\r\n      <div class=\"calendar-header-next\" title=\"\u0645\u0627\u0647 \u0628\u0639\u062F\u06CC\">\r\n        <a (click)=\"onNextMonth()\" class=\"button-effect\"><i class=\"icon-rewind\"></i></a>\r\n      </div>\r\n    </div>\r\n    <div class=\"calendar-body day-picker-view\">\r\n      <div class=\"day-names\">\r\n        <div class=\"\">\u0634</div>\r\n        <div class=\"\">\u06CC</div>\r\n        <div class=\"\">\u062F</div>\r\n        <div class=\"\">\u0633</div>\r\n        <div class=\"\">\u0686</div>\r\n        <div class=\"\">\u067E</div>\r\n        <div class=\"\">\u062C</div>\r\n      </div>\r\n      <ng-container *ngFor=\"let day of dayData\">\r\n        <div class=\"day-picker-day\" (click)=\"onSetDay(day.date)\"\r\n             [ngClass]=\"{'day-picker-day-not-current-month': day.nextPrevMonth, 'day-picker-day-today':day.today}\">\r\n          {{day.day}}\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n    <div class=\"calendar-footer\">\r\n      <a (click)=\"onToday()\" class=\"button-effect\">\u0627\u0645\u0631\u0648\u0632</a> <span style=\"padding-left: 15px\"></span>\r\n      <a (click)=\"hide()\" class=\"button-effect\">\u0627\u0646\u0635\u0631\u0627\u0641</a>\r\n    </div>\r\n  </div>\r\n  <!-- Month picker -->\r\n  <div *ngIf=\"viewState === 'MonthPicker'\">\r\n    <div class=\"calendar-header\"></div>\r\n    <div class=\"calendar-body month-picker-view\">\r\n      <ng-container *ngFor=\"let month of monthData\">\r\n        <div class=\"month-picker-view-month\" [ngClass]=\"{'current-month':month.currentMonth}\"\r\n             (click)=\"onSetMonth(month.month)\">{{month.name}}\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n    <div class=\"day-picker-tomonth\">\r\n      <a (click)=\"onThisMonth()\" class=\"button-effect\">\u0645\u0627\u0647 \u062C\u0627\u0631\u06CC</a>\r\n    </div>\r\n  </div>\r\n  <!-- Year picker -->\r\n  <div *ngIf=\"viewState === 'YearPicker'\" class=\"\">\r\n    <div class=\"calendar-header\">\r\n      <div class=\"calendar-header-prev\" >\r\n        <a (click)=\"onPrevYearGroup()\" class=\"button-effect\"><i class=\"icon-fast-fw\"></i></a></div>\r\n      <div class=\"calendar-header-title\">\r\n        {{yearData[19].year | persianNumber}} - {{yearData[0].year | persianNumber}}\r\n      </div>\r\n      <div class=\"calendar-header-next\">\r\n        <a (click)=\"onNextYearGroup()\" class=\"button-effect\" style=\"color: white\"><i class=\"icon-rewind\"></i></a>\r\n      </div>\r\n    </div>\r\n    <div class=\"calendar-body year-picker-view\">\r\n      <ng-container *ngFor=\"let year of yearData\">\r\n        <div class=\"year-picker-view-year\" [ngClass]=\"{'current-year':year.currentYear}\" (click)=\"onSetYear(year.year)\">\r\n          {{year.year | persianNumber}}\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n    <div class=\"calendar-footer\">\r\n      <a (click)=\"onThisYear()\" class=\"button-effect\">\u0627\u0645\u0633\u0627\u0644</a>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".calendar-container{background-color:#fff;width:197px;height:290px;border:1px solid #6c63fe}.calendar-header{width:100%!important;height:40px;padding:10px;background-color:#6c63fe;display:flex;margin:0}.calendar-header-next{width:10%;margin-right:-4px}.calendar-header-next a{text-decoration:none;color:#fff}.calendar-header-prev{width:10%}.calendar-header-prev a{text-decoration:none;color:#fff}.calendar-header-title{width:80%;text-align:center;color:#fff}.calendar-header-title a{text-decoration:none;color:#fff}.calendar-body{width:100%!important;height:208px}.calendar-footer{width:100%!important;height:40px;padding:10px;background-color:#6c63fe;display:flex;justify-content:center;align-items:center}.calendar-footer a{color:#fff;text-decoration:none}.day-names,.day-picker-view{display:flex;flex-wrap:wrap}.day-names div{margin-right:6px;margin-top:3px;width:21px;display:flex;justify-content:center;color:#999;font-weight:700}.day-picker-day{margin-right:6px;width:21px;height:21px;display:flex;justify-content:center;cursor:pointer}.day-picker-day-today{background-color:#6c63fe;border-radius:20%;color:#fff}.day-picker-day-not-current-month{color:#999}.day-picker-day:hover{background-color:#e5e5fa;color:#000;border-radius:20%}.day-picker-today{margin-top:5px;width:100%!important;height:25px;padding:5px;background-color:#6c63fe;display:flex;justify-content:center;align-items:center;border-radius:20%}.day-picker-today a{color:#fff;text-decoration:none}.month-picker-view{display:flex;flex-wrap:wrap}.month-picker-view-month{margin-right:6px;margin-top:10px;width:55px;height:30px;display:flex;justify-content:center;align-items:center;cursor:pointer}.month-picker-view-month:hover{background-color:#6c63fe;color:#fff}.day-picker-tomonth{margin-top:5px;width:100%!important;height:35px;padding:5px;background-color:#6c63fe;display:flex;justify-content:center;align-items:center}.day-picker-tomonth a{text-decoration:none;color:#fff}.current-month,.current-year{background-color:#6c63fe;color:#fff}.year-picker-view{display:flex;flex-wrap:wrap}.year-picker-view-year{margin-right:6px;margin-top:10px;width:40px;height:29px;display:flex;justify-content:center;align-items:center;cursor:pointer}.year-picker-view-year:hover{background-color:#6c63fe;color:#fff}.year-picker-toyear{margin-top:5px;width:100%!important;height:30px;padding:5px;background-color:#6c63fe;display:flex;justify-content:center;align-items:center}.year-picker-toyear a{color:#fff;text-decoration:none}.year-picker-header-year-ranage{width:80%;text-align:center}.button-effect{cursor:pointer;padding-left:3px;padding-right:3px}.button-effect:hover{background-color:#fff;color:#0081dc!important}"]
            }] }
];
/** @nocollapse */
TaminPersianDatePickerComponent.ctorParameters = () => [];
TaminPersianDatePickerComponent.propDecorators = {
    dateChanged: [{ type: Output }],
    cancel: [{ type: Output }],
    currentDate: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TaminPersianDatePickerComponent.prototype.dayData;
    /** @type {?} */
    TaminPersianDatePickerComponent.prototype.yearData;
    /** @type {?} */
    TaminPersianDatePickerComponent.prototype.monthData;
    /** @type {?} */
    TaminPersianDatePickerComponent.prototype.viewState;
    /**
     * @type {?}
     * @private
     */
    TaminPersianDatePickerComponent.prototype._currentDate;
    /** @type {?} */
    TaminPersianDatePickerComponent.prototype.dateChanged;
    /** @type {?} */
    TaminPersianDatePickerComponent.prototype.cancel;
}
//# sourceMappingURL=data:application/json;base64,