/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, Input, ViewChild } from '@angular/core';
// import * as momentNs from 'jalali-moment';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FieldBaseComponent } from '../../../base/field-base.component';
import { TaminPersianDatePickerComponent } from '../../tamin-persian-date-picker/tamin-persian-date-picker.component';
import { PickerContainerComponent } from '../../containers/picker-container/picker-container.component';
import { TaminPersianDate } from '../../../tamin-persian-date';
// const moment = momentNs;
// declare let persianDate: any;
export class TaminFieldPersianDateComponent extends FieldBaseComponent {
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        // const tmp = moment(new Date(val));
        // const tmp = new persianDate(new Date(val));
        /** @type {?} */
        const tmp = TaminPersianDate.GregorianToJalali(new Date(val));
        // this.inputElement.nativeElement.value = tmp.toLocale('en').format('YYYY/MM/DD');
        this.inputElement.nativeElement.value = tmp;
    }
    /**
     * @protected
     * @param {?} val
     * @return {?}
     */
    getValue(val) {
        if (val.length === 8) {
            /** @type {?} */
            const yyyy = val.substr(0, 4);
            /** @type {?} */
            const mm = val.substr(4, 2);
            /** @type {?} */
            const dd = val.substr(6, 2);
            /** @type {?} */
            const input = [Number(yyyy), Number(mm), Number(dd), 0, 0, 0];
            // return (new persianDate(input)).toDate();
            return TaminPersianDate.JalaliToGregorian(Number(yyyy), Number(mm), Number(dd));
        }
        return '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (value === '' || value === undefined || value === null) {
                this.inputElement.nativeElement.value = '';
                return;
            }
            // const tmp = new persianDate(new Date(value));
            /** @type {?} */
            const tmp = TaminPersianDate.GregorianToJalali(new Date(value));
            // this.inputElement.nativeElement.value = tmp.toLocale('en').format('YYYY/MM/DD'); // tmp.locale('fa').format('YYYY/MM/DD');
            this.inputElement.nativeElement.value = tmp;
            /*
                  if (!this.maskRef) {
                    this._setInputMask();
                  }
                  this.maskRef.updateValue();
            */
            this.maskRef.updateValue();
            this.onChange(value);
        }), 0);
    }
    /**
     * @return {?}
     */
    initializeComponent() {
        this._setInputMask();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.picker.parent = this.inputElement;
            this.picker.button = this.iconElement;
        }), 0);
    }
    /**
     * @return {?}
     */
    get value() {
        // return moment.from(this.inputElement.nativeElement.value, 'fa', 'YYYY/MM/DD').toDate();
        /** @type {?} */
        const tmp = this.inputElement.nativeElement.value.split('/');
        /** @type {?} */
        const input = [Number(tmp[0]), Number(tmp[1]), Number(tmp[2]), 0, 0, 0];
        // return (new persianDate(input)).toDate();
        return (TaminPersianDate.JalaliToGregorian(Number(tmp[0]), Number(tmp[1]), Number(tmp[2])));
    }
    /**
     * @return {?}
     */
    onShowPicker() {
        if (this.control.disabled) {
            return;
        }
        this.inputElement.nativeElement.focus();
        this.picker.toggle();
    }
    /**
     * @return {?}
     */
    hidePopup() {
        // this.pickerVisibility = 'hidden';
        this.picker.hide();
        this.inputElement.nativeElement.readOnly = false;
    }
    /**
     * @return {?}
     */
    showPopup() {
        this.inputElement.nativeElement.readOnly = true;
        /** @type {?} */
        const val = this.inputElement.nativeElement.value;
        // const tmp = moment.from(val, 'fa', 'YYYY/MM/DD');
        /** @type {?} */
        const t = this.inputElement.nativeElement.value.split('/');
        /** @type {?} */
        const input = [Number(t[0]), Number(t[1]), Number(t[2]), 23, 0, 0];
        // const tmp = (new persianDate(input));
        /** @type {?} */
        const tmp = TaminPersianDate.JalaliToGregorian(Number(t[0]), Number(t[1]), Number(t[2]));
        // if (tmp.isValid()) {
        // this.persianDatePicker.currentDate = new Date(tmp.toDate());
        this.persianDatePicker.currentDate = tmp;
        // }
        this.persianDatePicker.setView();
        this.picker.show();
        // this._thePopper.update();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    onPickerChange(val) {
        if (val !== undefined) {
            this.inputElement.nativeElement.focus();
            this.value = val;
            this.onChange(this.value);
            this.hidePopup();
        }
    }
    /**
     * @private
     * @return {?}
     */
    _setInputMask() {
        this.maskRef = new IMask(this.inputElement.nativeElement, {
            mask: 'YYYY/MM/DD',
            blocks: {
                DD: {
                    mask: IMask.MaskedRange,
                    from: 1,
                    to: 31,
                    validate: (/**
                     * @param {?} value
                     * @param {?} masked
                     * @return {?}
                     */
                    function (value, masked) {
                        try {
                            /** @type {?} */
                            const tmp = masked.parent._value.split('/');
                            /** @type {?} */
                            const yyyy = tmp[0];
                            /** @type {?} */
                            const mm = tmp[1];
                            /** @type {?} */
                            const dd = value;
                            // let theDate;
                            // theDate = moment.from(`${yyyy}/${mm}/${dd}`, 'fa', 'YYYY/MM/DD');
                            // return theDate.isValid();
                            // const result = new persianDate([Number(yyyy), Number(mm), Number(dd), 0, 0, 0, 0]);
                            /** @type {?} */
                            const result = TaminPersianDate.JalaliToGregorian(Number(yyyy), Number(mm), Number(dd));
                            return result !== null;
                        }
                        catch (e) {
                            return false;
                        }
                    })
                },
                MM: {
                    mask: IMask.MaskedRange,
                    from: 1,
                    to: 12
                },
                YYYY: {
                    mask: IMask.MaskedRange,
                    from: 1000,
                    to: 9999
                },
            },
            placeholderLazy: false,
        });
    }
}
TaminFieldPersianDateComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-field-persian-date',
                template: "<div class=\"input-wrapper\">\n  <input\n    id=\"textbox\"\n    style=\"direction: ltr; padding-left: 35px;\"\n    type=\"text\"\n    [disabled]=\"control.disabled\"\n    class=\"tamin-form-control-input\"\n    [class.tamin-form-control-valid]=\"control.touched && control.valid\"\n    [class.tamin-form-control-invalid]=\"control.touched && !control.valid\"\n    #inputElement>\n  <span class=\"icon\" #icon>\n    <i\n      class=\"icon-calendar\"\n      style=\"font-size: 1.5em\"\n      (click)=\"onShowPicker()\"\n      [class.tamin-form-control-valid-icon]=\"control.touched && control.valid\"\n      [class.tamin-form-control-invalid-icon]=\"control.touched && !control.valid\"\n      #iconElement></i>\n  </span>\n</div>\n\n\n<tamin-picker-container #picker [adjustWidth]=\"false\" placement=\"bottom-start\">\n  <tamin-persian-date-picker\n    #persianDatePicker\n    (dateChanged)=\"onPickerChange($event)\"\n    (cancel)=\"hidePopup()\">\n  </tamin-persian-date-picker>\n</tamin-picker-container>\n\n<!--<div #picker class=\"picker-container\" style=\"visibility: hidden;margin-top: 5px;margin-bottom: 5px\"-->\n<!--[style.visibility]=\"pickerVisibility\">-->\n<!--</div>-->\n\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TaminFieldPersianDateComponent)),
                        multi: true
                    }
                ],
                styles: [".input-wrapper{position:relative}.icon{position:absolute;top:25%;left:5px;height:10px;margin-top:-5px;cursor:pointer}"]
            }] }
];
TaminFieldPersianDateComponent.propDecorators = {
    picker: [{ type: ViewChild, args: ['picker',] }],
    persianDatePicker: [{ type: ViewChild, args: ['persianDatePicker',] }],
    iconElement: [{ type: ViewChild, args: ['icon',] }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TaminFieldPersianDateComponent.prototype.picker;
    /** @type {?} */
    TaminFieldPersianDateComponent.prototype.persianDatePicker;
    /** @type {?} */
    TaminFieldPersianDateComponent.prototype.iconElement;
}
//# sourceMappingURL=data:application/json;base64,