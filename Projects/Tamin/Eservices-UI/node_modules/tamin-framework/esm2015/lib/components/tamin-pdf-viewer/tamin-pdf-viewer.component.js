/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { timeout } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { TaminModalComponent } from '../tamin-modal/tamin-modal.component';
export class TaminPdfViewerComponent {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.errorMessage = 'خطا در دریافت اطلاعات';
        this.beforeLoad = new EventEmitter();
        this.afterLoad = new EventEmitter();
    }
    /**
     * @param {?} url
     * @return {?}
     */
    getBlob(url) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.http.get(url, { responseType: 'blob' })
                .pipe(timeout(6000))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve(response)))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(error)));
        }));
    }
    /**
     * @param {?} url
     * @return {?}
     */
    open(url) {
        this.beforeLoad.emit();
        this.getBlob(url)
            .then((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.iframe.nativeElement.src = URL.createObjectURL(value);
            this.afterLoad.emit();
            this.theModal.show();
        }))
            .catch((/**
         * @param {?} reason
         * @return {?}
         */
        reason => {
            this.afterLoad.emit();
        }));
    }
    /**
     * @return {?}
     */
    close() {
        this.theModal.hide();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
TaminPdfViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-pdf-viewer',
                template: "<tamin-modal #theModal [title]=\"title\">\n  <iframe #iframe style=\"border:none; width:100%; height:80vh\"></iframe>\n  <ng-content></ng-content>\n</tamin-modal>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
TaminPdfViewerComponent.ctorParameters = () => [
    { type: HttpClient }
];
TaminPdfViewerComponent.propDecorators = {
    theModal: [{ type: ViewChild, args: ['theModal',] }],
    iframe: [{ type: ViewChild, args: ['iframe',] }],
    title: [{ type: Input }],
    errorMessage: [{ type: Input }],
    beforeLoad: [{ type: Output }],
    afterLoad: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    TaminPdfViewerComponent.prototype.theModal;
    /** @type {?} */
    TaminPdfViewerComponent.prototype.iframe;
    /** @type {?} */
    TaminPdfViewerComponent.prototype.title;
    /** @type {?} */
    TaminPdfViewerComponent.prototype.errorMessage;
    /** @type {?} */
    TaminPdfViewerComponent.prototype.beforeLoad;
    /** @type {?} */
    TaminPdfViewerComponent.prototype.afterLoad;
    /**
     * @type {?}
     * @private
     */
    TaminPdfViewerComponent.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    TaminPdfViewerComponent.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tcGRmLXZpZXdlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90YW1pbi1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YW1pbi1wZGYtdmlld2VyL3RhbWluLXBkZi12aWV3ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDcEcsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQU96RSxNQUFNLE9BQU8sdUJBQXVCOzs7O0lBV2xDLFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFOM0IsaUJBQVksR0FBRyx1QkFBdUIsQ0FBQztRQUN0QyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUNyQyxjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUs5QyxDQUFDOzs7OztJQUVELE9BQU8sQ0FBQyxHQUFXO1FBQ2pCLE9BQU8sSUFBSSxPQUFPOzs7OztRQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFDLFlBQVksRUFBRSxNQUFNLEVBQUMsQ0FBQztpQkFDdkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDbkIsU0FBUyxFQUFFO2lCQUNYLElBQUk7Ozs7WUFBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFDO2lCQUNyQyxLQUFLOzs7O1lBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDO1FBQ3JDLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxJQUFJLENBQUMsR0FBVztRQUNkLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7YUFDZCxJQUFJOzs7O1FBQUMsS0FBSyxDQUFDLEVBQUU7WUFDWixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMzRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsQ0FBQyxFQUFDO2FBQ0QsS0FBSzs7OztRQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN4QixDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsUUFBUTtJQUNSLENBQUM7OztZQS9DRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsZ0xBQWdEOzthQUVqRDs7OztZQVBPLFVBQVU7Ozt1QkFVZixTQUFTLFNBQUMsVUFBVTtxQkFDcEIsU0FBUyxTQUFDLFFBQVE7b0JBQ2xCLEtBQUs7MkJBQ0wsS0FBSzt5QkFDTCxNQUFNO3dCQUNOLE1BQU07Ozs7SUFMUCwyQ0FBcUQ7O0lBQ3JELHlDQUF3Qzs7SUFDeEMsd0NBQXVCOztJQUN2QiwrQ0FBZ0Q7O0lBQ2hELDZDQUErQzs7SUFDL0MsNENBQThDOzs7OztJQUU5QywyQ0FBc0I7Ozs7O0lBRVYsdUNBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0aW1lb3V0fSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7VGFtaW5Nb2RhbENvbXBvbmVudH0gZnJvbSAnLi4vdGFtaW4tbW9kYWwvdGFtaW4tbW9kYWwuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGFtaW4tcGRmLXZpZXdlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi90YW1pbi1wZGYtdmlld2VyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGFtaW4tcGRmLXZpZXdlci5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIFRhbWluUGRmVmlld2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBAVmlld0NoaWxkKCd0aGVNb2RhbCcpIHRoZU1vZGFsOiBUYW1pbk1vZGFsQ29tcG9uZW50O1xuICBAVmlld0NoaWxkKCdpZnJhbWUnKSBpZnJhbWU6IEVsZW1lbnRSZWY7XG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGVycm9yTWVzc2FnZSA9ICfYrti32Kcg2K/YsSDYr9ix24zYp9mB2Kog2KfYt9mE2KfYudin2KonO1xuICBAT3V0cHV0KCkgYmVmb3JlTG9hZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgYWZ0ZXJMb2FkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgcHJpdmF0ZSBfb3ZlcmxheTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xuICB9XG5cbiAgZ2V0QmxvYih1cmw6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPGFueT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5odHRwLmdldCh1cmwsIHtyZXNwb25zZVR5cGU6ICdibG9iJ30pXG4gICAgICAgIC5waXBlKHRpbWVvdXQoNjAwMCkpXG4gICAgICAgIC50b1Byb21pc2UoKVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc29sdmUocmVzcG9uc2UpKVxuICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiByZWplY3QoZXJyb3IpKTtcbiAgICB9KTtcbiAgfVxuXG4gIG9wZW4odXJsOiBzdHJpbmcpIHtcbiAgICB0aGlzLmJlZm9yZUxvYWQuZW1pdCgpO1xuICAgIHRoaXMuZ2V0QmxvYih1cmwpXG4gICAgICAudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgIHRoaXMuaWZyYW1lLm5hdGl2ZUVsZW1lbnQuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTCh2YWx1ZSk7XG4gICAgICAgIHRoaXMuYWZ0ZXJMb2FkLmVtaXQoKTtcbiAgICAgICAgdGhpcy50aGVNb2RhbC5zaG93KCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKHJlYXNvbiA9PiB7XG4gICAgICAgIHRoaXMuYWZ0ZXJMb2FkLmVtaXQoKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy50aGVNb2RhbC5oaWRlKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxufVxuIl19