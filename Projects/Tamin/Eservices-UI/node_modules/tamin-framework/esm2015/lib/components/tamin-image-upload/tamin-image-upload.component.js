/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
export class TaminImageUploadComponent {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.onImageUploaded = new EventEmitter();
        this.onImageDeleted = new EventEmitter();
        this.displayPreview = 'none';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set imageGuid(value) {
        if (!value) {
            return;
        }
        this._imageGuid = value;
        this.loadImage(this._imageGuid);
    }
    /**
     * @return {?}
     */
    get imageGuid() {
        return this._imageGuid;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} imageGuid
     * @return {?}
     */
    loadImage(imageGuid) {
        this._imageGuid = imageGuid;
        /** @type {?} */
        const url = `${this.restUrl}/${this.imageGuid}`;
        /** @type {?} */
        const image = this.previewImage.nativeElement;
        this.http.get(url)
            .toPromise()
            .then((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            image.src = `data:image/jpeg;base64,${((/** @type {?} */ (value))).data}`;
            this.displayPreview = 'unset';
        }))
            .catch((/**
         * @param {?} reason
         * @return {?}
         */
        reason => {
            console.error(reason);
        }));
    }
    // loadImage(imageGuid: string) {
    //   this.imageGuid = imageGuid;
    //   let url = `${this.restUrl}/${this.imageGuid}`;
    //   let headers = new HttpHeaders({ 'Content-Type': 'image/jpg' });
    //   let params = new HttpParams();
    //   params.append('responseType', 'blob');
    //   params = params.append('_dc', (new Date()).getTime().toString());
    //   let image = this.previewImage.nativeElement;
    //   this.http.get(url, { headers,  params }).subscribe(
    //       data => {
    //         //let blob = new Blob([data.arrayBuffer()], { type: data.headers.get('Content-Type') });
    //         let imageurl = window.URL.createObjectURL(data);
    //         image.src = imageurl;
    //         // image.src = 'data:image/jpeg;base64,' + data.arrayBuffer();
    //         // this.onImageUploaded.emit(this.imageGuid);
    //         this.displayPreview = "unset";
    //       },
    //       error => {
    //        // console.log(error);
    //         this.imageGuid = '';
    //       }
    //     );
    // }
    /*upload(event) {
        this.imageGuid = 'در حال بارگزاری';
        let inputfile = event.dataTransfer ? event.dataTransfer : event.target;
        let image = this.previewImage.nativeElement;
        let reader = new FileReader();
        reader.onload = function (e) {
          let src = (e.target as FileReader).result;
          image.src = src;
        };
        if (inputfile.files.length > 0) {
          let file: File = inputfile.files[0];
          let formData = new FormData();
          formData.append('file', file, file.name);
          //let headers = new HttpHeaders({'Content-Type': 'multipart/form-data'});
          this.http.post(this.restUrl, formData).subscribe(
            data => {
              reader.readAsDataURL(event.target.files[0]);
              this.imageGuid = data.toString();//.text();
              if (this.onImageUploaded)
                this.onImageUploaded.emit(this.imageGuid);
              this.displayPreview = 'unset';
            },
            error => {
              //console.log(error);
              this.imageGuid = '';
            }
          );
        }
      }*/
    /**
     * @param {?} event
     * @return {?}
     */
    upload(event) {
        this.imageGuid = 'در حال بارگذاری';
        /** @type {?} */
        const inputfile = event.dataTransfer ? event.dataTransfer : event.target;
        /** @type {?} */
        const image = this.previewImage.nativeElement;
        /** @type {?} */
        const reader = new FileReader();
        if (inputfile.files.length > 0) {
            /** @type {?} */
            const file = inputfile.files[0];
            reader.readAsDataURL(file);
            reader.onload = (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const formData = new FormData();
                formData.append('file', file, file.name);
                this.http.post(this.restUrl, formData).toPromise()
                    .then((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    /** @type {?} */
                    const src = reader.result;
                    image.src = src;
                    this.imageGuid = response['guid'];
                    if (this.onImageUploaded) {
                        this.onImageUploaded.emit(this.imageGuid);
                    }
                    this.displayPreview = 'unset';
                }))
                    .catch((/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    // console.log("Upload error:", error);
                    this.imageGuid = '';
                }));
            });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    uploadBase64(event) {
        this.imageGuid = 'در حال بارگذاری';
        /** @type {?} */
        const inputfile = event.dataTransfer ? event.dataTransfer : event.target;
        /** @type {?} */
        const image = this.previewImage.nativeElement;
        /** @type {?} */
        const reader = new FileReader();
        if (inputfile.files.length > 0) {
            /** @type {?} */
            const file = inputfile.files[0];
            reader.readAsDataURL(file);
            reader.onload = (/**
             * @return {?}
             */
            () => {
                // let headers = new HttpHeaders({'Content-Type': 'text/plain'});
                /** @type {?} */
                const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
                this.http.post(this.restUrl, ((/** @type {?} */ (reader.result))).split(',')[1], { headers: headers }).toPromise()
                    .then((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    /** @type {?} */
                    const src = reader.result;
                    image.src = src;
                    this.imageGuid = response['guid'];
                    if (this.onImageUploaded) {
                        this.onImageUploaded.emit(this.imageGuid);
                    }
                    this.displayPreview = 'unset';
                }))
                    .catch((/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    // console.log("Upload error:", error);
                    this.imageGuid = '';
                }));
            });
        }
    }
    /**
     * @return {?}
     */
    removeImage() {
        /** @type {?} */
        const url = `${this.restUrl}/${this.imageGuid}`;
        /** @type {?} */
        const image = this.previewImage.nativeElement;
        image.src = '';
        this.onImageDeleted.emit(this.imageGuid);
        this.imageGuid = '';
        this.http.delete(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
        }));
    }
}
TaminImageUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-field-image-upload',
                template: "<div class=\"divTable\" style=\"width: 100%;\">\n  <div class=\"divTableHeading\">\n\t\t<div class=\"divTableRow\">\n\t\t\t<div class=\"divTableHead\"  style=\"width: 128px; font-size: 0.8em\">\u067E\u06CC\u0634 \u0646\u0645\u0627\u06CC\u0634</div>\n\t\t\t<div class=\"divTableHead\"  style=\"font-size: 0.8em\">\u0639\u0645\u0644\u06CC\u0627\u062A</div>\n\t\t</div>\n\t</div>\n\t<div class=\"divTableBody\">\n\t\t<div class=\"divTableRow\">\n\t\t\t<div class=\"divTableCell\">\n\t\t\t\t\t<img #previewImage alt=\"\u0628\u062F\u0648\u0646 \u062A\u0635\u0648\u06CC\u0631\" [style.display]=\"displayPreview\" style=\"width: 128px;\" />\n      </div>\n\t\t\t<div class=\"divTableCell\">\n          <label attr.for=\"{{controlName}}\" class=\"inputfile\" style=\"width: 116px; white-space: nowrap;\">\n            <label class=\"icon-upload\" style=\"margin-left: 3px; vertical-align: middle;\"></label>\n            \u0628\u0627\u0631\u06AF\u0630\u0627\u0631\u06CC \u0641\u0627\u06CC\u0644\n\t\t\t\t\t</label>\n          <input type=\"file\" attr.id=\"{{controlName}}\" accept=\".jpg,.jpeg,.png\"/>\n          <br/>\n\t\t\t\t\t<button type=\"button\" class=\"button normal dark icon-trash\" (click)=\"removeImage()\">\u062D\u0630\u0641 \u062A\u0635\u0648\u06CC\u0631</button>\n          <br/>\n          <label style=\"font-size: 0.8em;\">\u0648\u0636\u0639\u06CC\u062A: {{imageGuid}} </label>\n      </div>\n\t\t</div>\n\t</div>\n  <!--<div class=\"divTableFoot\">\n\t\t<div class=\"divTableRow\">\n\t\t\t<div class=\"divTableCell\">&nbsp;</div>\n\t\t\t<div class=\"divTableCell\">&nbsp;</div>\n\t\t</div>\n\t</div>-->\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
TaminImageUploadComponent.ctorParameters = () => [
    { type: HttpClient }
];
TaminImageUploadComponent.propDecorators = {
    controlName: [{ type: Input }],
    onImageUploaded: [{ type: Output }],
    onImageDeleted: [{ type: Output }],
    previewImage: [{ type: ViewChild, args: ['previewImage',] }],
    restUrl: [{ type: Input }],
    imageGuid: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TaminImageUploadComponent.prototype.controlName;
    /**
     * @type {?}
     * @private
     */
    TaminImageUploadComponent.prototype._imageGuid;
    /** @type {?} */
    TaminImageUploadComponent.prototype.onImageUploaded;
    /** @type {?} */
    TaminImageUploadComponent.prototype.onImageDeleted;
    /** @type {?} */
    TaminImageUploadComponent.prototype.previewImage;
    /** @type {?} */
    TaminImageUploadComponent.prototype.restUrl;
    /** @type {?} */
    TaminImageUploadComponent.prototype.displayPreview;
    /**
     * @type {?}
     * @private
     */
    TaminImageUploadComponent.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,