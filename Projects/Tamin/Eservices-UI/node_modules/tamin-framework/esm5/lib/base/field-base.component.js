/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlContainer, FormBuilder } from '@angular/forms';
import { Component, ElementRef, Injector, Input, ViewChild } from '@angular/core';
import { fromEvent, Subscription } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { OverlayService } from '../services/overlay/overlay.service';
import { PersianNumberPipe } from '../pipes/persian-number.pipe';
import { TaminRestService } from '../services/tamin-rest-service/tamin-rest.service';
var FieldBaseComponent = /** @class */ (function () {
    function FieldBaseComponent(overlayService, restService, controlContainer, persianNumberPipe, injector, formBuilder) {
        this.overlayService = overlayService;
        this.restService = restService;
        this.controlContainer = controlContainer;
        this.persianNumberPipe = persianNumberPipe;
        this.injector = injector;
        this.formBuilder = formBuilder;
        this.subscription = new Subscription();
        this.onTouched = (/**
         * @return {?}
         */
        function () {
        });
        this.onChange = (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
        });
    }
    /**
     * @return {?}
     */
    FieldBaseComponent.prototype.getInputElementRef = /**
     * @return {?}
     */
    function () {
        return this.inputElement;
    };
    /**
     * @return {?}
     */
    FieldBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.control = this.controlContainer.control.get(this.formControlName);
        // this.initValueAccessor();
        // this.initializeComponent();
    };
    /**
     * @return {?}
     */
    FieldBaseComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initValueAccessor();
        this.initializeComponent();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FieldBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FieldBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FieldBaseComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var theValue = value == null ? '' : value.toString();
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.maskRef) {
                _this.maskRef.value = theValue;
            }
            else {
                _this.inputElement.nativeElement.value = theValue;
            }
        }));
        this.onChange(value);
    };
    /**
     * @return {?}
     */
    FieldBaseComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.overlay) {
            this.overlayService.hide(this.overlay);
        }
        this.subscription.unsubscribe();
    };
    /**
     * @protected
     * @param {?} val
     * @return {?}
     */
    FieldBaseComponent.prototype.getValue = /**
     * @protected
     * @param {?} val
     * @return {?}
     */
    function (val) {
        return val;
    };
    /**
     * @protected
     * @return {?}
     */
    FieldBaseComponent.prototype.initValueAccessor = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var keyups = fromEvent(this.inputElement.nativeElement, 'keyup').pipe(debounceTime(100), distinctUntilChanged());
        this.subscription.add(keyups.subscribe((/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            if (_this.maskRef) {
                _this.onChange(_this.getValue(_this.maskRef.unmaskedValue));
            }
            else {
                _this.onChange(_this.getValue(evt.target.value));
            }
        })));
        /** @type {?} */
        var focuses = fromEvent(this.inputElement.nativeElement, 'focus');
        this.subscription.add(focuses.subscribe((/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            _this.onTouched();
        })));
    };
    /**
     * @return {?}
     */
    FieldBaseComponent.prototype.startWaiting = /**
     * @return {?}
     */
    function () {
        this.overlay = this.overlayService.show(this.inputElement.nativeElement);
    };
    /**
     * @return {?}
     */
    FieldBaseComponent.prototype.stopWaiting = /**
     * @return {?}
     */
    function () {
        this.overlayService.hide(this.overlay);
    };
    /**
     * @protected
     * @return {?}
     */
    FieldBaseComponent.prototype.initializeComponent = /**
     * @protected
     * @return {?}
     */
    function () {
    };
    /**
     * @protected
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    FieldBaseComponent.prototype.deepFind = /**
     * @protected
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    function (obj, path) {
        /** @type {?} */
        var paths = path.split('.');
        /** @type {?} */
        var current = obj;
        /** @type {?} */
        var i;
        for (i = 0; i < paths.length; ++i) {
            if (current[paths[i]] === undefined) {
                return undefined;
            }
            else {
                current = current[paths[i]];
            }
        }
        return current;
    };
    FieldBaseComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-base-component',
                    template: ''
                }] }
    ];
    /** @nocollapse */
    FieldBaseComponent.ctorParameters = function () { return [
        { type: OverlayService },
        { type: TaminRestService },
        { type: ControlContainer },
        { type: PersianNumberPipe },
        { type: Injector },
        { type: FormBuilder }
    ]; };
    FieldBaseComponent.propDecorators = {
        inputElement: [{ type: ViewChild, args: ['inputElement',] }],
        formControlName: [{ type: Input }],
        placeHolder: [{ type: Input }],
        hint: [{ type: Input }]
    };
    return FieldBaseComponent;
}());
export { FieldBaseComponent };
if (false) {
    /** @type {?} */
    FieldBaseComponent.prototype.inputElement;
    /** @type {?} */
    FieldBaseComponent.prototype.formControlName;
    /** @type {?} */
    FieldBaseComponent.prototype.placeHolder;
    /** @type {?} */
    FieldBaseComponent.prototype.hint;
    /** @type {?} */
    FieldBaseComponent.prototype.control;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.maskRef;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.subscription;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.onTouched;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.onChange;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.overlay;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.overlayService;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.restService;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.controlContainer;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.persianNumberPipe;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.formBuilder;
}
//# sourceMappingURL=data:application/json;base64,