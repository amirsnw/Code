/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FieldBaseComponent } from '../../../base/field-base.component';
var TaminFieldNumberComponent = /** @class */ (function (_super) {
    tslib_1.__extends(TaminFieldNumberComponent, _super);
    function TaminFieldNumberComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.min = Number.MIN_SAFE_INTEGER;
        _this.max = Number.MAX_SAFE_INTEGER;
        _this.negativeNumberColor = 'red';
        return _this;
    }
    /**
     * @return {?}
     */
    TaminFieldNumberComponent.prototype.initializeComponent = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var me = this;
        this.maskRef = new IMask(this.inputElement.nativeElement, {
            mask: Number,
            thousandsSeparator: ',',
            min: me.min,
            max: me.max,
            radix: '.',
            scale: 2,
        });
    };
    TaminFieldNumberComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-field-number',
                    template: "<input\n  type=\"text\"\n  [disabled] = \"control.disabled\"\n  [attr.placeholder]=\"placeHolder\"\n  style=\"direction: ltr\"\n  class=\"tamin-form-control-input\"\n  [class.tamin-form-control-valid]=\"control.touched && control.valid\"\n  [class.tamin-form-control-invalid]=\"control.touched && !control.valid\"\n  [style.color]=\"inputElement?.nativeElement?.value < 0 ? negativeNumberColor : ''\"\n  #inputElement>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return TaminFieldNumberComponent; })),
                            multi: true
                        }
                    ],
                    styles: [""]
                }] }
    ];
    TaminFieldNumberComponent.propDecorators = {
        min: [{ type: Input }],
        max: [{ type: Input }],
        negativeNumberColor: [{ type: Input }]
    };
    return TaminFieldNumberComponent;
}(FieldBaseComponent));
export { TaminFieldNumberComponent };
if (false) {
    /** @type {?} */
    TaminFieldNumberComponent.prototype.min;
    /** @type {?} */
    TaminFieldNumberComponent.prototype.max;
    /** @type {?} */
    TaminFieldNumberComponent.prototype.negativeNumberColor;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tZmllbGQtbnVtYmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RhbWluLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2ZpZWxkcy90YW1pbi1maWVsZC1udW1iZXIvdGFtaW4tZmllbGQtbnVtYmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUl0RTtJQVkrQyxxREFBa0I7SUFaakU7UUFBQSxxRUE0QkM7UUFmVSxTQUFHLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1FBQzlCLFNBQUcsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7UUFDOUIseUJBQW1CLEdBQUcsS0FBSyxDQUFDOztJQWF2QyxDQUFDOzs7O0lBWEMsdURBQW1COzs7SUFBbkI7O1lBQ1EsRUFBRSxHQUFHLElBQUk7UUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFO1lBQ3hELElBQUksRUFBRSxNQUFNO1lBQ1osa0JBQWtCLEVBQUUsR0FBRztZQUN2QixHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUc7WUFDWCxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUc7WUFDWCxLQUFLLEVBQUUsR0FBRztZQUNWLEtBQUssRUFBRSxDQUFDO1NBQ1QsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBM0JGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixnYkFBa0Q7b0JBRWxELFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixXQUFXLEVBQUUsVUFBVTs7OzRCQUFDLGNBQU0sT0FBQSx5QkFBeUIsRUFBekIsQ0FBeUIsRUFBQzs0QkFDeEQsS0FBSyxFQUFFLElBQUk7eUJBQ1o7cUJBQ0Y7O2lCQUNGOzs7c0JBRUUsS0FBSztzQkFDTCxLQUFLO3NDQUNMLEtBQUs7O0lBYVIsZ0NBQUM7Q0FBQSxBQTVCRCxDQVkrQyxrQkFBa0IsR0FnQmhFO1NBaEJZLHlCQUF5Qjs7O0lBQ3BDLHdDQUF1Qzs7SUFDdkMsd0NBQXVDOztJQUN2Qyx3REFBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOR19WQUxVRV9BQ0NFU1NPUn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtGaWVsZEJhc2VDb21wb25lbnR9IGZyb20gJy4uLy4uLy4uL2Jhc2UvZmllbGQtYmFzZS5jb21wb25lbnQnO1xuXG5kZWNsYXJlIGxldCBJTWFzazogYW55O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0YW1pbi1maWVsZC1udW1iZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFtaW4tZmllbGQtbnVtYmVyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGFtaW4tZmllbGQtbnVtYmVyLmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGFtaW5GaWVsZE51bWJlckNvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBUYW1pbkZpZWxkTnVtYmVyQ29tcG9uZW50IGV4dGVuZHMgRmllbGRCYXNlQ29tcG9uZW50IHtcbiAgQElucHV0KCkgbWluID0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVI7XG4gIEBJbnB1dCgpIG1heCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICBASW5wdXQoKSBuZWdhdGl2ZU51bWJlckNvbG9yID0gJ3JlZCc7XG5cbiAgaW5pdGlhbGl6ZUNvbXBvbmVudCgpIHtcbiAgICBjb25zdCBtZSA9IHRoaXM7XG4gICAgdGhpcy5tYXNrUmVmID0gbmV3IElNYXNrKHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgIG1hc2s6IE51bWJlcixcbiAgICAgIHRob3VzYW5kc1NlcGFyYXRvcjogJywnLFxuICAgICAgbWluOiBtZS5taW4sXG4gICAgICBtYXg6IG1lLm1heCxcbiAgICAgIHJhZGl4OiAnLicsXG4gICAgICBzY2FsZTogMixcbiAgICB9KTtcbiAgfVxufVxuIl19