/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { Subscription } from 'rxjs';
import { TaminLazyLoadService } from '../../services/tamin-lazy-load/tamin-lazy-load.service';
import { OverlayService } from '../../services/overlay/overlay.service';
import { isNullOrUndefined } from 'util';
import { Guid } from '../../helpers/guid';
import { PersianNumberPipe } from '../../pipes/persian-number.pipe';
/* In Cordova, we need to install the https://github.com/caixiangsap/filechooser.git */
export class TaminImageGalleryComponent {
    /**
     * @param {?} taminLazyLoadService
     * @param {?} changeDetectorRef
     * @param {?} overlayService
     */
    constructor(taminLazyLoadService, changeDetectorRef, overlayService) {
        this.taminLazyLoadService = taminLazyLoadService;
        this.changeDetectorRef = changeDetectorRef;
        this.overlayService = overlayService;
        this.images = [];
        this.insertable = true;
        this.maxImageSize = 120;
        this.afterInsert = new EventEmitter();
        this.afterRemove = new EventEmitter();
        this.beforeInsert = new EventEmitter();
        this.beforeRemove = new EventEmitter();
        this._subscription = new Subscription();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} title
     * @param {?=} tag
     * @return {?}
     */
    selectImage(title, tag = null) {
        /** @type {?} */
        const me = this;
        this.defaultTitle = title;
        this.defaultTag = tag;
        if (window.hasOwnProperty('cordova')) {
            this.checkPermission().then((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                if (value) {
                    filechooser.open({ 'mime': 'image/*' }, (/**
                     * @param {?} data
                     * @return {?}
                     */
                    (data) => {
                        me.getBase64FromImageUrl(data.url);
                    }), (/**
                     * @param {?} reason
                     * @return {?}
                     */
                    (reason) => {
                        me.showAlert('پیام سیستم', 'خطا در بارگذاری فایل');
                    }));
                }
            })).catch((/**
             * @param {?} reason
             * @return {?}
             */
            reason => {
                me.showAlert('پیام سیستم', 'خطا در دسترسی به تصاویر ذخیره شده');
            }));
        }
        else {
            this.imageInput.nativeElement.click();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const me = this;
        this.imageInput.nativeElement.addEventListener('change', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.srcElement.files[0].size > me.maxImageSize * 1024) {
                /** @type {?} */
                const persianNumberPipe = new PersianNumberPipe();
                /** @type {?} */
                const message = persianNumberPipe.transform('اندازه فایل تصویر نمی تواند بیش از' + ' ' + me.maxImageSize.toString() + ' ' + 'کیلو بایت باشد.');
                me.showAlert('پیام سیستم', message);
                e.srcElement.value = '';
                return;
            }
            /** @type {?} */
            const reader = new FileReader();
            reader.readAsDataURL(e.srcElement.files[0]);
            reader.onload = (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                /** @type {?} */
                const model = new ImageModel();
                model.source = ((/** @type {?} */ (event.target))).result;
                model.title = this.defaultTitle;
                model.tag = this.defaultTag;
                model.id = model.id = Guid.create().toString();
                if (!this.images.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.source === model.source))) {
                    this.beforeInsert.emit();
                    me.images.push(model);
                    this.afterInsert.emit(model);
                    this.changeDetectorRef.detectChanges();
                    this._gallery.update();
                    this.imageInput.nativeElement.value = '';
                }
            });
        }));
        this._subscription.add(this.taminLazyLoadService.loadJs('assets/viewerjs/dist/viewer.js').subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this._subscription.add(this.taminLazyLoadService.loadCss('assets/viewerjs/dist/viewer.css').subscribe((/**
             * @param {?} value1
             * @return {?}
             */
            value1 => {
                this._gallery = new Viewer(this.imageContainer.nativeElement);
            })));
        })));
    }
    /**
     * @param {?} model
     * @return {?}
     */
    addImage(model) {
        if (isNullOrUndefined(model)) {
            alert('اطلاعات تصویر نادرست است.');
            return;
        }
        this.beforeInsert.emit(model);
        model.id = Guid.create().toString();
        this.images.push(model);
        this.afterInsert.emit(model);
        this.changeDetectorRef.detectChanges();
        this._gallery.update();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    removeImage(id) {
        this.showQuestionBox('پیام سیستم', 'آیا مطمئن هستید', (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const model = this.images.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id === id));
            this.beforeRemove.emit(model);
            this.images = this.images.filter((/**
             * @param {?} obj
             * @return {?}
             */
            obj => obj.id !== id));
            this.changeDetectorRef.detectChanges();
            this._gallery.update();
            this.afterRemove.emit(model);
        }), (/**
         * @return {?}
         */
        () => {
        }));
    }
    /**
     * @return {?}
     */
    startWaiting() {
        this._overlay = this.overlayService.show(this.host.nativeElement);
    }
    /**
     * @return {?}
     */
    stopWaiting() {
        this.overlayService.hide(this._overlay);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.stopWaiting();
        this._subscription.unsubscribe();
    }
    /**
     * @private
     * @param {?} title
     * @param {?} message
     * @param {?} yesCallback
     * @param {?} noCallback
     * @return {?}
     */
    showQuestionBox(title, message, yesCallback, noCallback) {
        alertify.confirm(title, message, yesCallback, noCallback)
            .set({
            labels: { ok: 'بلی', cancel: 'خیر' }
        });
    }
    /**
     * @private
     * @param {?} title
     * @param {?} message
     * @return {?}
     */
    showAlert(title, message) {
        alertify.alert(title, message);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    getBase64FromImageUrl(url) {
        /** @type {?} */
        const me = this;
        /** @type {?} */
        const img = new Image();
        img.setAttribute('crossOrigin', 'anonymous');
        img.onload = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            /** @type {?} */
            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            /** @type {?} */
            const dataURL = canvas.toDataURL('image/png');
            if (this.dataURLtoBlob(dataURL).size > me.maxImageSize * 1024) {
                /** @type {?} */
                const persianNumberPipe = new PersianNumberPipe();
                /** @type {?} */
                const message = persianNumberPipe.transform('اندازه فایل تصویر نمی تواند بیش از' + ' ' + me.maxImageSize.toString() + ' ' + 'کیلو بایت باشد.');
                me.showAlert('پیام سیستم', message);
                return;
            }
            /** @type {?} */
            const model = new ImageModel();
            model.source = dataURL;
            model.title = this.defaultTitle;
            model.tag = this.defaultTag;
            model.id = model.id = Guid.create().toString();
            if (!this.images.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.source === model.source))) {
                this.beforeInsert.emit();
                me.images.push(model);
                this.afterInsert.emit(model);
                this.changeDetectorRef.detectChanges();
                this._gallery.update();
                this.imageInput.nativeElement.value = '';
            }
            // alert(dataURL.replace(/^data:image\/(png|jpg);base64,/, ''));
        });
        img.src = url;
    }
    /**
     * @param {?} dataURL
     * @return {?}
     */
    dataURLtoBlob(dataURL) {
        /** @type {?} */
        const binary = atob(dataURL.split(',')[1]);
        // Create 8-bit unsigned array
        /** @type {?} */
        const array = [];
        for (let i = 0; i < binary.length; i++) {
            array.push(binary.charCodeAt(i));
        }
        return new Blob([new Uint8Array(array)], { type: 'image/png' });
    }
    /**
     * @return {?}
     */
    checkPermission() {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            // @ts-ignore
            /** @type {?} */
            const Permission = window.plugins.Permission;
            /** @type {?} */
            const permission = 'android.permission.WRITE_EXTERNAL_STORAGE';
            Permission.has(permission, (/**
             * @param {?} results
             * @return {?}
             */
            (results) => {
                if (!results[permission]) {
                    Permission.request(permission, (/**
                     * @param {?} result
                     * @return {?}
                     */
                    (result) => {
                        if (result[permission]) {
                            resolve(true);
                        }
                        else {
                            resolve(false);
                        }
                    }), (/**
                     * @param {?} reason
                     * @return {?}
                     */
                    (reason) => {
                        reject(reason);
                    }));
                }
                else {
                    resolve(true);
                }
            }), (/**
             * @param {?} reason
             * @return {?}
             */
            (reason) => {
                reject(reason);
            }));
        }));
    }
}
TaminImageGalleryComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-image-gallery',
                template: "<div #host>\n  <div class=\"image-container\" #imageContainer>\n    <ng-container *ngFor=\"let img of images\">\n\n      <div class=\"gallery-image-container\">\n        <div class=\"title\">{{img.title}}</div>\n        <img [attr.src]=\"img.source\" alt=\"\" class=\"img\">\n        <div class=\"footer\" *ngIf=\"img.removeable\">\n          <span><i class=\"icon-trash-empty remove\" (click)=\"removeImage(img.id)\"></i></span>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n  <input type=\"file\" name=\"name\" style=\"display: none;\" accept=\".jpg,.jpeg\" #imageInput/>\n</div>\n",
                styles: [".image-container{display:flex;flex-wrap:wrap;width:calc(100% - 10px);min-height:100px;border:1px solid #cacaca;margin:5px}.gallery-image-container{width:180px;margin:10px;border:1px solid #0b7dda;position:relative}.gallery-image-container .title{color:#fff;background-color:#0b7dda;width:100%;padding:3px;text-align:center}.gallery-image-container .img{padding:5px;width:100%;height:auto}.gallery-image-container .footer{color:#fff;background-color:#0b7dda;width:100%;padding:3px;text-align:center;position:absolute;bottom:0}.gallery-image-container .remove{cursor:pointer}"]
            }] }
];
/** @nocollapse */
TaminImageGalleryComponent.ctorParameters = () => [
    { type: TaminLazyLoadService },
    { type: ChangeDetectorRef },
    { type: OverlayService }
];
TaminImageGalleryComponent.propDecorators = {
    imageContainer: [{ type: ViewChild, args: ['imageContainer',] }],
    imageInput: [{ type: ViewChild, args: ['imageInput',] }],
    host: [{ type: ViewChild, args: ['host',] }],
    insertable: [{ type: Input }],
    maxImageSize: [{ type: Input }],
    afterInsert: [{ type: Output }],
    afterRemove: [{ type: Output }],
    beforeInsert: [{ type: Output }],
    beforeRemove: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    TaminImageGalleryComponent.prototype.imageContainer;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.imageInput;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.host;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.images;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype._gallery;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.insertable;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.maxImageSize;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.afterInsert;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.afterRemove;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.beforeInsert;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.beforeRemove;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype._subscription;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype.defaultTitle;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype.defaultTag;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype.taminLazyLoadService;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype.overlayService;
}
export class ImageModel {
    constructor() {
        this.removeable = true;
    }
}
if (false) {
    /** @type {?} */
    ImageModel.prototype.source;
    /** @type {?} */
    ImageModel.prototype.id;
    /** @type {?} */
    ImageModel.prototype.tag;
    /** @type {?} */
    ImageModel.prototype.title;
    /** @type {?} */
    ImageModel.prototype.removeable;
}
//# sourceMappingURL=data:application/json;base64,