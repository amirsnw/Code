/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { TaminLazyLoadService } from '../../services/tamin-lazy-load/tamin-lazy-load.service';
var TaminMapComponent = /** @class */ (function () {
    function TaminMapComponent(taminLazyLoadService) {
        this.taminLazyLoadService = taminLazyLoadService;
        this.js = 'http://www.openlayers.org/api/OpenLayers.js';
        this.width = '100%';
        this.height = '100%';
    }
    /**
     * @return {?}
     */
    TaminMapComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.id = (new Date()).getTime().toString();
    };
    /**
     * @return {?}
     */
    TaminMapComponent.prototype.load = /**
     * @return {?}
     */
    function () {
        return this.taminLazyLoadService.loadJs(this.js).toPromise();
    };
    /**
     * @param {?} latitude
     * @param {?} longitude
     * @param {?} zoom
     * @return {?}
     */
    TaminMapComponent.prototype.setLocation = /**
     * @param {?} latitude
     * @param {?} longitude
     * @param {?} zoom
     * @return {?}
     */
    function (latitude, longitude, zoom) {
        /** @type {?} */
        var map = new OpenLayers.Map(this.id);
        map.addLayer(new OpenLayers.Layer.OSM());
        /** @type {?} */
        var lonLat = new OpenLayers.LonLat(longitude, latitude)
            .transform(new OpenLayers.Projection('EPSG:4326'), map.getProjectionObject());
        /** @type {?} */
        var markers = new OpenLayers.Layer.Markers('Markers');
        markers.addMarker(new OpenLayers.Marker(lonLat));
        map.setCenter(lonLat, zoom);
    };
    TaminMapComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-map',
                    template: "<div [attr.id]=\"id\" [style.width]=\"width\" [style.height]=\"height\"></div>\n\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    TaminMapComponent.ctorParameters = function () { return [
        { type: TaminLazyLoadService }
    ]; };
    TaminMapComponent.propDecorators = {
        js: [{ type: Input }],
        css: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }]
    };
    return TaminMapComponent;
}());
export { TaminMapComponent };
if (false) {
    /** @type {?} */
    TaminMapComponent.prototype.js;
    /** @type {?} */
    TaminMapComponent.prototype.css;
    /** @type {?} */
    TaminMapComponent.prototype.width;
    /** @type {?} */
    TaminMapComponent.prototype.height;
    /** @type {?} */
    TaminMapComponent.prototype.id;
    /**
     * @type {?}
     * @private
     */
    TaminMapComponent.prototype.taminLazyLoadService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tbWFwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RhbWluLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RhbWluLW1hcC90YW1pbi1tYXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBUyxNQUFNLGVBQWUsQ0FBQztBQUN2RCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx3REFBd0QsQ0FBQztBQUk1RjtJQVlFLDJCQUFvQixvQkFBMEM7UUFBMUMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQU5yRCxPQUFFLEdBQUcsNkNBQTZDLENBQUM7UUFFbkQsVUFBSyxHQUFHLE1BQU0sQ0FBQztRQUNmLFdBQU0sR0FBRyxNQUFNLENBQUM7SUFJekIsQ0FBQzs7OztJQUVELG9DQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDOUMsQ0FBQzs7OztJQUVELGdDQUFJOzs7SUFBSjtRQUNFLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDL0QsQ0FBQzs7Ozs7OztJQUVELHVDQUFXOzs7Ozs7SUFBWCxVQUFZLFFBQWdCLEVBQUUsU0FBaUIsRUFBRSxJQUFZOztZQUNyRCxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDdkMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQzs7WUFDbkMsTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDO2FBQ3RELFNBQVMsQ0FDUixJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQ3RDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxDQUMxQjs7WUFDRyxPQUFPLEdBQUcsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFHdkQsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNqRCxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QixDQUFDOztnQkFwQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxXQUFXO29CQUNyQiw4RkFBeUM7O2lCQUUxQzs7OztnQkFSTyxvQkFBb0I7OztxQkFVekIsS0FBSztzQkFDTCxLQUFLO3dCQUNMLEtBQUs7eUJBQ0wsS0FBSzs7SUE0QlIsd0JBQUM7Q0FBQSxBQXJDRCxJQXFDQztTQWhDWSxpQkFBaUI7OztJQUM1QiwrQkFBNEQ7O0lBQzVELGdDQUFxQjs7SUFDckIsa0NBQXdCOztJQUN4QixtQ0FBeUI7O0lBQ3pCLCtCQUFROzs7OztJQUVJLGlEQUFrRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dCwgT25Jbml0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VGFtaW5MYXp5TG9hZFNlcnZpY2V9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RhbWluLWxhenktbG9hZC90YW1pbi1sYXp5LWxvYWQuc2VydmljZSc7XG5cbmRlY2xhcmUgdmFyIE9wZW5MYXllcnM6IGFueTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGFtaW4tbWFwJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RhbWluLW1hcC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RhbWluLW1hcC5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIFRhbWluTWFwQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkganMgPSAnaHR0cDovL3d3dy5vcGVubGF5ZXJzLm9yZy9hcGkvT3BlbkxheWVycy5qcyc7XG4gIEBJbnB1dCgpIGNzczogc3RyaW5nO1xuICBASW5wdXQoKSB3aWR0aCA9ICcxMDAlJztcbiAgQElucHV0KCkgaGVpZ2h0ID0gJzEwMCUnO1xuICBpZDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGFtaW5MYXp5TG9hZFNlcnZpY2U6IFRhbWluTGF6eUxvYWRTZXJ2aWNlKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmlkID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKS50b1N0cmluZygpO1xuICB9XG5cbiAgbG9hZCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLnRhbWluTGF6eUxvYWRTZXJ2aWNlLmxvYWRKcyh0aGlzLmpzKS50b1Byb21pc2UoKTtcbiAgfVxuXG4gIHNldExvY2F0aW9uKGxhdGl0dWRlOiBudW1iZXIsIGxvbmdpdHVkZTogbnVtYmVyLCB6b29tOiBudW1iZXIpIHtcbiAgICBjb25zdCBtYXAgPSBuZXcgT3BlbkxheWVycy5NYXAodGhpcy5pZCk7XG4gICAgbWFwLmFkZExheWVyKG5ldyBPcGVuTGF5ZXJzLkxheWVyLk9TTSgpKTtcbiAgICBjb25zdCBsb25MYXQgPSBuZXcgT3BlbkxheWVycy5Mb25MYXQobG9uZ2l0dWRlLCBsYXRpdHVkZSlcbiAgICAgIC50cmFuc2Zvcm0oXG4gICAgICAgIG5ldyBPcGVuTGF5ZXJzLlByb2plY3Rpb24oJ0VQU0c6NDMyNicpLFxuICAgICAgICBtYXAuZ2V0UHJvamVjdGlvbk9iamVjdCgpXG4gICAgICApO1xuICAgIGNvbnN0IG1hcmtlcnMgPSBuZXcgT3BlbkxheWVycy5MYXllci5NYXJrZXJzKCdNYXJrZXJzJyk7XG5cblxuICAgIG1hcmtlcnMuYWRkTWFya2VyKG5ldyBPcGVuTGF5ZXJzLk1hcmtlcihsb25MYXQpKTtcbiAgICBtYXAuc2V0Q2VudGVyKGxvbkxhdCwgem9vbSk7XG4gIH1cbn1cbiJdfQ==