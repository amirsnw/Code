/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
  Created by: k_kaviani
*/
import { Component, ContentChildren, QueryList } from '@angular/core';
import { TaminAccordionComponent } from '../tamin-accordion/tamin-accordion.component';
export class TaminAccordionGroupComponent {
    constructor() {
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._accordions = this.accordions;
        this.removeSubscriptions();
        this.addSubscriptions();
        this.accordions.changes.subscribe((/**
         * @param {?} rex
         * @return {?}
         */
        rex => {
            this._accordions = rex;
            this.removeSubscriptions();
            this.addSubscriptions();
        }));
    }
    /**
     * @return {?}
     */
    addSubscriptions() {
        this._accordions.forEach((/**
         * @param {?} a
         * @return {?}
         */
        a => {
            /** @type {?} */
            const subscription = a.toggleAccordion.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                this.toogleAccordion(a);
            }));
            this.subscriptions.push(subscription);
        }));
    }
    /**
     * @return {?}
     */
    removeSubscriptions() {
        this.subscriptions.forEach((/**
         * @param {?} sub
         * @return {?}
         */
        sub => {
            sub.unsubscribe();
        }));
    }
    /**
     * @param {?} accordion
     * @return {?}
     */
    toogleAccordion(accordion) {
        if (!accordion.active) {
            this.accordions.forEach((/**
             * @param {?} a
             * @return {?}
             */
            a => a.active = false));
        }
        // set active accordion
        accordion.active = !accordion.active;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeSubscriptions();
    }
}
TaminAccordionGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-accordion-group',
                template: "<!--\r\n  Created by: k_kaviani\r\n-->\r\n\r\n<ng-content></ng-content>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
TaminAccordionGroupComponent.ctorParameters = () => [];
TaminAccordionGroupComponent.propDecorators = {
    accordions: [{ type: ContentChildren, args: [TaminAccordionComponent,] }]
};
if (false) {
    /** @type {?} */
    TaminAccordionGroupComponent.prototype.accordions;
    /**
     * @type {?}
     * @private
     */
    TaminAccordionGroupComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    TaminAccordionGroupComponent.prototype._accordions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tYWNjb3JkaW9uLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RhbWluLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RhbWluLWFjY29yZGlvbi1ncm91cC90YW1pbi1hY2NvcmRpb24tZ3JvdXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFJQSxPQUFPLEVBQW1CLFNBQVMsRUFBRSxlQUFlLEVBQXFCLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6RyxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSw4Q0FBOEMsQ0FBQztBQU9yRixNQUFNLE9BQU8sNEJBQTRCO0lBT3ZDO1FBSlEsa0JBQWEsR0FBRyxFQUFFLENBQUM7SUFLM0IsQ0FBQzs7OztJQUVELFFBQVE7SUFDUixDQUFDOzs7O0lBRUQsa0JBQWtCO1FBRWhCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNuQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTOzs7O1FBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7WUFDdkIsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDMUIsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7O0lBRUQsZ0JBQWdCO1FBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUU7O2tCQUNyQixZQUFZLEdBQUcsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxTQUFTOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ25ELElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsQ0FBQyxFQUFDO1lBQ0YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDeEMsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7O0lBRUQsbUJBQW1CO1FBQ2pCLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTzs7OztRQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsZUFBZSxDQUFDLFNBQVM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7WUFDckIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLEtBQUssRUFBQyxDQUFDO1NBQ2hEO1FBQ0QsdUJBQXVCO1FBQ3ZCLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ3ZDLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0IsQ0FBQzs7O1lBeERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyx1RkFBcUQ7O2FBRXREOzs7Ozt5QkFHRSxlQUFlLFNBQUMsdUJBQXVCOzs7O0lBQXhDLGtEQUF5Rjs7Ozs7SUFDekYscURBQTJCOzs7OztJQUUzQixtREFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICBDcmVhdGVkIGJ5OiBrX2thdmlhbmlcbiovXG5cbmltcG9ydCB7QWZ0ZXJDb250ZW50SW5pdCwgQ29tcG9uZW50LCBDb250ZW50Q2hpbGRyZW4sIE9uRGVzdHJveSwgT25Jbml0LCBRdWVyeUxpc3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUYW1pbkFjY29yZGlvbkNvbXBvbmVudH0gZnJvbSAnLi4vdGFtaW4tYWNjb3JkaW9uL3RhbWluLWFjY29yZGlvbi5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0YW1pbi1hY2NvcmRpb24tZ3JvdXAnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFtaW4tYWNjb3JkaW9uLWdyb3VwLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGFtaW4tYWNjb3JkaW9uLWdyb3VwLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgVGFtaW5BY2NvcmRpb25Hcm91cENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlckNvbnRlbnRJbml0IHtcblxuICBAQ29udGVudENoaWxkcmVuKFRhbWluQWNjb3JkaW9uQ29tcG9uZW50KSBhY2NvcmRpb25zOiBRdWVyeUxpc3Q8VGFtaW5BY2NvcmRpb25Db21wb25lbnQ+O1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbnMgPSBbXTtcblxuICBwcml2YXRlIF9hY2NvcmRpb25zO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG5cbiAgICB0aGlzLl9hY2NvcmRpb25zID0gdGhpcy5hY2NvcmRpb25zO1xuICAgIHRoaXMucmVtb3ZlU3Vic2NyaXB0aW9ucygpO1xuICAgIHRoaXMuYWRkU3Vic2NyaXB0aW9ucygpO1xuXG4gICAgdGhpcy5hY2NvcmRpb25zLmNoYW5nZXMuc3Vic2NyaWJlKHJleCA9PiB7XG4gICAgICB0aGlzLl9hY2NvcmRpb25zID0gcmV4O1xuICAgICAgdGhpcy5yZW1vdmVTdWJzY3JpcHRpb25zKCk7XG4gICAgICB0aGlzLmFkZFN1YnNjcmlwdGlvbnMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFkZFN1YnNjcmlwdGlvbnMoKSB7XG4gICAgdGhpcy5fYWNjb3JkaW9ucy5mb3JFYWNoKGEgPT4ge1xuICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gYS50b2dnbGVBY2NvcmRpb24uc3Vic2NyaWJlKGUgPT4ge1xuICAgICAgICB0aGlzLnRvb2dsZUFjY29yZGlvbihhKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goc3Vic2NyaXB0aW9uKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbW92ZVN1YnNjcmlwdGlvbnMoKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goc3ViID0+IHtcbiAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgdG9vZ2xlQWNjb3JkaW9uKGFjY29yZGlvbikge1xuICAgIGlmICghYWNjb3JkaW9uLmFjdGl2ZSkge1xuICAgICAgdGhpcy5hY2NvcmRpb25zLmZvckVhY2goYSA9PiBhLmFjdGl2ZSA9IGZhbHNlKTtcbiAgICB9XG4gICAgLy8gc2V0IGFjdGl2ZSBhY2NvcmRpb25cbiAgICBhY2NvcmRpb24uYWN0aXZlID0gIWFjY29yZGlvbi5hY3RpdmU7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnJlbW92ZVN1YnNjcmlwdGlvbnMoKTtcbiAgfVxuXG59XG4iXX0=