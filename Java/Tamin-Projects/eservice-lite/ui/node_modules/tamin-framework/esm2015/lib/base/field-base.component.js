/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlContainer, FormBuilder } from '@angular/forms';
import { Component, ElementRef, Injector, Input, ViewChild } from '@angular/core';
import { fromEvent, Subscription } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { OverlayService } from '../services/overlay/overlay.service';
import { PersianNumberPipe } from '../pipes/persian-number.pipe';
import { TaminRestService } from '../services/tamin-rest-service/tamin-rest.service';
export class FieldBaseComponent {
    /**
     * @param {?} overlayService
     * @param {?} restService
     * @param {?} controlContainer
     * @param {?} persianNumberPipe
     * @param {?} injector
     * @param {?} formBuilder
     */
    constructor(overlayService, restService, controlContainer, persianNumberPipe, injector, formBuilder) {
        this.overlayService = overlayService;
        this.restService = restService;
        this.controlContainer = controlContainer;
        this.persianNumberPipe = persianNumberPipe;
        this.injector = injector;
        this.formBuilder = formBuilder;
        this.subscription = new Subscription();
        this.onTouched = (/**
         * @return {?}
         */
        () => {
        });
        this.onChange = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
        });
    }
    /**
     * @return {?}
     */
    getInputElementRef() {
        return this.inputElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.control = this.controlContainer.control.get(this.formControlName);
        // this.initValueAccessor();
        // this.initializeComponent();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initValueAccessor();
        this.initializeComponent();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        /** @type {?} */
        const theValue = value == null ? '' : value.toString();
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.maskRef) {
                this.maskRef.value = theValue;
            }
            else {
                this.inputElement.nativeElement.value = theValue;
            }
        }));
        this.onChange(value);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.overlay) {
            this.overlayService.hide(this.overlay);
        }
        this.subscription.unsubscribe();
    }
    /**
     * @protected
     * @param {?} val
     * @return {?}
     */
    getValue(val) {
        return val;
    }
    /**
     * @protected
     * @return {?}
     */
    initValueAccessor() {
        /** @type {?} */
        const keyups = fromEvent(this.inputElement.nativeElement, 'keyup').pipe(debounceTime(100), distinctUntilChanged());
        this.subscription.add(keyups.subscribe((/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            if (this.maskRef) {
                this.onChange(this.getValue(this.maskRef.unmaskedValue));
            }
            else {
                this.onChange(this.getValue(evt.target.value));
            }
        })));
        /** @type {?} */
        const focuses = fromEvent(this.inputElement.nativeElement, 'focus');
        this.subscription.add(focuses.subscribe((/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            this.onTouched();
        })));
    }
    /**
     * @return {?}
     */
    startWaiting() {
        this.overlay = this.overlayService.show(this.inputElement.nativeElement);
    }
    /**
     * @return {?}
     */
    stopWaiting() {
        this.overlayService.hide(this.overlay);
    }
    /**
     * @protected
     * @return {?}
     */
    initializeComponent() {
    }
    /**
     * @protected
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    deepFind(obj, path) {
        /** @type {?} */
        const paths = path.split('.');
        /** @type {?} */
        let current = obj;
        /** @type {?} */
        let i;
        for (i = 0; i < paths.length; ++i) {
            if (current[paths[i]] === undefined) {
                return undefined;
            }
            else {
                current = current[paths[i]];
            }
        }
        return current;
    }
}
FieldBaseComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-base-component',
                template: ''
            }] }
];
/** @nocollapse */
FieldBaseComponent.ctorParameters = () => [
    { type: OverlayService },
    { type: TaminRestService },
    { type: ControlContainer },
    { type: PersianNumberPipe },
    { type: Injector },
    { type: FormBuilder }
];
FieldBaseComponent.propDecorators = {
    inputElement: [{ type: ViewChild, args: ['inputElement',] }],
    formControlName: [{ type: Input }],
    placeHolder: [{ type: Input }],
    hint: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FieldBaseComponent.prototype.inputElement;
    /** @type {?} */
    FieldBaseComponent.prototype.formControlName;
    /** @type {?} */
    FieldBaseComponent.prototype.placeHolder;
    /** @type {?} */
    FieldBaseComponent.prototype.hint;
    /** @type {?} */
    FieldBaseComponent.prototype.control;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.maskRef;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.subscription;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.onTouched;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.onChange;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.overlay;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.overlayService;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.restService;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.controlContainer;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.persianNumberPipe;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    FieldBaseComponent.prototype.formBuilder;
}
//# sourceMappingURL=data:application/json;base64,