/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import { ControlContainer, NG_VALUE_ACCESSOR } from '@angular/forms';
export class TaminFieldValidatorComponent {
    /**
     * @param {?} controlContainer
     */
    constructor(controlContainer) {
        this.controlContainer = controlContainer;
    }
    /**
     * @param {?} errorMessages
     * @return {?}
     */
    set errorMessages(errorMessages) {
        // errorMessages.forEach((item) => {
        //   const temp = (<ValidationMessageModel[]>this._errorMessages).find(c => c.name === item.name);
        //   if (!temp) {
        //     this._errorMessages.push(item);
        //   } else {
        //     temp.value = item.value;
        //   }
        // });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.configureErrorMessages();
        this._control = this.controlContainer.control.get(this.formControlName);
    }
    /**
     * @return {?}
     */
    get control() {
        return this._control;
    }
    /**
     * @return {?}
     */
    get errorMessage() {
        if (!this._control.valid) {
            for (const propertyName in this._control.errors) {
                if (this._control.errors.hasOwnProperty(propertyName)) {
                    return ((/** @type {?} */ (this._errorMessages))).find((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => p.name === propertyName)).value;
                }
            }
        }
        return '';
    }
    /**
     * @return {?}
     */
    configureErrorMessages() {
        this._errorMessages = [
            { name: 'required', value: 'مقدار فیلد الزامی می باشد' },
            { name: 'pattern', value: 'الگوی مقدار صحیح نمی باشد' },
            { name: 'email', value: 'ایمیل نادرست است' },
            { name: 'minlength', value: 'مقدار فیلد از حد مجاز کمتر است' },
            { name: 'maxlength', value: 'مقدار فیلد از حد مجاز بیشتر است' },
            { name: 'min', value: 'حداقل مقدار رعایت نشده است' },
            { name: 'max', value: 'حداکثر مقدار رعایت نشده است' },
            { name: 'requiredTrue', value: '' },
            { name: 'nullValidator', value: '' },
            { name: 'compose', value: '' },
            { name: 'composeAsync', value: '' },
            { name: 'requiredNumber', value: 'مقدار فیلد الزامی می باشد' },
            { name: 'persianDate', value: 'تاریخ نادرست است' },
            { name: 'nationalId', value: 'کد ملی نادرست است' }
        ];
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
    }
}
TaminFieldValidatorComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-field-validator',
                template: "<span *ngIf=\"control?.touched && !control?.valid\" class=\"tamin-form-control-error\">\n  <span style=\"color: #b00020;\">{{errorMessage}}</span>\n</span>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TaminFieldValidatorComponent)),
                        multi: true
                    }
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
TaminFieldValidatorComponent.ctorParameters = () => [
    { type: ControlContainer }
];
TaminFieldValidatorComponent.propDecorators = {
    formControlName: [{ type: Input }],
    errorMessages: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TaminFieldValidatorComponent.prototype._errorMessages;
    /** @type {?} */
    TaminFieldValidatorComponent.prototype.formControlName;
    /** @type {?} */
    TaminFieldValidatorComponent.prototype._control;
    /**
     * @type {?}
     * @private
     */
    TaminFieldValidatorComponent.prototype.controlContainer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tZmllbGQtdmFsaWRhdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RhbWluLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2ZpZWxkcy90YW1pbi1maWVsZC12YWxpZGF0b3IvdGFtaW4tZmllbGQtdmFsaWRhdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBa0IsZ0JBQWdCLEVBQXdCLGlCQUFpQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFnQjFHLE1BQU0sT0FBTyw0QkFBNEI7Ozs7SUFrQnZDLFlBQW9CLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQ3RELENBQUM7Ozs7O0lBZkQsSUFBYSxhQUFhLENBQUMsYUFBa0Q7UUFFM0Usb0NBQW9DO1FBQ3BDLGtHQUFrRztRQUNsRyxpQkFBaUI7UUFDakIsc0NBQXNDO1FBQ3RDLGFBQWE7UUFDYiwrQkFBK0I7UUFDL0IsTUFBTTtRQUNOLE1BQU07SUFDUixDQUFDOzs7O0lBT0QsUUFBUTtRQUNOLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQzlCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7Ozs7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQzs7OztJQUdELElBQUksWUFBWTtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtZQUN4QixLQUFLLE1BQU0sWUFBWSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO2dCQUMvQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsRUFBRTtvQkFDckQsT0FBTyxDQUFDLG1CQUEwQixJQUFJLENBQUMsY0FBYyxFQUFBLENBQUMsQ0FBQyxJQUFJOzs7O29CQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFZLEVBQUMsQ0FBQyxLQUFLLENBQUM7aUJBQ2pHO2FBQ0Y7U0FDRjtRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQzs7OztJQUVELHNCQUFzQjtRQUNwQixJQUFJLENBQUMsY0FBYyxHQUFHO1lBQ3BCLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsMkJBQTJCLEVBQUM7WUFDdEQsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSwyQkFBMkIsRUFBQztZQUNyRCxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFDO1lBQzFDLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsZ0NBQWdDLEVBQUM7WUFDNUQsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxpQ0FBaUMsRUFBQztZQUM3RCxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLDRCQUE0QixFQUFDO1lBQ2xELEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsNkJBQTZCLEVBQUM7WUFDbkQsRUFBQyxJQUFJLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUM7WUFDakMsRUFBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUM7WUFDbEMsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUM7WUFDNUIsRUFBQyxJQUFJLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUM7WUFDakMsRUFBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLDJCQUEyQixFQUFDO1lBQzVELEVBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUM7WUFDaEQsRUFBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxtQkFBbUIsRUFBQztTQUNqRCxDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFHRCxnQkFBZ0IsQ0FBQyxFQUFPO0lBQ3hCLENBQUM7Ozs7O0lBRUQsaUJBQWlCLENBQUMsRUFBTztJQUN6QixDQUFDOzs7OztJQUVELGdCQUFnQixDQUFDLFVBQW1CO0lBQ3BDLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLEdBQVE7SUFDbkIsQ0FBQzs7O1lBckZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyx5S0FBcUQ7Z0JBRXJELFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLDRCQUE0QixFQUFDO3dCQUMzRCxLQUFLLEVBQUUsSUFBSTtxQkFDWjtpQkFDRjs7YUFFRjs7OztZQWZ3QixnQkFBZ0I7Ozs4QkFrQnRDLEtBQUs7NEJBRUwsS0FBSzs7OztJQUhOLHNEQUFvRDs7SUFDcEQsdURBQWlDOztJQWNqQyxnREFBMEI7Ozs7O0lBRWQsd0RBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBYnN0cmFjdENvbnRyb2wsIENvbnRyb2xDb250YWluZXIsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtWYWxpZGF0aW9uTWVzc2FnZU1vZGVsfSBmcm9tICcuLi8uLi8uLi9tb2RlbHMvdmFsaWRhdGlvbi1tZXNzYWdlLW1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGFtaW4tZmllbGQtdmFsaWRhdG9yJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RhbWluLWZpZWxkLXZhbGlkYXRvci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RhbWluLWZpZWxkLXZhbGlkYXRvci5jb21wb25lbnQuc2NzcyddLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRhbWluRmllbGRWYWxpZGF0b3JDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cblxufSlcbmV4cG9ydCBjbGFzcyBUYW1pbkZpZWxkVmFsaWRhdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIF9lcnJvck1lc3NhZ2VzOiBWYWxpZGF0aW9uTWVzc2FnZU1vZGVsW10gfCBvYmplY3RbXTtcbiAgQElucHV0KCkgZm9ybUNvbnRyb2xOYW1lOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgc2V0IGVycm9yTWVzc2FnZXMoZXJyb3JNZXNzYWdlczogVmFsaWRhdGlvbk1lc3NhZ2VNb2RlbFtdIHwgb2JqZWN0W10pIHtcblxuICAgIC8vIGVycm9yTWVzc2FnZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIC8vICAgY29uc3QgdGVtcCA9ICg8VmFsaWRhdGlvbk1lc3NhZ2VNb2RlbFtdPnRoaXMuX2Vycm9yTWVzc2FnZXMpLmZpbmQoYyA9PiBjLm5hbWUgPT09IGl0ZW0ubmFtZSk7XG4gICAgLy8gICBpZiAoIXRlbXApIHtcbiAgICAvLyAgICAgdGhpcy5fZXJyb3JNZXNzYWdlcy5wdXNoKGl0ZW0pO1xuICAgIC8vICAgfSBlbHNlIHtcbiAgICAvLyAgICAgdGVtcC52YWx1ZSA9IGl0ZW0udmFsdWU7XG4gICAgLy8gICB9XG4gICAgLy8gfSk7XG4gIH1cblxuICBfY29udHJvbDogQWJzdHJhY3RDb250cm9sO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udHJvbENvbnRhaW5lcjogQ29udHJvbENvbnRhaW5lcikge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jb25maWd1cmVFcnJvck1lc3NhZ2VzKCk7XG4gICAgdGhpcy5fY29udHJvbCA9IHRoaXMuY29udHJvbENvbnRhaW5lci5jb250cm9sLmdldCh0aGlzLmZvcm1Db250cm9sTmFtZSk7XG4gIH1cblxuICBnZXQgY29udHJvbCgpOiBBYnN0cmFjdENvbnRyb2wge1xuICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xuICB9XG5cblxuICBnZXQgZXJyb3JNZXNzYWdlKCk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLl9jb250cm9sLnZhbGlkKSB7XG4gICAgICBmb3IgKGNvbnN0IHByb3BlcnR5TmFtZSBpbiB0aGlzLl9jb250cm9sLmVycm9ycykge1xuICAgICAgICBpZiAodGhpcy5fY29udHJvbC5lcnJvcnMuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiAoPFZhbGlkYXRpb25NZXNzYWdlTW9kZWxbXT50aGlzLl9lcnJvck1lc3NhZ2VzKS5maW5kKHAgPT4gcC5uYW1lID09PSBwcm9wZXJ0eU5hbWUpLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGNvbmZpZ3VyZUVycm9yTWVzc2FnZXMoKSB7XG4gICAgdGhpcy5fZXJyb3JNZXNzYWdlcyA9IFtcbiAgICAgIHtuYW1lOiAncmVxdWlyZWQnLCB2YWx1ZTogJ9mF2YLYr9in2LEg2YHbjNmE2K8g2KfZhNiy2KfZhduMINmF24wg2KjYp9i02K8nfSxcbiAgICAgIHtuYW1lOiAncGF0dGVybicsIHZhbHVlOiAn2KfZhNqv2YjbjCDZhdmC2K/Yp9ixINi12K3bjNitINmG2YXbjCDYqNin2LTYryd9LFxuICAgICAge25hbWU6ICdlbWFpbCcsIHZhbHVlOiAn2KfbjNmF24zZhCDZhtin2K/Ysdiz2Kog2KfYs9iqJ30sXG4gICAgICB7bmFtZTogJ21pbmxlbmd0aCcsIHZhbHVlOiAn2YXZgtiv2KfYsSDZgduM2YTYryDYp9iyINit2K8g2YXYrNin2LIg2qnZhdiq2LEg2KfYs9iqJ30sXG4gICAgICB7bmFtZTogJ21heGxlbmd0aCcsIHZhbHVlOiAn2YXZgtiv2KfYsSDZgduM2YTYryDYp9iyINit2K8g2YXYrNin2LIg2KjbjNi02KrYsSDYp9iz2KonfSxcbiAgICAgIHtuYW1lOiAnbWluJywgdmFsdWU6ICfYrdiv2KfZgtmEINmF2YLYr9in2LEg2LHYudin24zYqiDZhti02K/ZhyDYp9iz2KonfSxcbiAgICAgIHtuYW1lOiAnbWF4JywgdmFsdWU6ICfYrdiv2Kfaqdir2LEg2YXZgtiv2KfYsSDYsdi52KfbjNiqINmG2LTYr9mHINin2LPYqid9LFxuICAgICAge25hbWU6ICdyZXF1aXJlZFRydWUnLCB2YWx1ZTogJyd9LFxuICAgICAge25hbWU6ICdudWxsVmFsaWRhdG9yJywgdmFsdWU6ICcnfSxcbiAgICAgIHtuYW1lOiAnY29tcG9zZScsIHZhbHVlOiAnJ30sXG4gICAgICB7bmFtZTogJ2NvbXBvc2VBc3luYycsIHZhbHVlOiAnJ30sXG4gICAgICB7bmFtZTogJ3JlcXVpcmVkTnVtYmVyJywgdmFsdWU6ICfZhdmC2K/Yp9ixINmB24zZhNivINin2YTYstin2YXbjCDZhduMINio2KfYtNivJ30sXG4gICAgICB7bmFtZTogJ3BlcnNpYW5EYXRlJywgdmFsdWU6ICfYqtin2LHbjNiuINmG2KfYr9ix2LPYqiDYp9iz2KonfSxcbiAgICAgIHtuYW1lOiAnbmF0aW9uYWxJZCcsIHZhbHVlOiAn2qnYryDZhdmE24wg2YbYp9iv2LHYs9iqINin2LPYqid9XG4gICAgXTtcbiAgfVxuXG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7XG4gIH1cblxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgfVxuXG4gIHdyaXRlVmFsdWUob2JqOiBhbnkpOiB2b2lkIHtcbiAgfVxufVxuIl19