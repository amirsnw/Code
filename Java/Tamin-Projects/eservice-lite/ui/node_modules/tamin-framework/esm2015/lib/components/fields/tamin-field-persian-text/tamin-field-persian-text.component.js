/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FieldBaseComponent } from '../../../base/field-base.component';
export class TaminFieldPersianTextComponent extends FieldBaseComponent {
    constructor() {
        super(...arguments);
        this.maxLength = Number.MAX_SAFE_INTEGER;
    }
    /**
     * @return {?}
     */
    initializeComponent() {
        this.maskRef = new IMask(this.inputElement.nativeElement, {
            mask: /^[\u0600-\u06FF\s]+$/,
        });
    }
}
TaminFieldPersianTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-field-persian-text',
                template: "<input\n  type=\"text\"\n  class=\"tamin-form-control-input\"\n  [disabled] = \"control.disabled\"\n  [class.tamin-form-control-valid]=\"control.touched && control.valid\"\n  [class.tamin-form-control-invalid]=\"control.touched && !control.valid\"\n  [attr.maxLength] = \"maxLength\"\n  [attr.placeholder] =\"placeHolder\"\n  #inputElement>\n<span>{{hint}}</span>\n\n\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TaminFieldPersianTextComponent)),
                        multi: true
                    }
                ],
                styles: [""]
            }] }
];
TaminFieldPersianTextComponent.propDecorators = {
    maxLength: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TaminFieldPersianTextComponent.prototype.maxLength;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tZmllbGQtcGVyc2lhbi10ZXh0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RhbWluLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2ZpZWxkcy90YW1pbi1maWVsZC1wZXJzaWFuLXRleHQvdGFtaW4tZmllbGQtcGVyc2lhbi10ZXh0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBZ0J0RSxNQUFNLE9BQU8sOEJBQWdDLFNBQVEsa0JBQWtCO0lBYnZFOztRQWVXLGNBQVMsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7SUFRL0MsQ0FBQzs7OztJQVBDLG1CQUFtQjtRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFO1lBQ3hELElBQUksRUFBRSxzQkFBc0I7U0FDN0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBcEJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsMEJBQTBCO2dCQUNwQyw2WEFBd0Q7Z0JBRXhELFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLDhCQUE4QixFQUFDO3dCQUM3RCxLQUFLLEVBQUUsSUFBSTtxQkFDWjtpQkFDRjs7YUFFRjs7O3dCQUdFLEtBQUs7Ozs7SUFBTixtREFBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05HX1ZBTFVFX0FDQ0VTU09SfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0ZpZWxkQmFzZUNvbXBvbmVudH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9maWVsZC1iYXNlLmNvbXBvbmVudCc7XG5kZWNsYXJlIGxldCBJTWFzazogYW55O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0YW1pbi1maWVsZC1wZXJzaWFuLXRleHQnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFtaW4tZmllbGQtcGVyc2lhbi10ZXh0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGFtaW4tZmllbGQtcGVyc2lhbi10ZXh0LmNvbXBvbmVudC5jc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUYW1pbkZpZWxkUGVyc2lhblRleHRDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cblxufSlcbmV4cG9ydCBjbGFzcyBUYW1pbkZpZWxkUGVyc2lhblRleHRDb21wb25lbnQgIGV4dGVuZHMgRmllbGRCYXNlQ29tcG9uZW50IHtcblxuICBASW5wdXQoKSBtYXhMZW5ndGggPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgaW5pdGlhbGl6ZUNvbXBvbmVudCgpIHtcbiAgICB0aGlzLm1hc2tSZWYgPSBuZXcgSU1hc2sodGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudCwge1xuICAgICAgbWFzazogL15bXFx1MDYwMC1cXHUwNkZGXFxzXSskLyxcbiAgICB9KTtcbiAgfVxuXG5cbn1cbiJdfQ==