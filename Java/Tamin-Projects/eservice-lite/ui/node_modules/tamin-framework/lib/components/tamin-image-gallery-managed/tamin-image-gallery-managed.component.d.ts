import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { TaminLazyLoadService } from '../../services/tamin-lazy-load/tamin-lazy-load.service';
import { OverlayService } from '../../services/overlay/overlay.service';
import { HttpClient } from '@angular/common/http';
export declare class TaminImageGalleryManagedComponent implements OnInit, AfterViewInit, OnDestroy {
    private taminLazyLoadService;
    private changeDetectorRef;
    private overlayService;
    private http;
    private defaultImage;
    private _subscription;
    private _overlay;
    private defaultTitle;
    private defaultTag;
    private _gallery;
    private _queue;
    images: Array<ImageModelManaged>;
    insertable: boolean;
    maxImageSize: number;
    saveUrl: string;
    getUrl: string;
    afterInsert: EventEmitter<ImageModelManaged>;
    afterRemove: EventEmitter<ImageModelManaged>;
    beforeInsert: EventEmitter<{}>;
    beforeRemove: EventEmitter<ImageModelManaged>;
    imageContainer: ElementRef;
    imageInput: ElementRef;
    host: ElementRef;
    constructor(taminLazyLoadService: TaminLazyLoadService, changeDetectorRef: ChangeDetectorRef, overlayService: OverlayService, http: HttpClient);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    selectImage(title: any, tag?: any): void;
    areAllImagesUploaded(): boolean;
    addImage(model: ImageModelManaged): void;
    removeImage(id: string): void;
    startWaiting(): void;
    stopWaiting(): void;
    ngOnDestroy(): void;
    private showQuestionBox;
    private showAlert;
    private saveImage;
    private saveImage2;
    retrySaveImage(img: ImageModelManaged): void;
    cancelSaveImage(img: ImageModelManaged): void;
    clearImages(): void;
    downloadImage(guid: string, title: string, type: string, id: string, removeable?: boolean, tag?: any): void;
    private addToQueue;
    private removefromQueue;
    private dataURLtoFile;
    private getBase64FromImageUrl;
    dataURLtoBlob(dataURL: any): Blob;
    checkPermission(): Promise<boolean>;
}
export declare class ImageModelManaged {
    source: any;
    internalId: string;
    tag: any;
    file: File;
    title: string;
    removeable: boolean;
    guid: string;
    loading: boolean;
    loadFailed: boolean;
    internalTemp: any;
}
