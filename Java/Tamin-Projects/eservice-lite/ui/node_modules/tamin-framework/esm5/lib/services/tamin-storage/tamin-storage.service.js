/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { CookieService } from 'ngx-cookie-service';
import { DeviceDetectorService } from 'ngx-device-detector';
import * as i0 from "@angular/core";
import * as i1 from "ngx-cookie-service";
import * as i2 from "ngx-device-detector";
var TaminStorageService = /** @class */ (function () {
    function TaminStorageService(cookieService, deviceService) {
        this.cookieService = cookieService;
        this.deviceService = deviceService;
        this.memoryStorage = [];
        if (deviceService.os === 'iPhone' || deviceService.os === 'iPad' || deviceService.browser === 'safari' || deviceService.browser === 'Safari') {
            this.policy = 'cookie';
            return;
        }
        if (this.doLocalStorageWork()) {
            this.policy = 'local-storage';
        }
        else if (this.doCookieWork()) {
            this.policy = 'cookie';
        }
        else {
            this.policy = 'memory';
        }
    }
    /**
     * @private
     * @return {?}
     */
    TaminStorageService.prototype.doLocalStorageWork = /**
     * @private
     * @return {?}
     */
    function () {
        try {
            localStorage.setItem('dummy', 'dummy');
            if (localStorage.getItem('dummy') === 'dummy') {
                localStorage.removeItem('dummy');
                return true;
            }
            else {
                localStorage.removeItem('dummy');
                return false;
            }
        }
        catch (_a) {
            return false;
        }
    };
    /**
     * @private
     * @return {?}
     */
    TaminStorageService.prototype.doCookieWork = /**
     * @private
     * @return {?}
     */
    function () {
        try {
            this.cookieService.set('dummy', 'dummy', null, null, null, true, 'Strict');
            if (this.cookieService.get('dummy') === 'dummy') {
                this.cookieService.delete('dummy');
                return true;
            }
            else {
                this.cookieService.delete('dummy');
                return false;
            }
        }
        catch (_a) {
            return false;
        }
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    TaminStorageService.prototype.set = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        switch (this.policy) {
            case 'local-storage':
                localStorage.setItem(key, value);
                break;
            case 'cookie':
                this.cookieService.set(key, value, null, null, null, null, 'Strict');
                break;
            case 'memory':
                /** @type {?} */
                var item = this.memoryStorage.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.name === key; }));
                if (item) {
                    item.value = value;
                }
                else {
                    this.memoryStorage.push({ name: key, value: value });
                }
                break;
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    TaminStorageService.prototype.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        switch (this.policy) {
            case 'local-storage':
                return localStorage.getItem(key);
            case 'cookie':
                return this.cookieService.get(key);
            case 'memory':
                /** @type {?} */
                var item = this.memoryStorage.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.name === key; }));
                if (item) {
                    return item.value;
                }
                else {
                    return '';
                }
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    TaminStorageService.prototype.exists = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        switch (this.policy) {
            case 'local-storage':
                return localStorage.getItem(key) !== null;
            case 'cookie':
                return this.cookieService.get(key) !== '';
            case 'memory':
                /** @type {?} */
                var item = this.memoryStorage.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.name === key; }));
                return item !== null;
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    TaminStorageService.prototype.remove = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        switch (this.policy) {
            case 'local-storage':
                localStorage.removeItem(key);
                break;
            case 'cookie':
                this.cookieService.delete(key);
                break;
            case 'memory':
                /** @type {?} */
                var index = this.memoryStorage.findIndex((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.name === key; }));
                if (index >= 0) {
                    delete this.memoryStorage[index];
                }
        }
    };
    TaminStorageService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TaminStorageService.ctorParameters = function () { return [
        { type: CookieService },
        { type: DeviceDetectorService }
    ]; };
    /** @nocollapse */ TaminStorageService.ngInjectableDef = i0.defineInjectable({ factory: function TaminStorageService_Factory() { return new TaminStorageService(i0.inject(i1.CookieService), i0.inject(i2.DeviceDetectorService)); }, token: TaminStorageService, providedIn: "root" });
    return TaminStorageService;
}());
export { TaminStorageService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaminStorageService.prototype.policy;
    /**
     * @type {?}
     * @private
     */
    TaminStorageService.prototype.memoryStorage;
    /**
     * @type {?}
     * @private
     */
    TaminStorageService.prototype.cookieService;
    /**
     * @type {?}
     * @private
     */
    TaminStorageService.prototype.deviceService;
}
//# sourceMappingURL=data:application/json;base64,