/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
var TaminProcessIndicatorComponent = /** @class */ (function () {
    function TaminProcessIndicatorComponent() {
        this.steps = [];
        this.currentStep = 0;
    }
    /**
     * @return {?}
     */
    TaminProcessIndicatorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    TaminProcessIndicatorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-process-indicator',
                    template: "<div class=\"process-container\">\n  <ng-container *ngFor=\"let item of steps; let idx = index\">\n    <span class=\"process-item\" [class.process-current]=\"idx <= currentStep\">{{item}}</span>\n    <i class=\"icon-left-open process-item\"  [class.process-current]=\"idx < currentStep\" *ngIf=\"idx !== steps.length-1\"></i>\n  </ng-container>\n</div>\n",
                    styles: [".process-container{display:flex;flex-direction:row;flex-flow:wrap;padding:10px;border:1px solid #cacaca;color:#bbb}.process-item{padding:5px;white-space:nowrap}.process-current{font-weight:700;color:#000}"]
                }] }
    ];
    /** @nocollapse */
    TaminProcessIndicatorComponent.ctorParameters = function () { return []; };
    TaminProcessIndicatorComponent.propDecorators = {
        steps: [{ type: Input }],
        currentStep: [{ type: Input }]
    };
    return TaminProcessIndicatorComponent;
}());
export { TaminProcessIndicatorComponent };
if (false) {
    /** @type {?} */
    TaminProcessIndicatorComponent.prototype.steps;
    /** @type {?} */
    TaminProcessIndicatorComponent.prototype.currentStep;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tcHJvY2Vzcy1pbmRpY2F0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vdGFtaW4tZnJhbWV3b3JrLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFtaW4tcHJvY2Vzcy1pbmRpY2F0b3IvdGFtaW4tcHJvY2Vzcy1pbmRpY2F0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBUyxNQUFNLGVBQWUsQ0FBQztBQUV2RDtJQVVFO1FBSFMsVUFBSyxHQUFrQixFQUFFLENBQUM7UUFDMUIsZ0JBQVcsR0FBRyxDQUFDLENBQUM7SUFHekIsQ0FBQzs7OztJQUVELGlEQUFROzs7SUFBUjtJQUNBLENBQUM7O2dCQWRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUseUJBQXlCO29CQUNuQyw4V0FBdUQ7O2lCQUV4RDs7Ozs7d0JBR0UsS0FBSzs4QkFDTCxLQUFLOztJQU9SLHFDQUFDO0NBQUEsQUFmRCxJQWVDO1NBVlksOEJBQThCOzs7SUFFekMsK0NBQW1DOztJQUNuQyxxREFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RhbWluLXByb2Nlc3MtaW5kaWNhdG9yJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RhbWluLXByb2Nlc3MtaW5kaWNhdG9yLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGFtaW4tcHJvY2Vzcy1pbmRpY2F0b3IuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBUYW1pblByb2Nlc3NJbmRpY2F0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIHN0ZXBzOiBBcnJheTxzdHJpbmc+ID0gW107XG4gIEBJbnB1dCgpIGN1cnJlbnRTdGVwID0gMDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG59XG4iXX0=