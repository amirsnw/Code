/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Based on https://github.com/jalaali/jalaali-js
export class TaminPersianDate {
    constructor() {
        this.breaks = [-61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210,
            1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178
        ];
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static GregorianToJalali(date) {
        /** @type {?} */
        const tmp = TaminPersianDate.taminPersianDate.toJalaali(date.getFullYear(), date.getMonth() + 1, date.getDate());
        return `${tmp.jy}/${TaminPersianDate.setLeadingZero(tmp.jm)}/${TaminPersianDate.setLeadingZero(tmp.jd)}`;
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    static setLeadingZero(val) {
        if (Number(val) < 10) {
            return '0' + val.toString();
        }
        return val.toString();
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    static JalaliToGregorian(year, month, day) {
        if (TaminPersianDate.taminPersianDate.isValidJalaaliDate(year, month, day)) {
            /** @type {?} */
            const tmp = TaminPersianDate.taminPersianDate.toGregorian(year, month, day);
            return new Date(tmp.gy, tmp.gm - 1, tmp.gd, 0, 0, 0, 0);
        }
        throw new Error('Invalid parameters');
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static FirstDayInMonth(date) {
        /** @type {?} */
        const tmp = TaminPersianDate.taminPersianDate.toJalaali(date.getFullYear(), date.getMonth() + 1, date.getDate());
        return TaminPersianDate.JalaliToGregorian(tmp.jy, tmp.jm, 1);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static GetNextMonth(date) {
        /** @type {?} */
        const tmp = TaminPersianDate.taminPersianDate.toJalaali(date.getFullYear(), date.getMonth() + 1, date.getDate());
        /** @type {?} */
        let month = tmp.jm + 1;
        /** @type {?} */
        let year = tmp.jy;
        /** @type {?} */
        let day = tmp.jd;
        if (month > 12) {
            month = 1;
            year += 1;
        }
        if (month > 6 && day > 30) {
            day = 30;
        }
        if (month === 12 && TaminPersianDate.taminPersianDate.isLeapJalaaliYear(year) && day > 29) {
            day = 29;
        }
        return TaminPersianDate.JalaliToGregorian(year, month, day);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static GetPrevMonth(date) {
        /** @type {?} */
        const tmp = TaminPersianDate.taminPersianDate.toJalaali(date.getFullYear(), date.getMonth() + 1, date.getDate());
        /** @type {?} */
        let month = tmp.jm - 1;
        /** @type {?} */
        let year = tmp.jy;
        /** @type {?} */
        let day = tmp.jd;
        if (month === 0) {
            month = 1;
            year -= 1;
        }
        if (month > 6 && day > 30) {
            day = 30;
        }
        if (month === 12 && TaminPersianDate.taminPersianDate.isLeapJalaaliYear(year) && day > 29) {
            day = 29;
        }
        return TaminPersianDate.JalaliToGregorian(year, month, day);
    }
    /*
      Converts a Gregorian date to Jalaali.
      */
    /**
     * @param {?} gy
     * @param {?} gm
     * @param {?} gd
     * @return {?}
     */
    toJalaali(gy, gm, gd) {
        if (Object.prototype.toString.call(gy) === '[object Date]') {
            gd = gy.getDate();
            gm = gy.getMonth() + 1;
            gy = gy.getFullYear();
        }
        return this.d2j(this.g2d(gy, gm, gd));
    }
    /*
        Converts a Jalaali date to Gregorian.
      */
    /**
     * @param {?} jy
     * @param {?} jm
     * @param {?} jd
     * @return {?}
     */
    toGregorian(jy, jm, jd) {
        return this.d2g(this.j2d(jy, jm, jd));
    }
    /*
        Checks whether a Jalaali date is valid or not.
      */
    /**
     * @param {?} jy
     * @param {?} jm
     * @param {?} jd
     * @return {?}
     */
    isValidJalaaliDate(jy, jm, jd) {
        return jy >= -61 && jy <= 3177 &&
            jm >= 1 && jm <= 12 &&
            jd >= 1 && jd <= this.jalaaliMonthLength(jy, jm);
    }
    /*
        Is this a leap year or not?
      */
    /**
     * @param {?} jy
     * @return {?}
     */
    isLeapJalaaliYear(jy) {
        return this.jalCalLeap(jy) === 0;
    }
    /*
        Number of days in a given month in a Jalaali year.
      */
    /**
     * @param {?} jy
     * @param {?} jm
     * @return {?}
     */
    jalaaliMonthLength(jy, jm) {
        if (jm <= 6) {
            return 31;
        }
        if (jm <= 11) {
            return 30;
        }
        if (this.isLeapJalaaliYear(jy)) {
            return 30;
        }
        return 29;
    }
    /*
          This function determines if the Jalaali (Persian) year is
          leap (366-day long) or is the common year (365 days)
    
          @param jy Jalaali calendar year (-61 to 3177)
          @returns number of years since the last leap year (0 to 4)
       */
    /**
     * @param {?} jy
     * @return {?}
     */
    jalCalLeap(jy) {
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        let bl = this.breaks.length;
        /** @type {?} */
        let jp = this.breaks[0];
        /** @type {?} */
        let jm;
        /** @type {?} */
        let jump;
        /** @type {?} */
        let leap;
        /** @type {?} */
        let n;
        /** @type {?} */
        let i;
        if (jy < jp || jy >= this.breaks[bl - 1]) {
            throw new Error('Invalid Jalaali year ' + jy);
        }
        for (i = 1; i < bl; i += 1) {
            jm = this.breaks[i];
            jump = jm - jp;
            if (jy < jm) {
                break;
            }
            jp = jm;
        }
        n = jy - jp;
        if (jump - n < 6) {
            n = n - jump + this.div(jump + 4, 33) * 33;
        }
        leap = this.mod(this.mod(n + 1, 33) - 1, 4);
        if (leap === -1) {
            leap = 4;
        }
        return leap;
    }
    /*
        This function determines if the Jalaali (Persian) year is
        leap (366-day long) or is the common year (365 days), and
        finds the day in March (Gregorian calendar) of the first
        day of the Jalaali year (jy).
    
        @param jy Jalaali calendar year (-61 to 3177)
        @param withoutLeap when don't need leap (true or false) default is false
        @return
          leap: number of years since the last leap year (0 to 4)
          gy: Gregorian year of the beginning of Jalaali year
          march: the March day of Farvardin the 1st (1st day of jy)
        @see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm
        @see: http://www.fourmilab.ch/documents/calendar/
      */
    /**
     * @param {?} jy
     * @param {?} withoutLeap
     * @return {?}
     */
    jalCal(jy, withoutLeap) {
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        let bl = this.breaks.length
        // tslint:disable-next-line:prefer-const
        ;
        /** @type {?} */
        let gy = jy + 621;
        /** @type {?} */
        let leapJ = -14;
        /** @type {?} */
        let jp = this.breaks[0];
        /** @type {?} */
        let jm;
        /** @type {?} */
        let jump;
        /** @type {?} */
        let leap;
        /** @type {?} */
        let leapG;
        /** @type {?} */
        let march;
        /** @type {?} */
        let n;
        /** @type {?} */
        let i;
        if (jy < jp || jy >= this.breaks[bl - 1]) {
            throw new Error('Invalid Jalaali year ' + jy);
        }
        // Find the limiting years for the Jalaali year jy.
        for (i = 1; i < bl; i += 1) {
            jm = this.breaks[i];
            jump = jm - jp;
            if (jy < jm) {
                break;
            }
            leapJ = leapJ + this.div(jump, 33) * 8 + this.div(this.mod(jump, 33), 4);
            jp = jm;
        }
        n = jy - jp;
        // Find the number of leap years from AD 621 to the beginning
        // of the current Jalaali year in the Persian calendar.
        leapJ = leapJ + this.div(n, 33) * 8 + this.div(this.mod(n, 33) + 3, 4);
        if (this.mod(jump, 33) === 4 && jump - n === 4) {
            leapJ += 1;
        }
        // And the same in the Gregorian calendar (until the year gy).
        leapG = this.div(gy, 4) - this.div((this.div(gy, 100) + 1) * 3, 4) - 150;
        // Determine the Gregorian date of Farvardin the 1st.
        march = 20 + leapJ - leapG;
        // return with gy and march when we don't need leap
        if (withoutLeap) {
            return { gy: gy, march: march };
        }
        // Find how many years have passed since the last leap year.
        if (jump - n < 6) {
            n = n - jump + this.div(jump + 4, 33) * 33;
        }
        leap = this.mod(this.mod(n + 1, 33) - 1, 4);
        if (leap === -1) {
            leap = 4;
        }
        return {
            leap: leap,
            gy: gy,
            march: march
        };
    }
    /*
        Converts a date of the Jalaali calendar to the Julian Day number.
    
        @param jy Jalaali year (1 to 3100)
        @param jm Jalaali month (1 to 12)
        @param jd Jalaali day (1 to 29/31)
        @return Julian Day number
      */
    /**
     * @param {?} jy
     * @param {?} jm
     * @param {?} jd
     * @return {?}
     */
    j2d(jy, jm, jd) {
        /** @type {?} */
        const r = this.jalCal(jy, true);
        return this.g2d(r.gy, 3, r.march) + (jm - 1) * 31 - this.div(jm, 7) * (jm - 7) + jd - 1;
    }
    /*
        Converts the Julian Day number to a date in the Jalaali calendar.
    
        @param jdn Julian Day number
        @return
          jy: Jalaali year (1 to 3100)
          jm: Jalaali month (1 to 12)
          jd: Jalaali day (1 to 29/31)
      */
    /**
     * @param {?} jdn
     * @return {?}
     */
    d2j(jdn) {
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        let gy = this.d2g(jdn).gy // Calculate Gregorian year (gy).
        ;
        /** @type {?} */
        let jy = gy - 621
        // tslint:disable-next-line:prefer-const
        ;
        /** @type {?} */
        let r = this.jalCal(jy, false)
        // tslint:disable-next-line:prefer-const
        ;
        /** @type {?} */
        let jdn1f = this.g2d(gy, 3, r.march);
        /** @type {?} */
        let jd;
        /** @type {?} */
        let jm;
        /** @type {?} */
        let k;
        // Find number of days that passed since 1 Farvardin.
        k = jdn - jdn1f;
        if (k >= 0) {
            if (k <= 185) {
                // The first 6 months.
                jm = 1 + this.div(k, 31);
                jd = this.mod(k, 31) + 1;
                return {
                    jy: jy,
                    jm: jm,
                    jd: jd
                };
            }
            else {
                // The remaining months.
                k -= 186;
            }
        }
        else {
            // Previous Jalaali year.
            jy -= 1;
            k += 179;
            if (r.leap === 1) {
                k += 1;
            }
        }
        jm = 7 + this.div(k, 30);
        jd = this.mod(k, 30) + 1;
        return {
            jy: jy,
            jm: jm,
            jd: jd
        };
    }
    /*
        Calculates the Julian Day number from Gregorian or Julian
        calendar dates. This integer number corresponds to the noon of
        the date (i.e. 12 hours of Universal Time).
        The procedure was tested to be good since 1 March, -100100 (of both
        calendars) up to a few million years into the future.
    
        @param gy Calendar year (years BC numbered 0, -1, -2, ...)
        @param gm Calendar month (1 to 12)
        @param gd Calendar day of the month (1 to 28/29/30/31)
        @return Julian Day number
      */
    /**
     * @param {?} gy
     * @param {?} gm
     * @param {?} gd
     * @return {?}
     */
    g2d(gy, gm, gd) {
        /** @type {?} */
        let d = this.div((gy + this.div(gm - 8, 6) + 100100) * 1461, 4)
            + this.div(153 * this.mod(gm + 9, 12) + 2, 5)
            + gd - 34840408;
        d = d - this.div(this.div(gy + 100100 + this.div(gm - 8, 6), 100) * 3, 4) + 752;
        return d;
    }
    /*
        Calculates Gregorian and Julian calendar dates from the Julian Day number
        (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both
        calendars) to some millions years ahead of the present.
    
        @param jdn Julian Day number
        @return
          gy: Calendar year (years BC numbered 0, -1, -2, ...)
          gm: Calendar month (1 to 12)
          gd: Calendar day of the month M (1 to 28/29/30/31)
      */
    /**
     * @param {?} jdn
     * @return {?}
     */
    d2g(jdn) {
        /** @type {?} */
        let j;
        /** @type {?} */
        let i;
        /** @type {?} */
        let gd;
        /** @type {?} */
        let gm;
        /** @type {?} */
        let gy;
        j = 4 * jdn + 139361631;
        j = j + this.div(this.div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;
        i = this.div(this.mod(j, 1461), 4) * 5 + 308;
        gd = this.div(this.mod(i, 153), 5) + 1;
        gm = this.mod(this.div(i, 153), 12) + 1;
        gy = this.div(j, 1461) - 100100 + this.div(8 - gm, 6);
        return {
            gy: gy,
            gm: gm,
            gd: gd
        };
    }
    /*
        Utility helper functions.
      */
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    div(a, b) {
        // tslint:disable-next-line:no-bitwise
        return ~~(a / b);
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    mod(a, b) {
        // tslint:disable-next-line:no-bitwise
        return a - ~~(a / b) * b;
    }
}
TaminPersianDate.taminPersianDate = new TaminPersianDate();
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaminPersianDate.taminPersianDate;
    /** @type {?} */
    TaminPersianDate.prototype.breaks;
}
//# sourceMappingURL=data:application/json;base64,