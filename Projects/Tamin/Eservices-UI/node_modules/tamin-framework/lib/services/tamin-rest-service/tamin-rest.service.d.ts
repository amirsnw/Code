import { HttpClient } from '@angular/common/http';
import { SearchParam } from '../../models/search-param.model';
import { SortParam } from '../../models/sort-param.model';
import { ITaminApplicationConfig } from '../../interfaces/tamin-application-config';
import { RequestCacheService } from '../request-cache.service';
export declare class TaminRestService {
    private taminApplicationConfig;
    private requestCacheService;
    private http;
    protected URL_ERROR: string;
    protected ID_ERROR: string;
    constructor(taminApplicationConfig: ITaminApplicationConfig, requestCacheService: RequestCacheService, http: HttpClient);
    protected getData(url: string, pageNo?: number, pageSize?: number, searchParams?: SearchParam[], sortParams?: SortParam[], query?: object): Promise<any>;
    getBlob(url: string, searchParams?: SearchParam[]): Promise<any>;
    getAll(url: string, querySearchParams?: SearchParam[], querySortParams?: SortParam[], query?: object): Promise<any>;
    getPage(url: string, pageNo: number, pageSize: number, querySearchParams?: SearchParam[], querySortParams?: SortParam[], query?: object): Promise<any>;
    getAllManaged<TModel>(url: string, querySearchParams?: SearchParam[], querySortParams?: SortParam[], query?: object): Promise<TModel>;
    getPageManaged<TModel>(url: string, pageNo: number, pageSize: number, querySearchParams?: SearchParam[], querySortParams?: SortParam[], query?: object): Promise<TModel>;
    getById(url: string, id: string): Promise<any>;
    getByIdManaged<TModel>(url: string, id: number): Promise<TModel>;
    create(url: string, data: any): Promise<any>;
    update<TModel>(url: string, id: string, data: TModel): Promise<any>;
    delete(url: string, id: string): Promise<any>;
}
