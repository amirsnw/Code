/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { timeout } from 'rxjs/operators';
import { RequestCacheService } from '../request-cache.service';
import * as i0 from "@angular/core";
import * as i1 from "../request-cache.service";
import * as i2 from "@angular/common/http";
export class TaminRestService {
    /**
     * @param {?} taminApplicationConfig
     * @param {?} requestCacheService
     * @param {?} http
     */
    constructor(taminApplicationConfig, requestCacheService, http) {
        this.taminApplicationConfig = taminApplicationConfig;
        this.requestCacheService = requestCacheService;
        this.http = http;
        this.URL_ERROR = 'url not specified';
        this.ID_ERROR = 'id not specified';
    }
    /**
     * @protected
     * @param {?} url
     * @param {?=} pageNo
     * @param {?=} pageSize
     * @param {?=} searchParams
     * @param {?=} sortParams
     * @param {?=} query
     * @return {?}
     */
    getData(url, pageNo, pageSize, searchParams, sortParams, query) {
        // let headers = new HttpHeaders();
        /** @type {?} */
        let params = new HttpParams();
        if (pageNo && pageSize) {
            params = params.append('page', pageNo.toString());
            params = params.append('start', ((pageNo - 1) * pageSize).toString());
            params = params.append('limit', pageSize.toString());
        }
        if (query) {
            Object.keys(query).forEach((/**
             * @param {?} key
             * @return {?}
             */
            (key) => {
                params = params.append(key, query[key]);
            }));
        }
        if (searchParams) {
            params = params.append('filter', JSON.stringify(searchParams));
        }
        if (sortParams) {
            params = params.append('sort', JSON.stringify(sortParams));
        }
        // params = params.append('_dc', (new Date()).getTime().toString());
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this.requestCacheService.hasCached(url)) {
                resolve(this.requestCacheService.getCached(url));
            }
            else {
                this.http.get(url, { params })
                    .pipe(timeout(this.taminApplicationConfig.restTimeout))
                    .toPromise()
                    .then((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => {
                    if (this.requestCacheService.isCacheable(url)) {
                        this.requestCacheService.setCache(url, value);
                    }
                    resolve(value);
                }))
                    .catch((/**
                 * @param {?} reason
                 * @return {?}
                 */
                reason => {
                    reject(reason);
                }));
            }
        }));
    }
    /**
     * @param {?} url
     * @param {?=} searchParams
     * @return {?}
     */
    getBlob(url, searchParams) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            /** @type {?} */
            let params = new HttpParams();
            if (searchParams) {
                params = params.append('filter', JSON.stringify(searchParams));
            }
            this.http.get(url, { params, responseType: 'blob' })
                .pipe(timeout(this.taminApplicationConfig.restTimeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve(response)))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(error)));
        }));
    }
    /**
     * @param {?} url
     * @param {?=} querySearchParams
     * @param {?=} querySortParams
     * @param {?=} query
     * @return {?}
     */
    getAll(url, querySearchParams, querySortParams, query) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (url.trim() === '') {
                reject(new Error(this.URL_ERROR));
            }
            this.getData(url, null, null, querySearchParams, querySortParams, query)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve(response)))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(error)));
        }));
    }
    /**
     * @param {?} url
     * @param {?} pageNo
     * @param {?} pageSize
     * @param {?=} querySearchParams
     * @param {?=} querySortParams
     * @param {?=} query
     * @return {?}
     */
    getPage(url, pageNo, pageSize, querySearchParams, querySortParams, query) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.getData(url, pageNo, pageSize, querySearchParams, querySortParams, query)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve(response)))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(error)));
        }));
    }
    /**
     * @template TModel
     * @param {?} url
     * @param {?=} querySearchParams
     * @param {?=} querySortParams
     * @param {?=} query
     * @return {?}
     */
    getAllManaged(url, querySearchParams, querySortParams, query) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.getData(url, null, null, querySearchParams, querySortParams, query)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                if (response.data) {
                    resolve((/** @type {?} */ (response.data)));
                }
                else if (response.list) {
                    resolve((/** @type {?} */ (response.list)));
                }
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(error)));
        }));
    }
    /**
     * @template TModel
     * @param {?} url
     * @param {?} pageNo
     * @param {?} pageSize
     * @param {?=} querySearchParams
     * @param {?=} querySortParams
     * @param {?=} query
     * @return {?}
     */
    getPageManaged(url, pageNo, pageSize, querySearchParams, querySortParams, query) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.getData(url, pageNo, pageSize, querySearchParams, querySortParams, query)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                if (response.data) {
                    resolve((/** @type {?} */ (response.data)));
                }
                else if (response.list) {
                    resolve((/** @type {?} */ (response.list)));
                }
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(error)));
        }));
    }
    /**
     * @param {?} url
     * @param {?} id
     * @return {?}
     */
    getById(url, id) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (url.trim() === '') {
                reject(new Error(this.URL_ERROR));
            }
            if (id.trim() === '') {
                reject(new Error(this.ID_ERROR));
            }
            /** @type {?} */
            const theUrl = `${url}/${id}`;
            this.getData(theUrl)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve(response)))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(error)));
        }));
    }
    /**
     * @template TModel
     * @param {?} url
     * @param {?} id
     * @return {?}
     */
    getByIdManaged(url, id) {
        /** @type {?} */
        const theUrl = `${url}/${id}`;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.getData(url)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve((/** @type {?} */ (response.data)))))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(error)));
        }));
    }
    /**
     * @param {?} url
     * @param {?} data
     * @return {?}
     */
    create(url, data) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (url.trim() === '') {
                reject(new Error(this.URL_ERROR));
            }
            this.http
                .post(url, data)
                .pipe(timeout(this.taminApplicationConfig.restTimeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                resolve(response);
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                reject(error);
            }));
        }));
    }
    /**
     * @template TModel
     * @param {?} url
     * @param {?} id
     * @param {?} data
     * @return {?}
     */
    update(url, id, data) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (url.toString().trim() === '') {
                reject(new Error(this.URL_ERROR));
            }
            if (id.trim() === '') {
                reject(new Error(this.ID_ERROR));
            }
            /** @type {?} */
            const theUrl = `${url}/${id.toString()}`;
            this.http
                .put(theUrl, data)
                .pipe(timeout(this.taminApplicationConfig.restTimeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve(response)))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(error)));
        }));
    }
    /**
     * @param {?} url
     * @param {?} id
     * @return {?}
     */
    delete(url, id) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (url.trim() === '') {
                reject(new Error(this.URL_ERROR));
            }
            if (id.trim() === '') {
                reject(new Error(this.ID_ERROR));
            }
            /** @type {?} */
            const theUrl = `${url}/${id}`;
            this.http
                .delete(theUrl)
                .pipe(timeout(this.taminApplicationConfig.restTimeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve(response)))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(error)));
        }));
    }
}
TaminRestService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TaminRestService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ['taminApplicationConfig',] }] },
    { type: RequestCacheService },
    { type: HttpClient }
];
/** @nocollapse */ TaminRestService.ngInjectableDef = i0.defineInjectable({ factory: function TaminRestService_Factory() { return new TaminRestService(i0.inject("taminApplicationConfig"), i0.inject(i1.RequestCacheService), i0.inject(i2.HttpClient)); }, token: TaminRestService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    TaminRestService.prototype.URL_ERROR;
    /**
     * @type {?}
     * @protected
     */
    TaminRestService.prototype.ID_ERROR;
    /**
     * @type {?}
     * @private
     */
    TaminRestService.prototype.taminApplicationConfig;
    /**
     * @type {?}
     * @private
     */
    TaminRestService.prototype.requestCacheService;
    /**
     * @type {?}
     * @private
     */
    TaminRestService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,