/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as momentNs from 'jalali-moment';
import * as i0 from "@angular/core";
/** @type {?} */
const moment = momentNs;
export class TaminPersianService {
    constructor() {
        this._numberRange = '[\u06F0-\u06F9]';
        this._charRange = ['[\u06A9\u06AF\u06C0\u06CC\u060C',
            '\u062A\u062B\u062C\u062D\u062E\u062F',
            '\u063A\u064A\u064B\u064C\u064D\u064E',
            '\u064F\u067E\u0670\u0686\u0698\u200C',
            '\u0621-\u0629\u0630-\u0639\u0641-\u0654]'].join('');
        this._rtlPunctuations = '(،|؟|«|»|؛|٬)';
        this._ltrPunctuations = '(\\.|:|\\!|\\-|\\[|\\]|\\(|\\)|/)';
        this._number = new RegExp('^' + this._numberRange + '+$');
        this._letter = new RegExp('^' + this._charRange + '+$');
        this._punctuation = new RegExp('^' + this.combineRegExps(this._rtlPunctuations, this._ltrPunctuations) + '+$');
        this._text = new RegExp('^' + this.combineRegExps(this._numberRange, this._charRange, this._rtlPunctuations, this._ltrPunctuations, '\\s') + '+$');
        this._rtl = new RegExp('^' + this.combineRegExps(this._charRange, this._numberRange, this._rtlPunctuations, '\\s') + '+$');
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getPersianDate(value) {
        try {
            /** @type {?} */
            const tmp = moment.from(value.toLocaleDateString(), 'en');
            if (tmp.isValid()) {
                return tmp.locale('fa').format('YYYY/MM/DD');
            }
            return null;
        }
        catch (e) {
            return '';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getPersianDayOfWeek(value) {
        try {
            /** @type {?} */
            const dayOfWeeks = ['یکشنبه', 'دوشنبه', 'سه شنبه', 'چهارشنبه', 'پنج شنبه', 'جمعه', 'شنبه'];
            /** @type {?} */
            const tmp = moment.from(value.toLocaleDateString(), 'en');
            if (tmp.isValid()) {
                return dayOfWeeks[tmp.locale('fa').day()];
            }
            return null;
        }
        catch (e) {
            return '';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getGregorianDate(value) {
        /** @type {?} */
        const tmp = moment.from(value, 'fa', 'YYYY/MM/DD');
        if (tmp.isValid()) {
            return tmp.toDate();
        }
        return null;
    }
    /**
     * @private
     * @param {...?} params
     * @return {?}
     */
    combineRegExps(...params) {
        /** @type {?} */
        let combined = '(';
        for (let i = 0; i < arguments.length; i++) {
            combined += '(';
            if (i !== arguments.length - 1) {
                combined += arguments[i] + ')|';
            }
            else {
                combined += arguments[i] + ')';
            }
        }
        return combined + ')';
    }
}
TaminPersianService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TaminPersianService.ctorParameters = () => [];
/** @nocollapse */ TaminPersianService.ngInjectableDef = i0.defineInjectable({ factory: function TaminPersianService_Factory() { return new TaminPersianService(); }, token: TaminPersianService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._numberRange;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._charRange;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._rtlPunctuations;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._ltrPunctuations;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._number;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._letter;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._punctuation;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._text;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._rtl;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tcGVyc2lhbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdGFtaW4tZnJhbWV3b3JrLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3BlcnNpYW4tc2VydmljZS90YW1pbi1wZXJzaWFuLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxLQUFLLFFBQVEsTUFBTSxlQUFlLENBQUM7OztNQUVwQyxNQUFNLEdBQUcsUUFBUTtBQUt2QixNQUFNLE9BQU8sbUJBQW1CO0lBbUI5QjtRQWpCUSxpQkFBWSxHQUFHLGlCQUFpQixDQUFDO1FBQ2pDLGVBQVUsR0FBRyxDQUFDLGlDQUFpQztZQUNyRCxzQ0FBc0M7WUFDdEMsc0NBQXNDO1lBQ3RDLHNDQUFzQztZQUN0QywwQ0FBMEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQyxxQkFBZ0IsR0FBRyxlQUFlLENBQUM7UUFDbkMscUJBQWdCLEdBQUcsbUNBQW1DLENBQUM7UUFFdkQsWUFBTyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3JELFlBQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNuRCxpQkFBWSxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUMxRyxVQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUNuSixDQUFDO1FBQ00sU0FBSSxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFJOUgsQ0FBQzs7Ozs7SUFFTSxjQUFjLENBQUMsS0FBVztRQUMvQixJQUFJOztrQkFDSSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxJQUFJLENBQUM7WUFDekQsSUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ2pCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDOUM7WUFDRCxPQUFPLElBQUksQ0FBQztTQUNiO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixPQUFPLEVBQUUsQ0FBQztTQUNYO0lBQ0gsQ0FBQzs7Ozs7SUFFTSxtQkFBbUIsQ0FBQyxLQUFXO1FBQ3BDLElBQUk7O2tCQUNJLFVBQVUsR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQzs7a0JBQ3BGLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLElBQUksQ0FBQztZQUN6RCxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDakIsT0FBTyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2FBQzNDO1lBQ0QsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxFQUFFLENBQUM7U0FDWDtJQUNILENBQUM7Ozs7O0lBRU0sZ0JBQWdCLENBQUMsS0FBYTs7Y0FDN0IsR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxZQUFZLENBQUM7UUFDbEQsSUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDakIsT0FBTyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDckI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7OztJQUVPLGNBQWMsQ0FBQyxHQUFHLE1BQWE7O1lBQ2pDLFFBQVEsR0FBRyxHQUFHO1FBQ2xCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3pDLFFBQVEsSUFBSSxHQUFHLENBQUM7WUFDaEIsSUFBSSxDQUFDLEtBQUssU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzlCLFFBQVEsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO2FBQ2pDO2lCQUFNO2dCQUNMLFFBQVEsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2FBQ2hDO1NBQ0Y7UUFDRCxPQUFPLFFBQVEsR0FBRyxHQUFHLENBQUM7SUFDeEIsQ0FBQzs7O1lBckVGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs7Ozs7OztJQUdDLDJDQUF5Qzs7Ozs7SUFDekMseUNBSXVEOzs7OztJQUN2RCwrQ0FBMkM7Ozs7O0lBQzNDLCtDQUErRDs7Ozs7SUFFL0Qsc0NBQTZEOzs7OztJQUM3RCxzQ0FBMkQ7Ozs7O0lBQzNELDJDQUFrSDs7Ozs7SUFDbEgsb0NBQ0U7Ozs7O0lBQ0YsbUNBQThIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIG1vbWVudE5zIGZyb20gJ2phbGFsaS1tb21lbnQnO1xuXG5jb25zdCBtb21lbnQgPSBtb21lbnROcztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVGFtaW5QZXJzaWFuU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBfbnVtYmVyUmFuZ2UgPSAnW1xcdTA2RjAtXFx1MDZGOV0nO1xuICBwcml2YXRlIF9jaGFyUmFuZ2UgPSBbJ1tcXHUwNkE5XFx1MDZBRlxcdTA2QzBcXHUwNkNDXFx1MDYwQycsXG4gICAgJ1xcdTA2MkFcXHUwNjJCXFx1MDYyQ1xcdTA2MkRcXHUwNjJFXFx1MDYyRicsXG4gICAgJ1xcdTA2M0FcXHUwNjRBXFx1MDY0QlxcdTA2NENcXHUwNjREXFx1MDY0RScsXG4gICAgJ1xcdTA2NEZcXHUwNjdFXFx1MDY3MFxcdTA2ODZcXHUwNjk4XFx1MjAwQycsXG4gICAgJ1xcdTA2MjEtXFx1MDYyOVxcdTA2MzAtXFx1MDYzOVxcdTA2NDEtXFx1MDY1NF0nXS5qb2luKCcnKTtcbiAgcHJpdmF0ZSBfcnRsUHVuY3R1YXRpb25zID0gJyjYjHzYn3zCq3zCu3zYm3zZrCknO1xuICBwcml2YXRlIF9sdHJQdW5jdHVhdGlvbnMgPSAnKFxcXFwufDp8XFxcXCF8XFxcXC18XFxcXFt8XFxcXF18XFxcXCh8XFxcXCl8LyknO1xuXG4gIHByaXZhdGUgX251bWJlciA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5fbnVtYmVyUmFuZ2UgKyAnKyQnKTtcbiAgcHJpdmF0ZSBfbGV0dGVyID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLl9jaGFyUmFuZ2UgKyAnKyQnKTtcbiAgcHJpdmF0ZSBfcHVuY3R1YXRpb24gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMuY29tYmluZVJlZ0V4cHModGhpcy5fcnRsUHVuY3R1YXRpb25zLCB0aGlzLl9sdHJQdW5jdHVhdGlvbnMpICsgJyskJyk7XG4gIHByaXZhdGUgX3RleHQgPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMuY29tYmluZVJlZ0V4cHModGhpcy5fbnVtYmVyUmFuZ2UsIHRoaXMuX2NoYXJSYW5nZSwgdGhpcy5fcnRsUHVuY3R1YXRpb25zLCB0aGlzLl9sdHJQdW5jdHVhdGlvbnMsICdcXFxccycpICsgJyskJ1xuICApO1xuICBwcml2YXRlIF9ydGwgPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMuY29tYmluZVJlZ0V4cHModGhpcy5fY2hhclJhbmdlLCB0aGlzLl9udW1iZXJSYW5nZSwgdGhpcy5fcnRsUHVuY3R1YXRpb25zLCAnXFxcXHMnKSArICcrJCcpO1xuXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBwdWJsaWMgZ2V0UGVyc2lhbkRhdGUodmFsdWU6IERhdGUpOiBzdHJpbmcgfCBudWxsIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdG1wID0gbW9tZW50LmZyb20odmFsdWUudG9Mb2NhbGVEYXRlU3RyaW5nKCksICdlbicpO1xuICAgICAgaWYgKHRtcC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIHRtcC5sb2NhbGUoJ2ZhJykuZm9ybWF0KCdZWVlZL01NL0REJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldFBlcnNpYW5EYXlPZldlZWsodmFsdWU6IERhdGUpOiBzdHJpbmcgfCBudWxsIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF5T2ZXZWVrcyA9IFsn24zaqdi02YbYqNmHJywgJ9iv2YjYtNmG2KjZhycsICfYs9mHINi02YbYqNmHJywgJ9qG2YfYp9ix2LTZhtio2YcnLCAn2b7ZhtisINi02YbYqNmHJywgJ9is2YXYudmHJywgJ9i02YbYqNmHJ107XG4gICAgICBjb25zdCB0bXAgPSBtb21lbnQuZnJvbSh2YWx1ZS50b0xvY2FsZURhdGVTdHJpbmcoKSwgJ2VuJyk7XG4gICAgICBpZiAodG1wLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gZGF5T2ZXZWVrc1t0bXAubG9jYWxlKCdmYScpLmRheSgpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0R3JlZ29yaWFuRGF0ZSh2YWx1ZTogc3RyaW5nKTogRGF0ZSB8IG51bGwge1xuICAgIGNvbnN0IHRtcCA9IG1vbWVudC5mcm9tKHZhbHVlLCAnZmEnLCAnWVlZWS9NTS9ERCcpO1xuICAgIGlmICh0bXAuaXNWYWxpZCgpKSB7XG4gICAgICByZXR1cm4gdG1wLnRvRGF0ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgY29tYmluZVJlZ0V4cHMoLi4ucGFyYW1zOiBhbnlbXSkge1xuICAgIGxldCBjb21iaW5lZCA9ICcoJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29tYmluZWQgKz0gJygnO1xuICAgICAgaWYgKGkgIT09IGFyZ3VtZW50cy5sZW5ndGggLSAxKSB7XG4gICAgICAgIGNvbWJpbmVkICs9IGFyZ3VtZW50c1tpXSArICcpfCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21iaW5lZCArPSBhcmd1bWVudHNbaV0gKyAnKSc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb21iaW5lZCArICcpJztcbiAgfVxufVxuIl19