/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, Input, ViewChild } from '@angular/core';
import { FieldBaseComponent } from '../../../base/field-base.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { PickerContainerComponent } from '../../containers/picker-container/picker-container.component';
export class TaminFieldComboBoxStaticComponent extends FieldBaseComponent {
    constructor() {
        super(...arguments);
        this.dataItems = [];
    }
    /**
     * @return {?}
     */
    initializeComponent() {
        this.picker.parent = this.inputElement;
        this.picker.button = this.iconElement;
    }
    /**
     * @return {?}
     */
    onShowPicker() {
        this.picker.toggle();
    }
    /**
     * @param {?} itemData
     * @return {?}
     */
    renderItem(itemData) {
        if (this.itemRenderer) {
            return this.itemRenderer(itemData);
        }
        return itemData[this.displayField];
    }
    /**
     * @return {?}
     */
    onClearContent() {
        this.onChange('');
        this.inputElement.nativeElement.value = '';
        this.picker.hide();
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onSelect(item) {
        this.onChange(item[this.valueField]);
        this.inputElement.nativeElement.value = item[this.displayField];
        this.picker.toggle();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        /** @type {?} */
        const theValue = value == null ? '' : value;
        /** @type {?} */
        const tmp = this.dataItems.find((/**
         * @param {?} c
         * @return {?}
         */
        c => c[this.valueField] === theValue));
        if (tmp) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.inputElement.nativeElement.value = tmp[this.displayField];
            }), 0);
        }
        else {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.inputElement.nativeElement.value = '';
            }), 0);
        }
        this.onChange(value);
    }
}
TaminFieldComboBoxStaticComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-field-combo-box-static',
                template: "<div class=\"input-wrapper\">\n  <input\n    id=\"textbox\"\n    readonly=\"readonly\"\n    [disabled]=\"control.disabled\"\n    style=\"padding-left: 35px;;cursor: pointer\"\n    type=\"text\"\n    class=\"tamin-form-control-input\"\n    [class.tamin-form-control-valid]=\"control.touched && control.valid\"\n    [class.tamin-form-control-invalid]=\"control.touched && !control.valid\"\n    (click)=\"onShowPicker()\" [attr.placeholder]=\"placeHolder\"\n    #inputElement>\n  <span class=\"icon\" style=\"margin-left:20px\" *ngIf=\"showClearButton\" (click)=\"onClearContent()\">\n    <i\n      class=\"icon-cancel\"\n      style=\"font-size: 1.5em\"\n      [class.tamin-form-control-valid-icon]=\"control.touched && control.valid\"\n      [class.tamin-form-control-invalid-icon]=\"control.touched && !control.valid\"></i>\n  </span>\n  <span class=\"icon\" #icon (click)=\"onShowPicker()\">\n    <i\n      class=\"icon-down-open\"\n      style=\"font-size: 1.5em\"\n      [class.tamin-form-control-valid-icon]=\"control.touched && control.valid\"\n      [class.tamin-form-control-invalid-icon]=\"control.touched && !control.valid\"></i>\n  </span>\n</div>\n<tamin-picker-container #picker>\n  <div *ngFor=\"let item of dataItems\" class=\"item\" (click)=\"onSelect(item)\" [innerHtml]=\"renderItem(item)\"></div>\n</tamin-picker-container>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TaminFieldComboBoxStaticComponent)),
                        multi: true
                    }
                ],
                styles: [".input-wrapper{position:relative}.icon{position:absolute;top:23%;left:5px;height:10px;margin-top:-5px;cursor:pointer}.item{padding:5px;cursor:pointer}.item:hover{background-color:silver}"]
            }] }
];
TaminFieldComboBoxStaticComponent.propDecorators = {
    displayField: [{ type: Input }],
    valueField: [{ type: Input }],
    itemRenderer: [{ type: Input }],
    showClearButton: [{ type: Input }],
    picker: [{ type: ViewChild, args: ['picker',] }],
    iconElement: [{ type: ViewChild, args: ['icon',] }],
    dataItems: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TaminFieldComboBoxStaticComponent.prototype.displayField;
    /** @type {?} */
    TaminFieldComboBoxStaticComponent.prototype.valueField;
    /** @type {?} */
    TaminFieldComboBoxStaticComponent.prototype.itemRenderer;
    /** @type {?} */
    TaminFieldComboBoxStaticComponent.prototype.showClearButton;
    /** @type {?} */
    TaminFieldComboBoxStaticComponent.prototype.picker;
    /** @type {?} */
    TaminFieldComboBoxStaticComponent.prototype.iconElement;
    /** @type {?} */
    TaminFieldComboBoxStaticComponent.prototype.dataItems;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tZmllbGQtY29tYm8tYm94LXN0YXRpYy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90YW1pbi1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9maWVsZHMvdGFtaW4tZmllbGQtY29tYm8tYm94LXN0YXRpYy90YW1pbi1maWVsZC1jb21iby1ib3gtc3RhdGljLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sb0NBQW9DLENBQUM7QUFDdEUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sOERBQThELENBQUM7QUFldEcsTUFBTSxPQUFPLGlDQUFrQyxTQUFRLGtCQUFrQjtJQWJ6RTs7UUFvQlcsY0FBUyxHQUFHLEVBQUUsQ0FBQztJQTZDMUIsQ0FBQzs7OztJQTNDQyxtQkFBbUI7UUFDakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQ3hDLENBQUM7Ozs7SUFFRCxZQUFZO1FBQ1YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxRQUFhO1FBQ3RCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDcEM7UUFDRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7OztJQUVELGNBQWM7UUFDWixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7OztJQUVELFFBQVEsQ0FBQyxJQUFJO1FBQ1gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxLQUFVOztjQUNiLFFBQVEsR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUs7O2NBQ3JDLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUk7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssUUFBUSxFQUFDO1FBQ3JFLElBQUksR0FBRyxFQUFFO1lBQ1AsVUFBVTs7O1lBQUMsR0FBRyxFQUFFO2dCQUNkLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ2pFLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQztTQUNQO2FBQU07WUFDTCxVQUFVOzs7WUFBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUM3QyxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUM7U0FFUDtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQzs7O1lBaEVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsOEJBQThCO2dCQUN4QywyMENBQTREO2dCQUU1RCxTQUFTLEVBQUU7b0JBQ1Q7d0JBQ0UsT0FBTyxFQUFFLGlCQUFpQjt3QkFDMUIsV0FBVyxFQUFFLFVBQVU7Ozt3QkFBQyxHQUFHLEVBQUUsQ0FBQyxpQ0FBaUMsRUFBQzt3QkFDaEUsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQ0Y7O2FBQ0Y7OzsyQkFHRSxLQUFLO3lCQUNMLEtBQUs7MkJBQ0wsS0FBSzs4QkFDTCxLQUFLO3FCQUNMLFNBQVMsU0FBQyxRQUFROzBCQUNsQixTQUFTLFNBQUMsTUFBTTt3QkFDaEIsS0FBSzs7OztJQU5OLHlEQUE4Qjs7SUFDOUIsdURBQTRCOztJQUM1Qix5REFBMkI7O0lBQzNCLDREQUFrQzs7SUFDbEMsbURBQXNEOztJQUN0RCx3REFBMkM7O0lBQzNDLHNEQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFbGVtZW50UmVmLCBmb3J3YXJkUmVmLCBJbnB1dCwgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RmllbGRCYXNlQ29tcG9uZW50fSBmcm9tICcuLi8uLi8uLi9iYXNlL2ZpZWxkLWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7TkdfVkFMVUVfQUNDRVNTT1J9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7UGlja2VyQ29udGFpbmVyQ29tcG9uZW50fSBmcm9tICcuLi8uLi9jb250YWluZXJzL3BpY2tlci1jb250YWluZXIvcGlja2VyLWNvbnRhaW5lci5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0YW1pbi1maWVsZC1jb21iby1ib3gtc3RhdGljJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RhbWluLWZpZWxkLWNvbWJvLWJveC1zdGF0aWMuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90YW1pbi1maWVsZC1jb21iby1ib3gtc3RhdGljLmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGFtaW5GaWVsZENvbWJvQm94U3RhdGljQ29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuXG5leHBvcnQgY2xhc3MgVGFtaW5GaWVsZENvbWJvQm94U3RhdGljQ29tcG9uZW50IGV4dGVuZHMgRmllbGRCYXNlQ29tcG9uZW50IHtcbiAgQElucHV0KCkgZGlzcGxheUZpZWxkOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHZhbHVlRmllbGQ6IHN0cmluZztcbiAgQElucHV0KCkgaXRlbVJlbmRlcmVyOiBhbnk7XG4gIEBJbnB1dCgpIHNob3dDbGVhckJ1dHRvbjogYm9vbGVhbjtcbiAgQFZpZXdDaGlsZCgncGlja2VyJykgcGlja2VyOiBQaWNrZXJDb250YWluZXJDb21wb25lbnQ7XG4gIEBWaWV3Q2hpbGQoJ2ljb24nKSBpY29uRWxlbWVudDogRWxlbWVudFJlZjtcbiAgQElucHV0KCkgZGF0YUl0ZW1zID0gW107XG5cbiAgaW5pdGlhbGl6ZUNvbXBvbmVudCgpIHtcbiAgICB0aGlzLnBpY2tlci5wYXJlbnQgPSB0aGlzLmlucHV0RWxlbWVudDtcbiAgICB0aGlzLnBpY2tlci5idXR0b24gPSB0aGlzLmljb25FbGVtZW50O1xuICB9XG5cbiAgb25TaG93UGlja2VyKCkge1xuICAgIHRoaXMucGlja2VyLnRvZ2dsZSgpO1xuICB9XG5cbiAgcmVuZGVySXRlbShpdGVtRGF0YTogYW55KSB7XG4gICAgaWYgKHRoaXMuaXRlbVJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5pdGVtUmVuZGVyZXIoaXRlbURhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbURhdGFbdGhpcy5kaXNwbGF5RmllbGRdO1xuICB9XG5cbiAgb25DbGVhckNvbnRlbnQoKSB7XG4gICAgdGhpcy5vbkNoYW5nZSgnJyk7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC52YWx1ZSA9ICcnO1xuICAgIHRoaXMucGlja2VyLmhpZGUoKTtcbiAgfVxuXG4gIG9uU2VsZWN0KGl0ZW0pIHtcbiAgICB0aGlzLm9uQ2hhbmdlKGl0ZW1bdGhpcy52YWx1ZUZpZWxkXSk7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC52YWx1ZSA9IGl0ZW1bdGhpcy5kaXNwbGF5RmllbGRdO1xuICAgIHRoaXMucGlja2VyLnRvZ2dsZSgpO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgY29uc3QgdGhlVmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbiAgICBjb25zdCB0bXAgPSB0aGlzLmRhdGFJdGVtcy5maW5kKGMgPT4gY1t0aGlzLnZhbHVlRmllbGRdID09PSB0aGVWYWx1ZSk7XG4gICAgaWYgKHRtcCkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB0bXBbdGhpcy5kaXNwbGF5RmllbGRdO1xuICAgICAgfSwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LnZhbHVlID0gJyc7XG4gICAgICB9LCAwKTtcblxuICAgIH1cbiAgICB0aGlzLm9uQ2hhbmdlKHZhbHVlKTtcbiAgfVxufVxuIl19