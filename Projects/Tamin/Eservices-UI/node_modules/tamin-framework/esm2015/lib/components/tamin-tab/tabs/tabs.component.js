/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChildren, ElementRef, HostListener, Input, QueryList, ViewChild } from '@angular/core';
import { TaminTabItemComponent } from '../tab-item/tab-item.component';
import { delay, map, startWith } from 'rxjs/operators';
export class TaminTabsComponent {
    constructor() {
        this.layout = 'horizontal';
        this.tabPosition = 'top';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.tabItems = this.tabs.changes
            .pipe(startWith(''))
            .pipe(delay(0))
            .pipe(map((/**
         * @return {?}
         */
        () => this.tabs.toArray())));
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (!this.activeTab) {
            Promise.resolve().then((/**
             * @return {?}
             */
            () => {
                this.activeTab = this.tabs.first;
            }));
        }
    }
    /**
     * @param {?} tabItem
     * @return {?}
     */
    selectTab(tabItem) {
        if (this.activeTab === tabItem) {
            return;
        }
        if (this.activeTab) {
            this.activeTab.isActive = false;
        }
        this.activeTab = tabItem;
        tabItem.isActive = true;
    }
    /**
     * @return {?}
     */
    getBorderClass() {
        return this.tabPosition === 'top' ? 'border-bottom' : 'border-top';
    }
    /**
     * @return {?}
     */
    onResize() {
        /** @type {?} */
        const hasScroll = this.hasScroll(this.tabHeader.nativeElement, 'horizontal');
        this.scroll = hasScroll;
    }
    /**
     * @private
     * @param {?} el
     * @param {?} direction
     * @return {?}
     */
    hasScroll(el, direction) {
        direction = (direction === 'vertical') ? 'scrollTop' : 'scrollLeft';
        /** @type {?} */
        let result = !!el[direction];
        if (!result) {
            el[direction] = 1;
            result = !!el[direction];
            el[direction] = 0;
        }
        return result;
    }
    /**
     * @param {?} direction
     * @return {?}
     */
    scrollTo(direction) {
        this.tabHeader.nativeElement.scrollLeft += direction === 'left' ? -100 : 100;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onResize();
        }));
    }
}
TaminTabsComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-tabs',
                template: "<div class=\"tabs\">\n  <div *ngIf=\"tabPosition==='top'\" class=\"tab-header\" [ngClass]=\"getBorderClass()\">\n    <div class=\"flex-container\">\n      <div class=\"paddle\" *ngIf=\"scroll\" (click)=\"scrollTo('right')\"><i class=\"icon-right-open\"></i></div>\n      <ul #tabHeader>\n        <li\n          *ngFor=\"let item of tabItems | async\" (click)=\"selectTab(item)\"\n          [ngClass]=\"{'tab-header-item-active' : activeTab == item}\" class=\"tab-header\">\n          <ng-container *ngIf=\"item.labelComponent\">\n            <ng-container *ngTemplateOutlet=\"item.labelComponent.labelContent\">\n            </ng-container>\n          </ng-container>\n        </li>\n      </ul>\n      <div class=\"paddle\" *ngIf=\"scroll\" (click)=\"scrollTo('left')\">\n        <i class=\"icon-left-open\" style=\"margin-right: 5px;margin-left: 0;\"></i>\n      </div>\n    </div>\n  </div>\n  <div class=\"tab-content\" *ngFor=\"let item of tabItems | async\" [hidden]=\"activeTab !== item\">\n    <ng-container *ngTemplateOutlet=\"item.bodyComponent.bodyContent\">\n    </ng-container>\n  </div>\n</div>\n",
                styles: [".flex-container{display:flex;align-items:stretch;background-color:#f1f1f1}ul{list-style-type:none;margin:auto;padding:0;overflow-x:hidden;white-space:nowrap;flex-grow:10;background-color:#fff}li{display:inline-block;padding:10px;cursor:pointer}.tabs{border:1px solid #e0e0e0;margin:3px;background-color:#fff}.tab-header-item{padding:15px;float:right}.tab-header-item-active{border-bottom:3px solid #00f;cursor:auto}.tab-content{padding:10px}li:hover:not(.tab-header-item-active){background-color:#dee2e6;border-bottom:3px solid #dee2e6}.border-top{border-top:1px solid #e0e0e0}.border-bottom{border-bottom:1px solid #e0e0e0}.vertical-item{border:1px solid #e0e0e0;margin:3px}i{margin-left:5px}.vertical-item-header{padding:10px;cursor:pointer}.vertical-item-header:hover{background-color:#dee2e6}.vertical-item-body{padding:10px}.paddle{display:flex;align-items:center;justify-content:center}"]
            }] }
];
TaminTabsComponent.propDecorators = {
    tabs: [{ type: ContentChildren, args: [TaminTabItemComponent,] }],
    tabPosition: [{ type: Input }],
    tabHeader: [{ type: ViewChild, args: ['tabHeader',] }],
    onResize: [{ type: HostListener, args: ['window:resize',] }]
};
if (false) {
    /** @type {?} */
    TaminTabsComponent.prototype.tabs;
    /** @type {?} */
    TaminTabsComponent.prototype.tabItems;
    /** @type {?} */
    TaminTabsComponent.prototype.activeTab;
    /** @type {?} */
    TaminTabsComponent.prototype.layout;
    /** @type {?} */
    TaminTabsComponent.prototype.tabPosition;
    /** @type {?} */
    TaminTabsComponent.prototype.tabHeader;
    /** @type {?} */
    TaminTabsComponent.prototype.scroll;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90YW1pbi1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YW1pbi10YWIvdGFicy90YWJzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUdMLFNBQVMsRUFDVCxlQUFlLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFDekMsS0FBSyxFQUVMLFNBQVMsRUFDVCxTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFFckUsT0FBTyxFQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFPckQsTUFBTSxPQUFPLGtCQUFrQjtJQUwvQjtRQVVFLFdBQU0sR0FBOEIsWUFBWSxDQUFDO1FBQ3hDLGdCQUFXLEdBQXFCLEtBQUssQ0FBQztJQW9FakQsQ0FBQzs7OztJQWhFQyxRQUFRO0lBQ1IsQ0FBQzs7OztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTzthQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDZCxJQUFJLENBQUMsR0FBRzs7O1FBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7OztJQUVELHFCQUFxQjtRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQixPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSTs7O1lBQUMsR0FBRyxFQUFFO2dCQUMxQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ25DLENBQUMsRUFBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7OztJQUVELFNBQVMsQ0FBQyxPQUE4QjtRQUN0QyxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssT0FBTyxFQUFFO1lBQzlCLE9BQU87U0FDUjtRQUVELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7U0FDakM7UUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQztRQUV6QixPQUFPLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDOzs7O0lBR0QsY0FBYztRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQ3JFLENBQUM7Ozs7SUFHRCxRQUFROztjQUNBLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQztRQUM1RSxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUMxQixDQUFDOzs7Ozs7O0lBRU8sU0FBUyxDQUFDLEVBQUUsRUFBRSxTQUFTO1FBQzdCLFNBQVMsR0FBRyxDQUFDLFNBQVMsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7O1lBQ2hFLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQztRQUU1QixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNsQixNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6QixFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ25CO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7Ozs7SUFFRCxRQUFRLENBQUMsU0FBMkI7UUFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsVUFBVSxJQUFJLFNBQVMsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDL0UsQ0FBQzs7OztJQUVELGVBQWU7UUFDYixVQUFVOzs7UUFBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbEIsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7WUE5RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0QixrbUNBQW9DOzthQUVyQzs7O21CQUVFLGVBQWUsU0FBQyxxQkFBcUI7MEJBS3JDLEtBQUs7d0JBQ0wsU0FBUyxTQUFDLFdBQVc7dUJBd0NyQixZQUFZLFNBQUMsZUFBZTs7OztJQTlDN0Isa0NBQ3VDOztJQUN2QyxzQ0FBOEM7O0lBQzlDLHVDQUFpQzs7SUFDakMsb0NBQWlEOztJQUNqRCx5Q0FBK0M7O0lBQy9DLHVDQUE4Qzs7SUFDOUMsb0NBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJDb250ZW50Q2hlY2tlZCxcbiAgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGRyZW4sIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgUXVlcnlMaXN0LFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1RhbWluVGFiSXRlbUNvbXBvbmVudH0gZnJvbSAnLi4vdGFiLWl0ZW0vdGFiLWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2RlbGF5LCBtYXAsIHN0YXJ0V2l0aH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0YW1pbi10YWJzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RhYnMuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90YWJzLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgVGFtaW5UYWJzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBBZnRlckNvbnRlbnRDaGVja2VkLCBBZnRlclZpZXdJbml0IHtcbiAgQENvbnRlbnRDaGlsZHJlbihUYW1pblRhYkl0ZW1Db21wb25lbnQpXG4gIHRhYnM6IFF1ZXJ5TGlzdDxUYW1pblRhYkl0ZW1Db21wb25lbnQ+O1xuICB0YWJJdGVtczogT2JzZXJ2YWJsZTxUYW1pblRhYkl0ZW1Db21wb25lbnRbXT47XG4gIGFjdGl2ZVRhYjogVGFtaW5UYWJJdGVtQ29tcG9uZW50O1xuICBsYXlvdXQ6ICd2ZXJ0aWNhbCcgfCAnaG9yaXpvbnRhbCcgPSAnaG9yaXpvbnRhbCc7XG4gIEBJbnB1dCgpIHRhYlBvc2l0aW9uOiAndG9wJyB8ICdib3R0b20nID0gJ3RvcCc7XG4gIEBWaWV3Q2hpbGQoJ3RhYkhlYWRlcicpIHRhYkhlYWRlcjogRWxlbWVudFJlZjtcbiAgc2Nyb2xsOiBib29sZWFuO1xuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMudGFiSXRlbXMgPSB0aGlzLnRhYnMuY2hhbmdlc1xuICAgICAgLnBpcGUoc3RhcnRXaXRoKCcnKSlcbiAgICAgIC5waXBlKGRlbGF5KDApKVxuICAgICAgLnBpcGUobWFwKCgpID0+IHRoaXMudGFicy50b0FycmF5KCkpKTtcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpIHtcbiAgICBpZiAoIXRoaXMuYWN0aXZlVGFiKSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5hY3RpdmVUYWIgPSB0aGlzLnRhYnMuZmlyc3Q7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBzZWxlY3RUYWIodGFiSXRlbTogVGFtaW5UYWJJdGVtQ29tcG9uZW50KSB7XG4gICAgaWYgKHRoaXMuYWN0aXZlVGFiID09PSB0YWJJdGVtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWN0aXZlVGFiKSB7XG4gICAgICB0aGlzLmFjdGl2ZVRhYi5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuYWN0aXZlVGFiID0gdGFiSXRlbTtcblxuICAgIHRhYkl0ZW0uaXNBY3RpdmUgPSB0cnVlO1xuICB9XG5cblxuICBnZXRCb3JkZXJDbGFzcygpIHtcbiAgICByZXR1cm4gdGhpcy50YWJQb3NpdGlvbiA9PT0gJ3RvcCcgPyAnYm9yZGVyLWJvdHRvbScgOiAnYm9yZGVyLXRvcCc7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJylcbiAgb25SZXNpemUoKSB7XG4gICAgY29uc3QgaGFzU2Nyb2xsID0gdGhpcy5oYXNTY3JvbGwodGhpcy50YWJIZWFkZXIubmF0aXZlRWxlbWVudCwgJ2hvcml6b250YWwnKTtcbiAgICB0aGlzLnNjcm9sbCA9IGhhc1Njcm9sbDtcbiAgfVxuXG4gIHByaXZhdGUgaGFzU2Nyb2xsKGVsLCBkaXJlY3Rpb24pIHtcbiAgICBkaXJlY3Rpb24gPSAoZGlyZWN0aW9uID09PSAndmVydGljYWwnKSA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICAgIGxldCByZXN1bHQgPSAhIWVsW2RpcmVjdGlvbl07XG5cbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgZWxbZGlyZWN0aW9uXSA9IDE7XG4gICAgICByZXN1bHQgPSAhIWVsW2RpcmVjdGlvbl07XG4gICAgICBlbFtkaXJlY3Rpb25dID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHNjcm9sbFRvKGRpcmVjdGlvbjogJ2xlZnQnIHwgJ3JpZ2h0Jykge1xuICAgIHRoaXMudGFiSGVhZGVyLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsTGVmdCArPSBkaXJlY3Rpb24gPT09ICdsZWZ0JyA/IC0xMDAgOiAxMDA7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLm9uUmVzaXplKCk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==