/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
  Created by: k_kaviani
  Revised by: a_amiri
*/
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
// import { Observable } from "rxjs";
import { timeout } from 'rxjs/operators';
/**
 * @template T
 */
var GenericRestService = /** @class */ (function () {
    function GenericRestService(http) {
        this.http = http;
        this.restUrl = '';
        this.timeout = 180000;
        this.pagingPath = '';
    }
    /**
     * @param {?} querySearchParams
     * @param {?} querySortParams
     * @return {?}
     */
    GenericRestService.prototype.getAll = /**
     * @param {?} querySearchParams
     * @param {?} querySortParams
     * @return {?}
     */
    function (querySearchParams, querySortParams) {
        var _this = this;
        /** @type {?} */
        var headers = new HttpHeaders();
        /** @type {?} */
        var params = new HttpParams();
        params.append('filter', JSON.stringify(querySearchParams));
        params.append('sort', JSON.stringify(querySortParams));
        params = params.append('_dc', (new Date()).getTime().toString());
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.http.get(_this.restUrl, { headers: headers, params: params })
                .pipe(timeout(_this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return resolve(response); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(_this.handleError(error)); }));
        }));
    };
    /**
     * @param {?} includeMetaData
     * @param {?} pageNo
     * @param {?} pageSize
     * @param {?} querySearchParams
     * @param {?} querySortParams
     * @return {?}
     */
    GenericRestService.prototype.getPagedEntity = /**
     * @param {?} includeMetaData
     * @param {?} pageNo
     * @param {?} pageSize
     * @param {?} querySearchParams
     * @param {?} querySortParams
     * @return {?}
     */
    function (includeMetaData, pageNo, pageSize, querySearchParams, querySortParams) {
        var _this = this;
        /** @type {?} */
        var params = new HttpParams();
        /** @type {?} */
        var headers = new HttpHeaders();
        params = params.append('filter', JSON.stringify(querySearchParams));
        params = params.append('sort', JSON.stringify(querySortParams));
        //params = params.append('start', pageNo.toString());
        params = params.append('start', ((pageNo - 1) * pageSize).toString());
        params = params.append('limit', pageSize.toString());
        params = params.append('_dc', (new Date()).getTime().toString());
        /** @type {?} */
        var url = this.restUrl + "/" + this.pagingPath;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.http.get(url, { headers: headers, params: params })
                .pipe(timeout(_this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return resolve(response); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(_this.handleError(error)); }));
        }));
    };
    /**
     * @param {?} includeMetaData
     * @param {?} pageNo
     * @param {?} pageSize
     * @param {?} querySearchParams
     * @param {?} querySortParams
     * @return {?}
     */
    GenericRestService.prototype.getPagedObject = /**
     * @param {?} includeMetaData
     * @param {?} pageNo
     * @param {?} pageSize
     * @param {?} querySearchParams
     * @param {?} querySortParams
     * @return {?}
     */
    function (includeMetaData, pageNo, pageSize, querySearchParams, querySortParams) {
        var _this = this;
        /** @type {?} */
        var params = new HttpParams();
        /** @type {?} */
        var headers = new HttpHeaders();
        params = params.append('filter', JSON.stringify(querySearchParams));
        params = params.append('sort', JSON.stringify(querySortParams));
        // params = params.append('start', pageNo.toString());
        params = params.append('start', ((pageNo - 1) * pageSize).toString());
        params = params.append('limit', pageSize.toString());
        params = params.append('_dc', (new Date()).getTime().toString());
        /** @type {?} */
        var url = this.restUrl + "/" + this.pagingPath;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.http.get(url, { headers: headers, params: params })
                .pipe(timeout(_this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return resolve(response); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(_this.handleError(error)); }));
        }));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    GenericRestService.prototype.getById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var url = this.restUrl + "/" + id;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.http.get(url)
                .pipe(timeout(_this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return resolve(response); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(_this.handleError(error)); }));
        }));
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    GenericRestService.prototype.getByMultipleId = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        /** @type {?} */
        var url = "" + this.restUrl;
        ids.forEach((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            url += "/" + id;
        }));
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.http.get(url)
                .pipe(timeout(_this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return resolve(response); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(_this.handleError(error)); }));
        }));
    };
    /**
     * @param {?} dataItem
     * @return {?}
     */
    GenericRestService.prototype.create = /**
     * @param {?} dataItem
     * @return {?}
     */
    function (dataItem) {
        var _this = this;
        /** @type {?} */
        var url = this.restUrl;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.http
                .post(url, dataItem)
                .pipe(timeout(_this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return resolve(response); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(_this.handleError(error)); }));
        }));
    };
    /**
     * @param {?} dataItem
     * @return {?}
     */
    GenericRestService.prototype.update = /**
     * @param {?} dataItem
     * @return {?}
     */
    function (dataItem) {
        var _this = this;
        /** @type {?} */
        var url = this.restUrl;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.http
                .put(url, dataItem)
                .pipe(timeout(_this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return resolve(response); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(_this.handleError(error)); }));
        }));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    GenericRestService.prototype.delete = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var url = this.restUrl + "/" + id;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.http
                .delete(url)
                .pipe(timeout(_this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return resolve(response); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(_this.handleError(error)); }));
        }));
    };
    /**
     * @protected
     * @param {?} error
     * @return {?}
     */
    GenericRestService.prototype.handleError = /**
     * @protected
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return error;
    };
    GenericRestService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GenericRestService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return GenericRestService;
}());
export { GenericRestService };
if (false) {
    /** @type {?} */
    GenericRestService.prototype.restUrl;
    /** @type {?} */
    GenericRestService.prototype.timeout;
    /**
     * @type {?}
     * @private
     */
    GenericRestService.prototype.pagingPath;
    /**
     * @type {?}
     * @private
     */
    GenericRestService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJpYy1yZXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90YW1pbi1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZ2VuZXJpYy1yZXN0LXNlcnZpY2UvZ2VuZXJpYy1yZXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFLQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDOztBQU0zRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFFekM7SUFNRSw0QkFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUo3QixZQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsWUFBTyxHQUFHLE1BQU0sQ0FBQztRQUNoQixlQUFVLEdBQUcsRUFBRSxDQUFDO0lBR3hCLENBQUM7Ozs7OztJQUVELG1DQUFNOzs7OztJQUFOLFVBQU8saUJBQWdDLEVBQUUsZUFBNEI7UUFBckUsaUJBYUM7O1lBWk8sT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFOztZQUM3QixNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUU7UUFDN0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7UUFDM0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ2pFLE9BQU8sSUFBSSxPQUFPOzs7OztRQUFzQixVQUFDLE9B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T0FBQSxNQUFNLENBQUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUEvQixDQUErQixFQUFDLENBQUM7UUFDakUsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVELG1DQUFNOzs7O0lBQU4sVUFBTyxFQUFVO1FBQWpCLGlCQVVDOztZQVRPLEdBQUcsR0FBTSxJQUFJLENBQUMsT0FBTyxTQUFJLEVBQUk7UUFDbkMsT0FBTyxJQUFJLE9BQU87Ozs7O1FBQU8sVUFBQyxPQUFPLEVBQUUsTUFBTTtZQUN2QyxLQUFJLENBQUMsSUFBSTtpQkFDTixNQUFNLENBQUMsR0FBRyxDQUFDO2lCQUNYLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUMzQixTQUFTLEVBQUU7aUJBQ1gsSUFBSTs7OztZQUFDLFVBQUMsUUFBYSxJQUFLLE9BQUEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFqQixDQUFpQixFQUFDO2lCQUMxQyxLQUFLOzs7O1lBQUMsVUFBQyxLQUFlLElBQUssT0FBQSxNQUFNLENBQUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUEvQixDQUErQixFQUFDLENBQUM7UUFDakUsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7SUFFUyx3Q0FBVzs7Ozs7SUFBckIsVUFBc0IsS0FBVTtRQUM5QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7O2dCQS9IRixVQUFVOzs7O2dCQVJGLFVBQVU7O0lBd0luQix5QkFBQztDQUFBLEFBaElELElBZ0lDO1NBL0hZLGtCQUFrQjs7O0lBQzdCLHFDQUFvQjs7SUFDcEIscUNBQXdCOzs7OztJQUN4Qix3Q0FBd0I7Ozs7O0lBRVosa0NBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgQ3JlYXRlZCBieToga19rYXZpYW5pXG4gIFJldmlzZWQgYnk6IGFfYW1pcmlcbiovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzLCBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgU2VhcmNoUGFyYW0gfSBmcm9tICcuLi8uLi9tb2RlbHMvc2VhcmNoLXBhcmFtLm1vZGVsJztcbmltcG9ydCB7IFNvcnRQYXJhbSB9IGZyb20gJy4uLy4uL21vZGVscy9zb3J0LXBhcmFtLm1vZGVsJztcbmltcG9ydCB7IEVudGl0eVJlc3VsdFdyYXBwZXIgfSBmcm9tICcuLi8uLi9tb2RlbHMvZW50aXR5LXJlc3VsdC13cmFwcGVyLm1vZGVsJztcbmltcG9ydCB7IE9iamVjdFJlc3VsdFdyYXBwZXIgfSBmcm9tICcuLi8uLi9tb2RlbHMvb2JqZWN0LXJlc3VsdC13cmFwcGVyLm1vZGVsJztcbi8vIGltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgdGltZW91dCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEdlbmVyaWNSZXN0U2VydmljZTxUPiB7XG4gIHB1YmxpYyByZXN0VXJsID0gJyc7XG4gIHB1YmxpYyB0aW1lb3V0ID0gMTgwMDAwO1xuICBwcml2YXRlIHBhZ2luZ1BhdGggPSAnJztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgfVxuXG4gIGdldEFsbChxdWVyeVNlYXJjaFBhcmFtczogU2VhcmNoUGFyYW1bXSwgcXVlcnlTb3J0UGFyYW1zOiBTb3J0UGFyYW1bXSk6IFByb21pc2U8T2JqZWN0UmVzdWx0V3JhcHBlcj4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcbiAgICBsZXQgcGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKTtcbiAgICBwYXJhbXMuYXBwZW5kKCdmaWx0ZXInLCBKU09OLnN0cmluZ2lmeShxdWVyeVNlYXJjaFBhcmFtcykpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ3NvcnQnLCBKU09OLnN0cmluZ2lmeShxdWVyeVNvcnRQYXJhbXMpKTtcbiAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdfZGMnLCAobmV3IERhdGUoKSkuZ2V0VGltZSgpLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxPYmplY3RSZXN1bHRXcmFwcGVyPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmh0dHAuZ2V0PE9iamVjdFJlc3VsdFdyYXBwZXI+KHRoaXMucmVzdFVybCwgeyBoZWFkZXJzLCBwYXJhbXMgfSlcbiAgICAgICAgLnBpcGUodGltZW91dCh0aGlzLnRpbWVvdXQpKVxuICAgICAgICAudG9Qcm9taXNlKClcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlOiBPYmplY3RSZXN1bHRXcmFwcGVyKSA9PiByZXNvbHZlKHJlc3BvbnNlKSlcbiAgICAgICAgLmNhdGNoKChlcnJvcjogUmVzcG9uc2UpID0+IHJlamVjdCh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0UGFnZWRFbnRpdHkoaW5jbHVkZU1ldGFEYXRhOiBib29sZWFuLCBwYWdlTm86IG51bWJlciwgcGFnZVNpemU6IG51bWJlciwgcXVlcnlTZWFyY2hQYXJhbXM6IFNlYXJjaFBhcmFtW10sXG4gICAgcXVlcnlTb3J0UGFyYW1zOiBTb3J0UGFyYW1bXSk6IFByb21pc2U8RW50aXR5UmVzdWx0V3JhcHBlcjxUPj4ge1xuICAgIGxldCBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcbiAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdmaWx0ZXInLCBKU09OLnN0cmluZ2lmeShxdWVyeVNlYXJjaFBhcmFtcykpO1xuICAgIHBhcmFtcyA9IHBhcmFtcy5hcHBlbmQoJ3NvcnQnLCBKU09OLnN0cmluZ2lmeShxdWVyeVNvcnRQYXJhbXMpKTtcbiAgICAvL3BhcmFtcyA9IHBhcmFtcy5hcHBlbmQoJ3N0YXJ0JywgcGFnZU5vLnRvU3RyaW5nKCkpO1xuICAgIHBhcmFtcyA9IHBhcmFtcy5hcHBlbmQoJ3N0YXJ0JywgKChwYWdlTm8gLSAxKSAqIHBhZ2VTaXplKS50b1N0cmluZygpKTtcbiAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdsaW1pdCcsIHBhZ2VTaXplLnRvU3RyaW5nKCkpO1xuICAgIHBhcmFtcyA9IHBhcmFtcy5hcHBlbmQoJ19kYycsIChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkudG9TdHJpbmcoKSk7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5yZXN0VXJsfS8ke3RoaXMucGFnaW5nUGF0aH1gO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxFbnRpdHlSZXN1bHRXcmFwcGVyPFQ+PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmh0dHAuZ2V0PEVudGl0eVJlc3VsdFdyYXBwZXI8VD4+KHVybCwgeyBoZWFkZXJzLCBwYXJhbXMgfSlcbiAgICAgICAgLnBpcGUodGltZW91dCh0aGlzLnRpbWVvdXQpKVxuICAgICAgICAudG9Qcm9taXNlKClcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlOiBFbnRpdHlSZXN1bHRXcmFwcGVyPFQ+KSA9PiByZXNvbHZlKHJlc3BvbnNlKSlcbiAgICAgICAgLmNhdGNoKChlcnJvcjogUmVzcG9uc2UpID0+IHJlamVjdCh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0UGFnZWRPYmplY3QoaW5jbHVkZU1ldGFEYXRhOiBib29sZWFuLCBwYWdlTm86IG51bWJlciwgcGFnZVNpemU6IG51bWJlciwgcXVlcnlTZWFyY2hQYXJhbXM6IFNlYXJjaFBhcmFtW10sXG4gICAgcXVlcnlTb3J0UGFyYW1zOiBTb3J0UGFyYW1bXSk6IFByb21pc2U8T2JqZWN0UmVzdWx0V3JhcHBlcj4ge1xuICAgIGxldCBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcbiAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdmaWx0ZXInLCBKU09OLnN0cmluZ2lmeShxdWVyeVNlYXJjaFBhcmFtcykpO1xuICAgIHBhcmFtcyA9IHBhcmFtcy5hcHBlbmQoJ3NvcnQnLCBKU09OLnN0cmluZ2lmeShxdWVyeVNvcnRQYXJhbXMpKTtcbiAgICAvLyBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdzdGFydCcsIHBhZ2VOby50b1N0cmluZygpKTtcbiAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdzdGFydCcsICgocGFnZU5vIC0gMSkgKiBwYWdlU2l6ZSkudG9TdHJpbmcoKSk7XG4gICAgcGFyYW1zID0gcGFyYW1zLmFwcGVuZCgnbGltaXQnLCBwYWdlU2l6ZS50b1N0cmluZygpKTtcbiAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdfZGMnLCAobmV3IERhdGUoKSkuZ2V0VGltZSgpLnRvU3RyaW5nKCkpO1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMucmVzdFVybH0vJHt0aGlzLnBhZ2luZ1BhdGh9YDtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8T2JqZWN0UmVzdWx0V3JhcHBlcj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5odHRwLmdldDxPYmplY3RSZXN1bHRXcmFwcGVyPih1cmwsIHsgaGVhZGVycywgcGFyYW1zIH0pXG4gICAgICAgIC5waXBlKHRpbWVvdXQodGhpcy50aW1lb3V0KSlcbiAgICAgICAgLnRvUHJvbWlzZSgpXG4gICAgICAgIC50aGVuKChyZXNwb25zZTogT2JqZWN0UmVzdWx0V3JhcHBlcikgPT4gcmVzb2x2ZShyZXNwb25zZSkpXG4gICAgICAgIC5jYXRjaCgoZXJyb3I6IFJlc3BvbnNlKSA9PiByZWplY3QodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldEJ5SWQoaWQ6IG51bWJlcik6IFByb21pc2U8T2JqZWN0UmVzdWx0V3JhcHBlcj4ge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMucmVzdFVybH0vJHtpZH1gO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxPYmplY3RSZXN1bHRXcmFwcGVyPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmh0dHAuZ2V0PE9iamVjdFJlc3VsdFdyYXBwZXI+KHVybClcbiAgICAgICAgLnBpcGUodGltZW91dCh0aGlzLnRpbWVvdXQpKVxuICAgICAgICAudG9Qcm9taXNlKClcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlOiBPYmplY3RSZXN1bHRXcmFwcGVyKSA9PiByZXNvbHZlKHJlc3BvbnNlKSlcbiAgICAgICAgLmNhdGNoKChlcnJvcjogUmVzcG9uc2UpID0+IHJlamVjdCh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0QnlNdWx0aXBsZUlkKGlkczogc3RyaW5nW10pOiBQcm9taXNlPE9iamVjdFJlc3VsdFdyYXBwZXI+IHtcbiAgICBsZXQgdXJsID0gYCR7dGhpcy5yZXN0VXJsfWA7XG4gICAgaWRzLmZvckVhY2goaWQgPT4ge1xuICAgICAgdXJsICs9IGAvJHtpZH1gO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxPYmplY3RSZXN1bHRXcmFwcGVyPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmh0dHAuZ2V0PE9iamVjdFJlc3VsdFdyYXBwZXI+KHVybClcbiAgICAgICAgLnBpcGUodGltZW91dCh0aGlzLnRpbWVvdXQpKVxuICAgICAgICAudG9Qcm9taXNlKClcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlOiBPYmplY3RSZXN1bHRXcmFwcGVyKSA9PiByZXNvbHZlKHJlc3BvbnNlKSlcbiAgICAgICAgLmNhdGNoKChlcnJvcjogUmVzcG9uc2UpID0+IHJlamVjdCh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlKGRhdGFJdGVtOiBUKTogUHJvbWlzZTxUPiB7XG4gICAgY29uc3QgdXJsID0gdGhpcy5yZXN0VXJsO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxUPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmh0dHBcbiAgICAgICAgLnBvc3QodXJsLCBkYXRhSXRlbSlcbiAgICAgICAgLnBpcGUodGltZW91dCh0aGlzLnRpbWVvdXQpKVxuICAgICAgICAudG9Qcm9taXNlKClcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlOiBUKSA9PiByZXNvbHZlKHJlc3BvbnNlKSlcbiAgICAgICAgLmNhdGNoKChlcnJvcjogUmVzcG9uc2UpID0+IHJlamVjdCh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkpO1xuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlKGRhdGFJdGVtOiBUKTogUHJvbWlzZTxUPiB7XG4gICAgY29uc3QgdXJsID0gdGhpcy5yZXN0VXJsO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxUPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmh0dHBcbiAgICAgICAgLnB1dCh1cmwsIGRhdGFJdGVtKVxuICAgICAgICAucGlwZSh0aW1lb3V0KHRoaXMudGltZW91dCkpXG4gICAgICAgIC50b1Byb21pc2UoKVxuICAgICAgICAudGhlbigocmVzcG9uc2U6IFQpID0+IHJlc29sdmUocmVzcG9uc2UpKVxuICAgICAgICAuY2F0Y2goKGVycm9yOiBSZXNwb25zZSkgPT4gcmVqZWN0KHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSk7XG4gICAgfSk7XG4gIH1cblxuICBkZWxldGUoaWQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMucmVzdFVybH0vJHtpZH1gO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmh0dHBcbiAgICAgICAgLmRlbGV0ZSh1cmwpXG4gICAgICAgIC5waXBlKHRpbWVvdXQodGhpcy50aW1lb3V0KSlcbiAgICAgICAgLnRvUHJvbWlzZSgpXG4gICAgICAgIC50aGVuKChyZXNwb25zZTogYW55KSA9PiByZXNvbHZlKHJlc3BvbnNlKSlcbiAgICAgICAgLmNhdGNoKChlcnJvcjogUmVzcG9uc2UpID0+IHJlamVjdCh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGhhbmRsZUVycm9yKGVycm9yOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxufVxuIl19