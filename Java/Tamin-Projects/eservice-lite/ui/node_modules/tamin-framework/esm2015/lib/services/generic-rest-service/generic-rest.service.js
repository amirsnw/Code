/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
  Created by: k_kaviani
  Revised by: a_amiri
*/
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
// import { Observable } from "rxjs";
import { timeout } from 'rxjs/operators';
/**
 * @template T
 */
export class GenericRestService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.restUrl = '';
        this.timeout = 180000;
        this.pagingPath = '';
    }
    /**
     * @param {?} querySearchParams
     * @param {?} querySortParams
     * @return {?}
     */
    getAll(querySearchParams, querySortParams) {
        /** @type {?} */
        const headers = new HttpHeaders();
        /** @type {?} */
        let params = new HttpParams();
        params.append('filter', JSON.stringify(querySearchParams));
        params.append('sort', JSON.stringify(querySortParams));
        params = params.append('_dc', (new Date()).getTime().toString());
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.http.get(this.restUrl, { headers, params })
                .pipe(timeout(this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve(response)))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(this.handleError(error))));
        }));
    }
    /**
     * @param {?} includeMetaData
     * @param {?} pageNo
     * @param {?} pageSize
     * @param {?} querySearchParams
     * @param {?} querySortParams
     * @return {?}
     */
    getPagedEntity(includeMetaData, pageNo, pageSize, querySearchParams, querySortParams) {
        /** @type {?} */
        let params = new HttpParams();
        /** @type {?} */
        const headers = new HttpHeaders();
        params = params.append('filter', JSON.stringify(querySearchParams));
        params = params.append('sort', JSON.stringify(querySortParams));
        //params = params.append('start', pageNo.toString());
        params = params.append('start', ((pageNo - 1) * pageSize).toString());
        params = params.append('limit', pageSize.toString());
        params = params.append('_dc', (new Date()).getTime().toString());
        /** @type {?} */
        const url = `${this.restUrl}/${this.pagingPath}`;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.http.get(url, { headers, params })
                .pipe(timeout(this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve(response)))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(this.handleError(error))));
        }));
    }
    /**
     * @param {?} includeMetaData
     * @param {?} pageNo
     * @param {?} pageSize
     * @param {?} querySearchParams
     * @param {?} querySortParams
     * @return {?}
     */
    getPagedObject(includeMetaData, pageNo, pageSize, querySearchParams, querySortParams) {
        /** @type {?} */
        let params = new HttpParams();
        /** @type {?} */
        const headers = new HttpHeaders();
        params = params.append('filter', JSON.stringify(querySearchParams));
        params = params.append('sort', JSON.stringify(querySortParams));
        // params = params.append('start', pageNo.toString());
        params = params.append('start', ((pageNo - 1) * pageSize).toString());
        params = params.append('limit', pageSize.toString());
        params = params.append('_dc', (new Date()).getTime().toString());
        /** @type {?} */
        const url = `${this.restUrl}/${this.pagingPath}`;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.http.get(url, { headers, params })
                .pipe(timeout(this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve(response)))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(this.handleError(error))));
        }));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getById(id) {
        /** @type {?} */
        const url = `${this.restUrl}/${id}`;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.http.get(url)
                .pipe(timeout(this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve(response)))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(this.handleError(error))));
        }));
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    getByMultipleId(ids) {
        /** @type {?} */
        let url = `${this.restUrl}`;
        ids.forEach((/**
         * @param {?} id
         * @return {?}
         */
        id => {
            url += `/${id}`;
        }));
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.http.get(url)
                .pipe(timeout(this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve(response)))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(this.handleError(error))));
        }));
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    create(dataItem) {
        /** @type {?} */
        const url = this.restUrl;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.http
                .post(url, dataItem)
                .pipe(timeout(this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve(response)))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(this.handleError(error))));
        }));
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    update(dataItem) {
        /** @type {?} */
        const url = this.restUrl;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.http
                .put(url, dataItem)
                .pipe(timeout(this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve(response)))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(this.handleError(error))));
        }));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    delete(id) {
        /** @type {?} */
        const url = `${this.restUrl}/${id}`;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.http
                .delete(url)
                .pipe(timeout(this.timeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => resolve(response)))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(this.handleError(error))));
        }));
    }
    /**
     * @protected
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        return error;
    }
}
GenericRestService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GenericRestService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    GenericRestService.prototype.restUrl;
    /** @type {?} */
    GenericRestService.prototype.timeout;
    /**
     * @type {?}
     * @private
     */
    GenericRestService.prototype.pagingPath;
    /**
     * @type {?}
     * @private
     */
    GenericRestService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,