/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { TaminRestService } from '../tamin-rest-service/tamin-rest.service';
import { TaminStorageService } from '../tamin-storage/tamin-storage.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../tamin-rest-service/tamin-rest.service";
import * as i3 from "../tamin-storage/tamin-storage.service";
import * as i4 from "@angular/common/http";
export class TaminSecurityService {
    /**
     * @param {?} taminApplicationConfig
     * @param {?} router
     * @param {?} taminRestService
     * @param {?} taminStorageService
     * @param {?} httpClient
     */
    constructor(taminApplicationConfig, router, taminRestService, taminStorageService, httpClient) {
        this.taminApplicationConfig = taminApplicationConfig;
        this.router = router;
        this.taminRestService = taminRestService;
        this.taminStorageService = taminStorageService;
        this.httpClient = httpClient;
        this._currentUser = null;
        this.tokenName = 'access_token';
        this.tokenExpire = 'expires_in';
        this.redirectUrl = 'redirect_url';
        // debugger;
    }
    /**
     * @return {?}
     */
    get currentUser() {
        return this._currentUser;
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    addRedirectUrl(url) {
        this.taminStorageService.set(this.redirectUrl, url);
    }
    /**
     * @return {?}
     */
    getRedirectUrl() {
        return this.taminStorageService.get(this.redirectUrl);
    }
    /**
     * @return {?}
     */
    removeRedirectUrl() {
        this.taminStorageService.remove(this.redirectUrl);
    }
    /**
     * @private
     * @param {?} token
     * @param {?} expireIn
     * @return {?}
     */
    addToken(token, expireIn) {
        this.taminStorageService.set(this.tokenName, token);
        this.taminStorageService.set(this.tokenExpire, expireIn);
    }
    /**
     * @return {?}
     */
    getToken() {
        return this.taminStorageService.get(this.tokenName);
    }
    /**
     * @return {?}
     */
    hasToken() {
        return this.taminStorageService.exists(this.tokenName);
    }
    /**
     * @return {?}
     */
    removeToken() {
        this.taminStorageService.remove(this.tokenName);
        this.taminStorageService.remove(this.tokenExpire);
    }
    /**
     * @return {?}
     */
    checkToken() {
        if (!this.taminStorageService.exists(this.tokenName) || !this.taminStorageService.exists(this.tokenExpire)) {
            return false;
        }
        /** @type {?} */
        const accessToken = this.taminStorageService.get(this.tokenName);
        /** @type {?} */
        const expiresIn = this.taminStorageService.get(this.tokenExpire);
        /** @type {?} */
        const thisTime = Number(new Date().getTime());
        if (Number(thisTime) > Number(expiresIn)) {
            this.removeToken();
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    loginCallbackCheck() {
        // debugger;
        /** @type {?} */
        const tmp1 = window.location.hash.replace('#', '').split('&');
        /** @type {?} */
        const hashParams = tmp1.map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            /** @type {?} */
            const t = value.split('=');
            /** @type {?} */
            const n = t[0];
            /** @type {?} */
            const v = t[1];
            /** @type {?} */
            const result = {};
            result[n] = v;
            return result;
        }));
        /** @type {?} */
        const tmp2 = window.location.search.replace('?', '').split('&');
        /** @type {?} */
        const searchParams = tmp2.map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            /** @type {?} */
            const t = value.split('=');
            /** @type {?} */
            const n = t[0];
            /** @type {?} */
            const v = t[1];
            /** @type {?} */
            const result = {};
            result[n] = v;
            return result;
        }));
        /** @type {?} */
        const accessToken = hashParams.find((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            return value.hasOwnProperty('access_token');
        }));
        /** @type {?} */
        const expiresIn = hashParams.find((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            return value.hasOwnProperty('expires_in');
        }));
        /** @type {?} */
        const hp = searchParams.find((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            return value.hasOwnProperty('hp');
        }));
        if (accessToken && expiresIn) {
            /** @type {?} */
            const currentTime = new Date().getTime();
            this.addToken(accessToken['access_token'], Number(currentTime) + (Number(expiresIn['expires_in']) * 1000));
            window.history.replaceState({}, document.title, '');
            if (hp) {
                window.history.replaceState({}, document.title, '/#/' + hp['hp']);
            }
            else {
                window.history.replaceState({}, document.title, '/#/main');
            }
        }
    }
    /**
     * @return {?}
     */
    getUserName() {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.taminRestService.getAll(this.taminApplicationConfig.getUserNameUrl)
                .then((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                resolve(`${data.data.firstName} ${data.data.lastName}`);
            }))
                .catch((/**
             * @param {?} reason
             * @return {?}
             */
            reason => {
                reject('');
            }));
        }));
    }
    /**
     * @return {?}
     */
    getCurrentUser() {
        this._currentUser = null;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.taminRestService.getAll(this.taminApplicationConfig.getUserNameUrl)
                .then((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                this._currentUser = data.data;
                resolve(data.data);
            }))
                .catch((/**
             * @param {?} reason
             * @return {?}
             */
            reason => {
                reject(reason);
            }));
        }));
    }
    /**
     * @private
     * @return {?}
     */
    redirectToLoginWithCordova() {
        this.router.navigate(['login']);
        // const url = [
        //   this.taminApplicationConfig.authenticationEndpoint,
        //   '?',
        //   // `redirect_uri=${window.location.href}`,
        //   `redirect_uri=${this.taminApplicationConfig.redirectUrl}`,
        //   '&',
        //   `response_type=${this.taminApplicationConfig.responseType}`,
        //   '&',
        //   `client_id=${this.taminApplicationConfig.clientId}`
        // ].join('');
        //
        // SafariViewController.isAvailable(function (available) {
        //   if (available) {
        //     SafariViewController.show(
        //       {
        //         url: url
        //       },
        //       function (result) {
        //       },
        //       function (error) {
        //       }
        //     );
        //   }
        // });
    }
    /**
     * @private
     * @param {?=} url
     * @return {?}
     */
    redirectToLoginWithBrowser(url = '') {
        this.removeToken();
        /** @type {?} */
        const adressParts = url === '' ? window.location.href.split('/#/') : url;
        /** @type {?} */
        let hp = '';
        /** @type {?} */
        let returnUrl = '';
        if (adressParts.length === 1) {
            returnUrl = adressParts[0];
        }
        else {
            hp = adressParts[1];
            returnUrl = adressParts[0] + '?hp=' + hp;
        }
        window.location.href = [
            this.taminApplicationConfig.authenticationEndpoint,
            '?',
            `redirect_uri=${this.taminApplicationConfig.redirectUrl}`,
            '&',
            `response_type=${this.taminApplicationConfig.responseType}`,
            '&',
            `client_id=${this.taminApplicationConfig.clientId}`
        ].join('');
    }
    /**
     * @param {?=} url
     * @return {?}
     */
    redirectToLogin(url = '') {
        if (window.hasOwnProperty('cordova')) {
            this.redirectToLoginWithCordova();
        }
        else {
            if (url !== '') {
                this.addRedirectUrl(url);
            }
            this.redirectToLoginWithBrowser(url);
        }
    }
    /**
     * @return {?}
     */
    getLoginUrl() {
        /** @type {?} */
        const tmp = [
            this.taminApplicationConfig.authenticationEndpoint,
            '?',
            `redirect_uri=${this.taminApplicationConfig.redirectUrl}`,
            '&',
            `response_type=${this.taminApplicationConfig.responseType}`,
            '&',
            `client_id=${this.taminApplicationConfig.clientId}`
        ].join('');
        return tmp;
    }
    /**
     * @return {?}
     */
    redirectToLogout() {
        if (window.hasOwnProperty('cordova')) {
            this.removeToken();
        }
        else {
            /** @type {?} */
            const returnUrl = this.taminApplicationConfig.baseUrl;
            this.removeToken();
            window.location.href =
                `${this.taminApplicationConfig.logoutUrl}?redirect_uri=${this.taminApplicationConfig.redirectUrl}&response_type=${this.taminApplicationConfig.responseType}&client_id=${this.taminApplicationConfig.clientId}`;
        }
    }
    /**
     * @param {?} un
     * @param {?} pw
     * @param {?} clientId
     * @param {?} security
     * @return {?}
     */
    mobileLogin(un, pw, clientId, security) {
        this.removeToken();
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            taminLogin.login(un, pw, this.taminApplicationConfig.authenticationEndpoint, clientId, security, (/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                /** @type {?} */
                const result = JSON.parse(value);
                /** @type {?} */
                const currentTime = new Date().getTime();
                this.addToken(result.access_token, Number(currentTime) + (Number(result.expires_in) * 1000));
                resolve();
            }), (/**
             * @return {?}
             */
            () => {
                reject();
            }));
        }));
    }
    /**
     * @param {?} url
     * @return {?}
     */
    hasAccressTo(url) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.httpClient.get(url)
                .toPromise()
                .then((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                resolve(true);
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                if (error.status === 401) {
                    resolve(false);
                }
            }));
        }));
    }
}
TaminSecurityService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
TaminSecurityService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ['taminApplicationConfig',] }] },
    { type: Router },
    { type: TaminRestService },
    { type: TaminStorageService },
    { type: HttpClient }
];
/** @nocollapse */ TaminSecurityService.ngInjectableDef = i0.defineInjectable({ factory: function TaminSecurityService_Factory() { return new TaminSecurityService(i0.inject("taminApplicationConfig"), i0.inject(i1.Router), i0.inject(i2.TaminRestService), i0.inject(i3.TaminStorageService), i0.inject(i4.HttpClient)); }, token: TaminSecurityService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype._currentUser;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.tokenName;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.tokenExpire;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.redirectUrl;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.taminApplicationConfig;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.taminRestService;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.taminStorageService;
    /**
     * @type {?}
     * @private
     */
    TaminSecurityService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,