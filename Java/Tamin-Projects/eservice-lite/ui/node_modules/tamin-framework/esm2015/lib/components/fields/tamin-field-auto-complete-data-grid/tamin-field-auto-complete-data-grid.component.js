/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { TaminDataGridComponent } from '../../tamin-data-grid/tamin-data-grid.component';
import { TaminDataGridConfiguration } from '../../../helpers/tamin.data.grid.configuration/tamin.data.grid.configuration';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FieldBaseComponent } from '../../../base/field-base.component';
import { fromEvent, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';
import { PickerContainerComponent } from '../../containers/picker-container/picker-container.component';
import { SearchOperator } from '../../../models/search-param.model';
export class TaminFieldAutoCompleteDataGridComponent extends FieldBaseComponent {
    constructor() {
        super(...arguments);
        this.maxSearchTermLength = 1;
        this.searchOperator = 'LIKE';
        this.searchPattern = '*{term}*';
        this.searchOperatorType = SearchOperator.EQUAL;
        this.beforeLoad = new EventEmitter();
        this.searchTerm = new Subject();
        this.filter = [];
        this.currentValue = '';
    }
    /**
     * @return {?}
     */
    initializeComponent() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.picker.parent = this.inputElement;
            this.search(this.searchTerm).subscribe();
            this.theGrid.configuration = this.dataGridConfiguration;
            this.control = this.controlContainer.control.get(this.formControlName);
            if (this.casecadeControlName) {
                this.parent = this.controlContainer.control.get(this.casecadeControlName);
                this.subscription.add(this.parent.valueChanges.subscribe((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => {
                    if (value && value !== '') {
                        this.parentValue = value;
                    }
                })));
            }
        }), 0);
    }
    /**
     * @return {?}
     */
    initValueAccessor() {
        /** @type {?} */
        const keyups = fromEvent(this.inputElement.nativeElement, 'keyup');
        this.subscription.add(keyups.subscribe((/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            if (evt.target.value.length >= this.maxSearchTermLength) {
                this.searchTerm.next(evt.target.value);
            }
        })));
        /** @type {?} */
        const focuses = fromEvent(this.inputElement.nativeElement, 'focus');
        this.subscription.add(focuses.subscribe((/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            this.onTouched();
        })));
    }
    /**
     * @return {?}
     */
    hidePopup() {
        this.picker.hide();
    }
    /**
     * @return {?}
     */
    showPopup() {
        this.picker.show();
        if (this.parentValue && this.parentValue !== '') {
            /** @type {?} */
            const tmp = this.theGrid.searchParams.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.property === this.parentValue));
            if (tmp) {
                this.theGrid.searchParams = this.theGrid.searchParams.filter((/**
                 * @param {?} obj
                 * @return {?}
                 */
                obj => obj !== tmp));
            }
            this.theGrid.searchParams.push({
                property: this.casecadeControlFieldName,
                value: this.parentValue,
                operator: this.searchOperatorType
            });
        }
        this.theGrid.refreshData();
    }
    /**
     * @param {?} terms
     * @return {?}
     */
    search(terms) {
        return terms.pipe(debounceTime(400), distinctUntilChanged(), switchMap((/**
         * @param {?} term
         * @return {?}
         */
        term => this.searchEntries(term))));
    }
    /**
     * @param {?} term
     * @return {?}
     */
    searchEntries(term) {
        this.currentValue = '';
        if (term === '') {
            this.hidePopup();
        }
        else {
            this.theGrid.searchParams = [];
            /** @type {?} */
            const searchTerm = this.searchPattern.replace('{term}', term);
            this.theGrid.searchParams = [{ property: this.displayField, value: searchTerm, operator: this.searchOperator }];
            this.theGrid.searchParams = this.theGrid.searchParams.concat(this.filter);
            if (this.parentValue && this.parentValue !== '') {
                this.theGrid.searchParams.push({
                    property: this.casecadeControlFieldName,
                    value: this.parentValue,
                    operator: this.searchOperatorType
                });
            }
            this.beforeLoad.emit();
            // this.theGrid.refreshData();
            this.showPopup();
        }
        this.onChange('');
        return term === '' ? [] : term;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    onItemSelected(val) {
        if (!val) {
            this.onChange('');
            this.hidePopup();
            return;
        }
        /** @type {?} */
        const displayField = this.deepFind(val, this.displayField);
        /** @type {?} */
        const valueField = this.deepFind(val, this.valueField);
        if (!displayField || !valueField) {
            this.inputElement.nativeElement.value = '';
            this.currentValue = '';
            this.onChange('');
            return;
        }
        this.inputElement.nativeElement.value = displayField;
        this.currentValue = valueField;
        this.onChange(valueField);
        this.hidePopup();
    }
    /**
     * @return {?}
     */
    afterRefreshData() {
        this.picker.update();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        /** @type {?} */
        const theValue = value == null ? '' : value;
        if (theValue !== '') {
            this.loadData(theValue);
        }
        else {
            this.currentValue = '';
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.inputElement.nativeElement.value = '';
            }), 0);
        }
    }
    /**
     * @private
     * @param {?} theValue
     * @return {?}
     */
    loadData(theValue) {
        /** @type {?} */
        const theUrl = this.dataGridConfiguration.serviceUrl;
        /** @type {?} */
        const id = this.dataGridConfiguration.id;
        /** @type {?} */
        const searchParam = [
            {
                property: id,
                value: theValue,
                operator: this.searchOperatorType
            }
        ];
        if (this.parentValue && this.parentValue !== '') {
            searchParam.push({
                property: this.casecadeControlFieldName,
                value: this.parentValue,
                operator: this.searchOperatorType
            });
        }
        this.startWaiting();
        this.restService.getPage(theUrl, 0, 10000, searchParam)
            .then((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.stopWaiting();
            if (value.data.list.length === 0) {
                this.onChange('');
            }
            this.onItemSelected(value.data.list[0]);
            this.theGrid.dataItems = [];
            this.theGrid.dataItems.push(value.data.list[0]);
        }))
            .catch((/**
         * @param {?} reason
         * @return {?}
         */
        reason => {
            this.stopWaiting();
            this.onChange('');
        }));
    }
    /**
     * @return {?}
     */
    pickerBeforeHide() {
        if (this.currentValue === '') {
            this.inputElement.nativeElement.value = '';
        }
    }
    /**
     * @return {?}
     */
    pickerBeforeShow() {
    }
}
TaminFieldAutoCompleteDataGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-field-auto-complete-data-grid',
                template: "<input\n  type=\"text\"\n  class=\"tamin-form-control-input\"\n  [disabled]=\"control.disabled\"\n  [attr.placeholder]=\"placeHolder\"\n  [class.tamin-form-control-valid]=\"control.touched && control.valid\"\n  [class.tamin-form-control-invalid]=\"control.touched && !control.valid\"\n  #inputElement>\n<tamin-picker-container #picker (berforeHide)=\"pickerBeforeHide()\" (berforeShow)=\"pickerBeforeShow()\">\n  <tamin-data-grid #theGrid (itemSelect)=\"onItemSelected($event)\" (afterRefreshData)=\"afterRefreshData()\"\n                   [allowBreakPoints]=\"false\" [showHover]=\"true\">\n  </tamin-data-grid>\n</tamin-picker-container>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TaminFieldAutoCompleteDataGridComponent)),
                        multi: true
                    }
                ],
                styles: [""]
            }] }
];
TaminFieldAutoCompleteDataGridComponent.propDecorators = {
    dataGridConfiguration: [{ type: Input }],
    casecadeControlName: [{ type: Input }],
    casecadeControlFieldName: [{ type: Input }],
    displayField: [{ type: Input }],
    valueField: [{ type: Input }],
    maxSearchTermLength: [{ type: Input }],
    searchOperator: [{ type: Input }],
    searchPattern: [{ type: Input }],
    searchOperatorType: [{ type: Input }],
    beforeLoad: [{ type: Output }],
    theGrid: [{ type: ViewChild, args: ['theGrid',] }],
    picker: [{ type: ViewChild, args: ['picker',] }]
};
if (false) {
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.dataGridConfiguration;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.casecadeControlName;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.casecadeControlFieldName;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.displayField;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.valueField;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.maxSearchTermLength;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.searchOperator;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.searchPattern;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.searchOperatorType;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.beforeLoad;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.theGrid;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.picker;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.searchTerm;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.filter;
    /**
     * @type {?}
     * @private
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.selectedValue;
    /**
     * @type {?}
     * @private
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.currentValue;
    /**
     * @type {?}
     * @private
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.parent;
    /**
     * @type {?}
     * @private
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.parentValue;
}
//# sourceMappingURL=data:application/json;base64,