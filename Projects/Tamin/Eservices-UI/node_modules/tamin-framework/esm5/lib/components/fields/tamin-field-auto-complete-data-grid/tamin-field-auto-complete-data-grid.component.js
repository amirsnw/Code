/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { TaminDataGridComponent } from '../../tamin-data-grid/tamin-data-grid.component';
import { TaminDataGridConfiguration } from '../../../helpers/tamin.data.grid.configuration/tamin.data.grid.configuration';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FieldBaseComponent } from '../../../base/field-base.component';
import { fromEvent, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';
import { PickerContainerComponent } from '../../containers/picker-container/picker-container.component';
import { SearchOperator } from '../../../models/search-param.model';
var TaminFieldAutoCompleteDataGridComponent = /** @class */ (function (_super) {
    tslib_1.__extends(TaminFieldAutoCompleteDataGridComponent, _super);
    function TaminFieldAutoCompleteDataGridComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.maxSearchTermLength = 1;
        _this.searchOperator = 'LIKE';
        _this.searchPattern = '*{term}*';
        _this.searchOperatorType = SearchOperator.EQUAL;
        _this.beforeLoad = new EventEmitter();
        _this.searchTerm = new Subject();
        _this.filter = [];
        _this.currentValue = '';
        return _this;
    }
    /**
     * @return {?}
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.initializeComponent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.picker.parent = _this.inputElement;
            _this.search(_this.searchTerm).subscribe();
            _this.theGrid.configuration = _this.dataGridConfiguration;
            _this.control = _this.controlContainer.control.get(_this.formControlName);
            if (_this.casecadeControlName) {
                _this.parent = _this.controlContainer.control.get(_this.casecadeControlName);
                _this.subscription.add(_this.parent.valueChanges.subscribe((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (value && value !== '') {
                        _this.parentValue = value;
                    }
                })));
            }
        }), 0);
    };
    /**
     * @return {?}
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.initValueAccessor = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var keyups = fromEvent(this.inputElement.nativeElement, 'keyup');
        this.subscription.add(keyups.subscribe((/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            if (evt.target.value.length >= _this.maxSearchTermLength) {
                _this.searchTerm.next(evt.target.value);
            }
        })));
        /** @type {?} */
        var focuses = fromEvent(this.inputElement.nativeElement, 'focus');
        this.subscription.add(focuses.subscribe((/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            _this.onTouched();
        })));
    };
    /**
     * @return {?}
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.hidePopup = /**
     * @return {?}
     */
    function () {
        this.picker.hide();
    };
    /**
     * @return {?}
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.showPopup = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.picker.show();
        if (this.parentValue && this.parentValue !== '') {
            /** @type {?} */
            var tmp_1 = this.theGrid.searchParams.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.property === _this.parentValue; }));
            if (tmp_1) {
                this.theGrid.searchParams = this.theGrid.searchParams.filter((/**
                 * @param {?} obj
                 * @return {?}
                 */
                function (obj) { return obj !== tmp_1; }));
            }
            this.theGrid.searchParams.push({
                property: this.casecadeControlFieldName,
                value: this.parentValue,
                operator: this.searchOperatorType
            });
        }
        this.theGrid.refreshData();
    };
    /**
     * @param {?} terms
     * @return {?}
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.search = /**
     * @param {?} terms
     * @return {?}
     */
    function (terms) {
        var _this = this;
        return terms.pipe(debounceTime(400), distinctUntilChanged(), switchMap((/**
         * @param {?} term
         * @return {?}
         */
        function (term) { return _this.searchEntries(term); })));
    };
    /**
     * @param {?} term
     * @return {?}
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.searchEntries = /**
     * @param {?} term
     * @return {?}
     */
    function (term) {
        this.currentValue = '';
        if (term === '') {
            this.hidePopup();
        }
        else {
            this.theGrid.searchParams = [];
            /** @type {?} */
            var searchTerm = this.searchPattern.replace('{term}', term);
            this.theGrid.searchParams = [{ property: this.displayField, value: searchTerm, operator: this.searchOperator }];
            this.theGrid.searchParams = this.theGrid.searchParams.concat(this.filter);
            if (this.parentValue && this.parentValue !== '') {
                this.theGrid.searchParams.push({
                    property: this.casecadeControlFieldName,
                    value: this.parentValue,
                    operator: this.searchOperatorType
                });
            }
            this.beforeLoad.emit();
            // this.theGrid.refreshData();
            this.showPopup();
        }
        this.onChange('');
        return term === '' ? [] : term;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.onItemSelected = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (!val) {
            this.onChange('');
            this.hidePopup();
            return;
        }
        /** @type {?} */
        var displayField = this.deepFind(val, this.displayField);
        /** @type {?} */
        var valueField = this.deepFind(val, this.valueField);
        if (!displayField || !valueField) {
            this.inputElement.nativeElement.value = '';
            this.currentValue = '';
            this.onChange('');
            return;
        }
        this.inputElement.nativeElement.value = displayField;
        this.currentValue = valueField;
        this.onChange(valueField);
        this.hidePopup();
    };
    /**
     * @return {?}
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.afterRefreshData = /**
     * @return {?}
     */
    function () {
        this.picker.update();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var theValue = value == null ? '' : value;
        if (theValue !== '') {
            this.loadData(theValue);
        }
        else {
            this.currentValue = '';
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.inputElement.nativeElement.value = '';
            }), 0);
        }
    };
    /**
     * @private
     * @param {?} theValue
     * @return {?}
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.loadData = /**
     * @private
     * @param {?} theValue
     * @return {?}
     */
    function (theValue) {
        var _this = this;
        /** @type {?} */
        var theUrl = this.dataGridConfiguration.serviceUrl;
        /** @type {?} */
        var id = this.dataGridConfiguration.id;
        /** @type {?} */
        var searchParam = [
            {
                property: id,
                value: theValue,
                operator: this.searchOperatorType
            }
        ];
        if (this.parentValue && this.parentValue !== '') {
            searchParam.push({
                property: this.casecadeControlFieldName,
                value: this.parentValue,
                operator: this.searchOperatorType
            });
        }
        this.startWaiting();
        this.restService.getPage(theUrl, 0, 10000, searchParam)
            .then((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.stopWaiting();
            if (value.data.list.length === 0) {
                _this.onChange('');
            }
            _this.onItemSelected(value.data.list[0]);
            _this.theGrid.dataItems = [];
            _this.theGrid.dataItems.push(value.data.list[0]);
        }))
            .catch((/**
         * @param {?} reason
         * @return {?}
         */
        function (reason) {
            _this.stopWaiting();
            _this.onChange('');
        }));
    };
    /**
     * @return {?}
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.pickerBeforeHide = /**
     * @return {?}
     */
    function () {
        if (this.currentValue === '') {
            this.inputElement.nativeElement.value = '';
        }
    };
    /**
     * @return {?}
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.pickerBeforeShow = /**
     * @return {?}
     */
    function () {
    };
    TaminFieldAutoCompleteDataGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-field-auto-complete-data-grid',
                    template: "<input\n  type=\"text\"\n  class=\"tamin-form-control-input\"\n  [disabled]=\"control.disabled\"\n  [attr.placeholder]=\"placeHolder\"\n  [class.tamin-form-control-valid]=\"control.touched && control.valid\"\n  [class.tamin-form-control-invalid]=\"control.touched && !control.valid\"\n  #inputElement>\n<tamin-picker-container #picker (berforeHide)=\"pickerBeforeHide()\" (berforeShow)=\"pickerBeforeShow()\">\n  <tamin-data-grid #theGrid (itemSelect)=\"onItemSelected($event)\" (afterRefreshData)=\"afterRefreshData()\"\n                   [allowBreakPoints]=\"false\" [showHover]=\"true\">\n  </tamin-data-grid>\n</tamin-picker-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return TaminFieldAutoCompleteDataGridComponent; })),
                            multi: true
                        }
                    ],
                    styles: [""]
                }] }
    ];
    TaminFieldAutoCompleteDataGridComponent.propDecorators = {
        dataGridConfiguration: [{ type: Input }],
        casecadeControlName: [{ type: Input }],
        casecadeControlFieldName: [{ type: Input }],
        displayField: [{ type: Input }],
        valueField: [{ type: Input }],
        maxSearchTermLength: [{ type: Input }],
        searchOperator: [{ type: Input }],
        searchPattern: [{ type: Input }],
        searchOperatorType: [{ type: Input }],
        beforeLoad: [{ type: Output }],
        theGrid: [{ type: ViewChild, args: ['theGrid',] }],
        picker: [{ type: ViewChild, args: ['picker',] }]
    };
    return TaminFieldAutoCompleteDataGridComponent;
}(FieldBaseComponent));
export { TaminFieldAutoCompleteDataGridComponent };
if (false) {
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.dataGridConfiguration;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.casecadeControlName;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.casecadeControlFieldName;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.displayField;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.valueField;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.maxSearchTermLength;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.searchOperator;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.searchPattern;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.searchOperatorType;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.beforeLoad;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.theGrid;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.picker;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.searchTerm;
    /** @type {?} */
    TaminFieldAutoCompleteDataGridComponent.prototype.filter;
    /**
     * @type {?}
     * @private
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.selectedValue;
    /**
     * @type {?}
     * @private
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.currentValue;
    /**
     * @type {?}
     * @private
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.parent;
    /**
     * @type {?}
     * @private
     */
    TaminFieldAutoCompleteDataGridComponent.prototype.parentValue;
}
//# sourceMappingURL=data:application/json;base64,