/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import { FieldBaseComponent } from '../../../base/field-base.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var TaminFieldStaticMultilineTextComponent = /** @class */ (function (_super) {
    tslib_1.__extends(TaminFieldStaticMultilineTextComponent, _super);
    function TaminFieldStaticMultilineTextComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rows = 4;
        _this.cols = 50;
        return _this;
    }
    /**
     * @return {?}
     */
    TaminFieldStaticMultilineTextComponent.prototype.initializeComponent = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TaminFieldStaticMultilineTextComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var theValue = value == null ? '' : value;
        this.inputElement.nativeElement.value = this.persianNumberPipe.transform(value);
        this.onChange(value);
    };
    TaminFieldStaticMultilineTextComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-field-static-multiline-text',
                    template: "<textarea\n  [disabled] = \"control.disabled\"\n  readonly=\"readonly\"\n  class=\"tamin-form-control-input\"\n  style=\"background-color: #efeff0; border-color: #cacacb;\"\n  [attr.rows]=\"rows\"\n  [attr.cols]=\"cols\"\n  #inputElement></textarea>\n<span>{{hint}}</span>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return TaminFieldStaticMultilineTextComponent; })),
                            multi: true
                        }
                    ],
                    styles: [":host{width:100%}.tamin-form-control-input{height:inherit!important}"]
                }] }
    ];
    TaminFieldStaticMultilineTextComponent.propDecorators = {
        rows: [{ type: Input }],
        cols: [{ type: Input }]
    };
    return TaminFieldStaticMultilineTextComponent;
}(FieldBaseComponent));
export { TaminFieldStaticMultilineTextComponent };
if (false) {
    /** @type {?} */
    TaminFieldStaticMultilineTextComponent.prototype.rows;
    /** @type {?} */
    TaminFieldStaticMultilineTextComponent.prototype.cols;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tZmllbGQtc3RhdGljLW11bHRpbGluZS10ZXh0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RhbWluLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2ZpZWxkcy90YW1pbi1maWVsZC1zdGF0aWMtbXVsdGlsaW5lLXRleHQvdGFtaW4tZmllbGQtc3RhdGljLW11bHRpbGluZS10ZXh0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBUyxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUN0RSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRDtJQVk0RCxrRUFBa0I7SUFaOUU7UUFBQSxxRUF3QkM7UUFYVSxVQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ1QsVUFBSSxHQUFHLEVBQUUsQ0FBQzs7SUFVckIsQ0FBQzs7OztJQVJDLG9FQUFtQjs7O0lBQW5CO0lBQ0EsQ0FBQzs7Ozs7SUFFRCwyREFBVTs7OztJQUFWLFVBQVcsS0FBVTs7WUFDYixRQUFRLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLO1FBQzNDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQzs7Z0JBdkJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsbUNBQW1DO29CQUM3Qyw4UkFBaUU7b0JBRWpFLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixXQUFXLEVBQUUsVUFBVTs7OzRCQUFDLGNBQU0sT0FBQSxzQ0FBc0MsRUFBdEMsQ0FBc0MsRUFBQzs0QkFDckUsS0FBSyxFQUFFLElBQUk7eUJBQ1o7cUJBQ0Y7O2lCQUNGOzs7dUJBRUUsS0FBSzt1QkFDTCxLQUFLOztJQVVSLDZDQUFDO0NBQUEsQUF4QkQsQ0FZNEQsa0JBQWtCLEdBWTdFO1NBWlksc0NBQXNDOzs7SUFDakQsc0RBQWtCOztJQUNsQixzREFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0ZpZWxkQmFzZUNvbXBvbmVudH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9maWVsZC1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQge05HX1ZBTFVFX0FDQ0VTU09SfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RhbWluLWZpZWxkLXN0YXRpYy1tdWx0aWxpbmUtdGV4dCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90YW1pbi1maWVsZC1zdGF0aWMtbXVsdGlsaW5lLXRleHQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90YW1pbi1maWVsZC1zdGF0aWMtbXVsdGlsaW5lLXRleHQuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUYW1pbkZpZWxkU3RhdGljTXVsdGlsaW5lVGV4dENvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBUYW1pbkZpZWxkU3RhdGljTXVsdGlsaW5lVGV4dENvbXBvbmVudCBleHRlbmRzIEZpZWxkQmFzZUNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHJvd3MgPSA0O1xuICBASW5wdXQoKSBjb2xzID0gNTA7XG5cbiAgaW5pdGlhbGl6ZUNvbXBvbmVudCgpIHtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IHRoZVZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC52YWx1ZSA9IHRoaXMucGVyc2lhbk51bWJlclBpcGUudHJhbnNmb3JtKHZhbHVlKTtcbiAgICB0aGlzLm9uQ2hhbmdlKHZhbHVlKTtcbiAgfVxufVxuIl19