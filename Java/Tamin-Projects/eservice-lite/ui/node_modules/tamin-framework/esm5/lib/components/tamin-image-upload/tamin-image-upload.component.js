/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
var TaminImageUploadComponent = /** @class */ (function () {
    function TaminImageUploadComponent(http) {
        this.http = http;
        this.onImageUploaded = new EventEmitter();
        this.onImageDeleted = new EventEmitter();
        this.displayPreview = 'none';
    }
    Object.defineProperty(TaminImageUploadComponent.prototype, "imageGuid", {
        get: /**
         * @return {?}
         */
        function () {
            return this._imageGuid;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!value) {
                return;
            }
            this._imageGuid = value;
            this.loadImage(this._imageGuid);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TaminImageUploadComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} imageGuid
     * @return {?}
     */
    TaminImageUploadComponent.prototype.loadImage = /**
     * @param {?} imageGuid
     * @return {?}
     */
    function (imageGuid) {
        var _this = this;
        this._imageGuid = imageGuid;
        /** @type {?} */
        var url = this.restUrl + "/" + this.imageGuid;
        /** @type {?} */
        var image = this.previewImage.nativeElement;
        this.http.get(url)
            .toPromise()
            .then((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            image.src = "data:image/jpeg;base64," + ((/** @type {?} */ (value))).data;
            _this.displayPreview = 'unset';
        }))
            .catch((/**
         * @param {?} reason
         * @return {?}
         */
        function (reason) {
            console.error(reason);
        }));
    };
    // loadImage(imageGuid: string) {
    //   this.imageGuid = imageGuid;
    //   let url = `${this.restUrl}/${this.imageGuid}`;
    //   let headers = new HttpHeaders({ 'Content-Type': 'image/jpg' });
    //   let params = new HttpParams();
    //   params.append('responseType', 'blob');
    //   params = params.append('_dc', (new Date()).getTime().toString());
    //   let image = this.previewImage.nativeElement;
    //   this.http.get(url, { headers,  params }).subscribe(
    //       data => {
    //         //let blob = new Blob([data.arrayBuffer()], { type: data.headers.get('Content-Type') });
    //         let imageurl = window.URL.createObjectURL(data);
    //         image.src = imageurl;
    //         // image.src = 'data:image/jpeg;base64,' + data.arrayBuffer();
    //         // this.onImageUploaded.emit(this.imageGuid);
    //         this.displayPreview = "unset";
    //       },
    //       error => {
    //        // console.log(error);
    //         this.imageGuid = '';
    //       }
    //     );
    // }
    /*upload(event) {
      this.imageGuid = 'در حال بارگزاری';
      let inputfile = event.dataTransfer ? event.dataTransfer : event.target;
      let image = this.previewImage.nativeElement;
      let reader = new FileReader();
      reader.onload = function (e) {
        let src = (e.target as FileReader).result;
        image.src = src;
      };
      if (inputfile.files.length > 0) {
        let file: File = inputfile.files[0];
        let formData = new FormData();
        formData.append('file', file, file.name);
        //let headers = new HttpHeaders({'Content-Type': 'multipart/form-data'});
        this.http.post(this.restUrl, formData).subscribe(
          data => {
            reader.readAsDataURL(event.target.files[0]);
            this.imageGuid = data.toString();//.text();
            if (this.onImageUploaded)
              this.onImageUploaded.emit(this.imageGuid);
            this.displayPreview = 'unset';
          },
          error => {
            //console.log(error);
            this.imageGuid = '';
          }
        );
      }
    }*/
    // loadImage(imageGuid: string) {
    //   this.imageGuid = imageGuid;
    //   let url = `${this.restUrl}/${this.imageGuid}`;
    //   let headers = new HttpHeaders({ 'Content-Type': 'image/jpg' });
    //   let params = new HttpParams();
    //   params.append('responseType', 'blob');
    //   params = params.append('_dc', (new Date()).getTime().toString());
    //   let image = this.previewImage.nativeElement;
    //   this.http.get(url, { headers,  params }).subscribe(
    //       data => {
    //         //let blob = new Blob([data.arrayBuffer()], { type: data.headers.get('Content-Type') });
    //         let imageurl = window.URL.createObjectURL(data);
    //         image.src = imageurl;
    //         // image.src = 'data:image/jpeg;base64,' + data.arrayBuffer();
    //         // this.onImageUploaded.emit(this.imageGuid);
    //         this.displayPreview = "unset";
    //       },
    //       error => {
    //        // console.log(error);
    //         this.imageGuid = '';
    //       }
    //     );
    // }
    /*upload(event) {
        this.imageGuid = 'در حال بارگزاری';
        let inputfile = event.dataTransfer ? event.dataTransfer : event.target;
        let image = this.previewImage.nativeElement;
        let reader = new FileReader();
        reader.onload = function (e) {
          let src = (e.target as FileReader).result;
          image.src = src;
        };
        if (inputfile.files.length > 0) {
          let file: File = inputfile.files[0];
          let formData = new FormData();
          formData.append('file', file, file.name);
          //let headers = new HttpHeaders({'Content-Type': 'multipart/form-data'});
          this.http.post(this.restUrl, formData).subscribe(
            data => {
              reader.readAsDataURL(event.target.files[0]);
              this.imageGuid = data.toString();//.text();
              if (this.onImageUploaded)
                this.onImageUploaded.emit(this.imageGuid);
              this.displayPreview = 'unset';
            },
            error => {
              //console.log(error);
              this.imageGuid = '';
            }
          );
        }
      }*/
    /**
     * @param {?} event
     * @return {?}
     */
    TaminImageUploadComponent.prototype.upload = 
    // loadImage(imageGuid: string) {
    //   this.imageGuid = imageGuid;
    //   let url = `${this.restUrl}/${this.imageGuid}`;
    //   let headers = new HttpHeaders({ 'Content-Type': 'image/jpg' });
    //   let params = new HttpParams();
    //   params.append('responseType', 'blob');
    //   params = params.append('_dc', (new Date()).getTime().toString());
    //   let image = this.previewImage.nativeElement;
    //   this.http.get(url, { headers,  params }).subscribe(
    //       data => {
    //         //let blob = new Blob([data.arrayBuffer()], { type: data.headers.get('Content-Type') });
    //         let imageurl = window.URL.createObjectURL(data);
    //         image.src = imageurl;
    //         // image.src = 'data:image/jpeg;base64,' + data.arrayBuffer();
    //         // this.onImageUploaded.emit(this.imageGuid);
    //         this.displayPreview = "unset";
    //       },
    //       error => {
    //        // console.log(error);
    //         this.imageGuid = '';
    //       }
    //     );
    // }
    /*upload(event) {
        this.imageGuid = 'در حال بارگزاری';
        let inputfile = event.dataTransfer ? event.dataTransfer : event.target;
        let image = this.previewImage.nativeElement;
        let reader = new FileReader();
        reader.onload = function (e) {
          let src = (e.target as FileReader).result;
          image.src = src;
        };
        if (inputfile.files.length > 0) {
          let file: File = inputfile.files[0];
          let formData = new FormData();
          formData.append('file', file, file.name);
          //let headers = new HttpHeaders({'Content-Type': 'multipart/form-data'});
          this.http.post(this.restUrl, formData).subscribe(
            data => {
              reader.readAsDataURL(event.target.files[0]);
              this.imageGuid = data.toString();//.text();
              if (this.onImageUploaded)
                this.onImageUploaded.emit(this.imageGuid);
              this.displayPreview = 'unset';
            },
            error => {
              //console.log(error);
              this.imageGuid = '';
            }
          );
        }
      }*/
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.imageGuid = 'در حال بارگذاری';
        /** @type {?} */
        var inputfile = event.dataTransfer ? event.dataTransfer : event.target;
        /** @type {?} */
        var image = this.previewImage.nativeElement;
        /** @type {?} */
        var reader = new FileReader();
        if (inputfile.files.length > 0) {
            /** @type {?} */
            var file_1 = inputfile.files[0];
            reader.readAsDataURL(file_1);
            reader.onload = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var formData = new FormData();
                formData.append('file', file_1, file_1.name);
                _this.http.post(_this.restUrl, formData).toPromise()
                    .then((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    /** @type {?} */
                    var src = reader.result;
                    image.src = src;
                    _this.imageGuid = response['guid'];
                    if (_this.onImageUploaded) {
                        _this.onImageUploaded.emit(_this.imageGuid);
                    }
                    _this.displayPreview = 'unset';
                }))
                    .catch((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    // console.log("Upload error:", error);
                    _this.imageGuid = '';
                }));
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TaminImageUploadComponent.prototype.uploadBase64 = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.imageGuid = 'در حال بارگذاری';
        /** @type {?} */
        var inputfile = event.dataTransfer ? event.dataTransfer : event.target;
        /** @type {?} */
        var image = this.previewImage.nativeElement;
        /** @type {?} */
        var reader = new FileReader();
        if (inputfile.files.length > 0) {
            /** @type {?} */
            var file = inputfile.files[0];
            reader.readAsDataURL(file);
            reader.onload = (/**
             * @return {?}
             */
            function () {
                // let headers = new HttpHeaders({'Content-Type': 'text/plain'});
                /** @type {?} */
                var headers = new HttpHeaders({ 'Content-Type': 'application/json' });
                _this.http.post(_this.restUrl, ((/** @type {?} */ (reader.result))).split(',')[1], { headers: headers }).toPromise()
                    .then((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    /** @type {?} */
                    var src = reader.result;
                    image.src = src;
                    _this.imageGuid = response['guid'];
                    if (_this.onImageUploaded) {
                        _this.onImageUploaded.emit(_this.imageGuid);
                    }
                    _this.displayPreview = 'unset';
                }))
                    .catch((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    // console.log("Upload error:", error);
                    _this.imageGuid = '';
                }));
            });
        }
    };
    /**
     * @return {?}
     */
    TaminImageUploadComponent.prototype.removeImage = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var url = this.restUrl + "/" + this.imageGuid;
        /** @type {?} */
        var image = this.previewImage.nativeElement;
        image.src = '';
        this.onImageDeleted.emit(this.imageGuid);
        this.imageGuid = '';
        this.http.delete(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
        }));
    };
    TaminImageUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-field-image-upload',
                    template: "<div class=\"divTable\" style=\"width: 100%;\">\n  <div class=\"divTableHeading\">\n\t\t<div class=\"divTableRow\">\n\t\t\t<div class=\"divTableHead\"  style=\"width: 128px; font-size: 0.8em\">\u067E\u06CC\u0634 \u0646\u0645\u0627\u06CC\u0634</div>\n\t\t\t<div class=\"divTableHead\"  style=\"font-size: 0.8em\">\u0639\u0645\u0644\u06CC\u0627\u062A</div>\n\t\t</div>\n\t</div>\n\t<div class=\"divTableBody\">\n\t\t<div class=\"divTableRow\">\n\t\t\t<div class=\"divTableCell\">\n\t\t\t\t\t<img #previewImage alt=\"\u0628\u062F\u0648\u0646 \u062A\u0635\u0648\u06CC\u0631\" [style.display]=\"displayPreview\" style=\"width: 128px;\" />\n      </div>\n\t\t\t<div class=\"divTableCell\">\n          <label attr.for=\"{{controlName}}\" class=\"inputfile\" style=\"width: 116px; white-space: nowrap;\">\n            <label class=\"icon-upload\" style=\"margin-left: 3px; vertical-align: middle;\"></label>\n            \u0628\u0627\u0631\u06AF\u0630\u0627\u0631\u06CC \u0641\u0627\u06CC\u0644\n\t\t\t\t\t</label>\n          <input type=\"file\" attr.id=\"{{controlName}}\" accept=\".jpg,.jpeg,.png\"/>\n          <br/>\n\t\t\t\t\t<button type=\"button\" class=\"button normal dark icon-trash\" (click)=\"removeImage()\">\u062D\u0630\u0641 \u062A\u0635\u0648\u06CC\u0631</button>\n          <br/>\n          <label style=\"font-size: 0.8em;\">\u0648\u0636\u0639\u06CC\u062A: {{imageGuid}} </label>\n      </div>\n\t\t</div>\n\t</div>\n  <!--<div class=\"divTableFoot\">\n\t\t<div class=\"divTableRow\">\n\t\t\t<div class=\"divTableCell\">&nbsp;</div>\n\t\t\t<div class=\"divTableCell\">&nbsp;</div>\n\t\t</div>\n\t</div>-->\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    TaminImageUploadComponent.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    TaminImageUploadComponent.propDecorators = {
        controlName: [{ type: Input }],
        onImageUploaded: [{ type: Output }],
        onImageDeleted: [{ type: Output }],
        previewImage: [{ type: ViewChild, args: ['previewImage',] }],
        restUrl: [{ type: Input }],
        imageGuid: [{ type: Input }]
    };
    return TaminImageUploadComponent;
}());
export { TaminImageUploadComponent };
if (false) {
    /** @type {?} */
    TaminImageUploadComponent.prototype.controlName;
    /**
     * @type {?}
     * @private
     */
    TaminImageUploadComponent.prototype._imageGuid;
    /** @type {?} */
    TaminImageUploadComponent.prototype.onImageUploaded;
    /** @type {?} */
    TaminImageUploadComponent.prototype.onImageDeleted;
    /** @type {?} */
    TaminImageUploadComponent.prototype.previewImage;
    /** @type {?} */
    TaminImageUploadComponent.prototype.restUrl;
    /** @type {?} */
    TaminImageUploadComponent.prototype.displayPreview;
    /**
     * @type {?}
     * @private
     */
    TaminImageUploadComponent.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,