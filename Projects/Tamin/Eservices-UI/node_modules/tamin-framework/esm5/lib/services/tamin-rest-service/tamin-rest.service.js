/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { timeout } from 'rxjs/operators';
import { RequestCacheService } from '../request-cache.service';
import * as i0 from "@angular/core";
import * as i1 from "../request-cache.service";
import * as i2 from "@angular/common/http";
var TaminRestService = /** @class */ (function () {
    function TaminRestService(taminApplicationConfig, requestCacheService, http) {
        this.taminApplicationConfig = taminApplicationConfig;
        this.requestCacheService = requestCacheService;
        this.http = http;
        this.URL_ERROR = 'url not specified';
        this.ID_ERROR = 'id not specified';
    }
    /**
     * @protected
     * @param {?} url
     * @param {?=} pageNo
     * @param {?=} pageSize
     * @param {?=} searchParams
     * @param {?=} sortParams
     * @param {?=} query
     * @return {?}
     */
    TaminRestService.prototype.getData = /**
     * @protected
     * @param {?} url
     * @param {?=} pageNo
     * @param {?=} pageSize
     * @param {?=} searchParams
     * @param {?=} sortParams
     * @param {?=} query
     * @return {?}
     */
    function (url, pageNo, pageSize, searchParams, sortParams, query) {
        var _this = this;
        // let headers = new HttpHeaders();
        /** @type {?} */
        var params = new HttpParams();
        if (pageNo && pageSize) {
            params = params.append('page', pageNo.toString());
            params = params.append('start', ((pageNo - 1) * pageSize).toString());
            params = params.append('limit', pageSize.toString());
        }
        if (query) {
            Object.keys(query).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                params = params.append(key, query[key]);
            }));
        }
        if (searchParams) {
            params = params.append('filter', JSON.stringify(searchParams));
        }
        if (sortParams) {
            params = params.append('sort', JSON.stringify(sortParams));
        }
        // params = params.append('_dc', (new Date()).getTime().toString());
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            if (_this.requestCacheService.hasCached(url)) {
                resolve(_this.requestCacheService.getCached(url));
            }
            else {
                _this.http.get(url, { params: params })
                    .pipe(timeout(_this.taminApplicationConfig.restTimeout))
                    .toPromise()
                    .then((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (_this.requestCacheService.isCacheable(url)) {
                        _this.requestCacheService.setCache(url, value);
                    }
                    resolve(value);
                }))
                    .catch((/**
                 * @param {?} reason
                 * @return {?}
                 */
                function (reason) {
                    reject(reason);
                }));
            }
        }));
    };
    /**
     * @param {?} url
     * @param {?=} searchParams
     * @return {?}
     */
    TaminRestService.prototype.getBlob = /**
     * @param {?} url
     * @param {?=} searchParams
     * @return {?}
     */
    function (url, searchParams) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            /** @type {?} */
            var params = new HttpParams();
            if (searchParams) {
                params = params.append('filter', JSON.stringify(searchParams));
            }
            _this.http.get(url, { params: params, responseType: 'blob' })
                .pipe(timeout(_this.taminApplicationConfig.restTimeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return resolve(response); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(error); }));
        }));
    };
    /**
     * @param {?} url
     * @param {?=} querySearchParams
     * @param {?=} querySortParams
     * @param {?=} query
     * @return {?}
     */
    TaminRestService.prototype.getAll = /**
     * @param {?} url
     * @param {?=} querySearchParams
     * @param {?=} querySortParams
     * @param {?=} query
     * @return {?}
     */
    function (url, querySearchParams, querySortParams, query) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            if (url.trim() === '') {
                reject(new Error(_this.URL_ERROR));
            }
            _this.getData(url, null, null, querySearchParams, querySortParams, query)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return resolve(response); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(error); }));
        }));
    };
    /**
     * @param {?} url
     * @param {?} pageNo
     * @param {?} pageSize
     * @param {?=} querySearchParams
     * @param {?=} querySortParams
     * @param {?=} query
     * @return {?}
     */
    TaminRestService.prototype.getPage = /**
     * @param {?} url
     * @param {?} pageNo
     * @param {?} pageSize
     * @param {?=} querySearchParams
     * @param {?=} querySortParams
     * @param {?=} query
     * @return {?}
     */
    function (url, pageNo, pageSize, querySearchParams, querySortParams, query) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.getData(url, pageNo, pageSize, querySearchParams, querySortParams, query)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return resolve(response); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(error); }));
        }));
    };
    /**
     * @template TModel
     * @param {?} url
     * @param {?=} querySearchParams
     * @param {?=} querySortParams
     * @param {?=} query
     * @return {?}
     */
    TaminRestService.prototype.getAllManaged = /**
     * @template TModel
     * @param {?} url
     * @param {?=} querySearchParams
     * @param {?=} querySortParams
     * @param {?=} query
     * @return {?}
     */
    function (url, querySearchParams, querySortParams, query) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.getData(url, null, null, querySearchParams, querySortParams, query)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response.data) {
                    resolve((/** @type {?} */ (response.data)));
                }
                else if (response.list) {
                    resolve((/** @type {?} */ (response.list)));
                }
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(error); }));
        }));
    };
    /**
     * @template TModel
     * @param {?} url
     * @param {?} pageNo
     * @param {?} pageSize
     * @param {?=} querySearchParams
     * @param {?=} querySortParams
     * @param {?=} query
     * @return {?}
     */
    TaminRestService.prototype.getPageManaged = /**
     * @template TModel
     * @param {?} url
     * @param {?} pageNo
     * @param {?} pageSize
     * @param {?=} querySearchParams
     * @param {?=} querySortParams
     * @param {?=} query
     * @return {?}
     */
    function (url, pageNo, pageSize, querySearchParams, querySortParams, query) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.getData(url, pageNo, pageSize, querySearchParams, querySortParams, query)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response.data) {
                    resolve((/** @type {?} */ (response.data)));
                }
                else if (response.list) {
                    resolve((/** @type {?} */ (response.list)));
                }
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(error); }));
        }));
    };
    /**
     * @param {?} url
     * @param {?} id
     * @return {?}
     */
    TaminRestService.prototype.getById = /**
     * @param {?} url
     * @param {?} id
     * @return {?}
     */
    function (url, id) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            if (url.trim() === '') {
                reject(new Error(_this.URL_ERROR));
            }
            if (id.trim() === '') {
                reject(new Error(_this.ID_ERROR));
            }
            /** @type {?} */
            var theUrl = url + "/" + id;
            _this.getData(theUrl)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return resolve(response); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(error); }));
        }));
    };
    /**
     * @template TModel
     * @param {?} url
     * @param {?} id
     * @return {?}
     */
    TaminRestService.prototype.getByIdManaged = /**
     * @template TModel
     * @param {?} url
     * @param {?} id
     * @return {?}
     */
    function (url, id) {
        var _this = this;
        /** @type {?} */
        var theUrl = url + "/" + id;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.getData(url)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return resolve((/** @type {?} */ (response.data))); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(error); }));
        }));
    };
    /**
     * @param {?} url
     * @param {?} data
     * @return {?}
     */
    TaminRestService.prototype.create = /**
     * @param {?} url
     * @param {?} data
     * @return {?}
     */
    function (url, data) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            if (url.trim() === '') {
                reject(new Error(_this.URL_ERROR));
            }
            _this.http
                .post(url, data)
                .pipe(timeout(_this.taminApplicationConfig.restTimeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                resolve(response);
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                reject(error);
            }));
        }));
    };
    /**
     * @template TModel
     * @param {?} url
     * @param {?} id
     * @param {?} data
     * @return {?}
     */
    TaminRestService.prototype.update = /**
     * @template TModel
     * @param {?} url
     * @param {?} id
     * @param {?} data
     * @return {?}
     */
    function (url, id, data) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            if (url.toString().trim() === '') {
                reject(new Error(_this.URL_ERROR));
            }
            if (id.trim() === '') {
                reject(new Error(_this.ID_ERROR));
            }
            /** @type {?} */
            var theUrl = url + "/" + id.toString();
            _this.http
                .put(theUrl, data)
                .pipe(timeout(_this.taminApplicationConfig.restTimeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return resolve(response); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(error); }));
        }));
    };
    /**
     * @param {?} url
     * @param {?} id
     * @return {?}
     */
    TaminRestService.prototype.delete = /**
     * @param {?} url
     * @param {?} id
     * @return {?}
     */
    function (url, id) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            if (url.trim() === '') {
                reject(new Error(_this.URL_ERROR));
            }
            if (id.trim() === '') {
                reject(new Error(_this.ID_ERROR));
            }
            /** @type {?} */
            var theUrl = url + "/" + id;
            _this.http
                .delete(theUrl)
                .pipe(timeout(_this.taminApplicationConfig.restTimeout))
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return resolve(response); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(error); }));
        }));
    };
    TaminRestService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TaminRestService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: ['taminApplicationConfig',] }] },
        { type: RequestCacheService },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ TaminRestService.ngInjectableDef = i0.defineInjectable({ factory: function TaminRestService_Factory() { return new TaminRestService(i0.inject("taminApplicationConfig"), i0.inject(i1.RequestCacheService), i0.inject(i2.HttpClient)); }, token: TaminRestService, providedIn: "root" });
    return TaminRestService;
}());
export { TaminRestService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    TaminRestService.prototype.URL_ERROR;
    /**
     * @type {?}
     * @protected
     */
    TaminRestService.prototype.ID_ERROR;
    /**
     * @type {?}
     * @private
     */
    TaminRestService.prototype.taminApplicationConfig;
    /**
     * @type {?}
     * @private
     */
    TaminRestService.prototype.requestCacheService;
    /**
     * @type {?}
     * @private
     */
    TaminRestService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,