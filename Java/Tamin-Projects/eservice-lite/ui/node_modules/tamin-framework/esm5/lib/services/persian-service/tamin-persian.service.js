/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as momentNs from 'jalali-moment';
import * as i0 from "@angular/core";
/** @type {?} */
var moment = momentNs;
var TaminPersianService = /** @class */ (function () {
    function TaminPersianService() {
        this._numberRange = '[\u06F0-\u06F9]';
        this._charRange = ['[\u06A9\u06AF\u06C0\u06CC\u060C',
            '\u062A\u062B\u062C\u062D\u062E\u062F',
            '\u063A\u064A\u064B\u064C\u064D\u064E',
            '\u064F\u067E\u0670\u0686\u0698\u200C',
            '\u0621-\u0629\u0630-\u0639\u0641-\u0654]'].join('');
        this._rtlPunctuations = '(،|؟|«|»|؛|٬)';
        this._ltrPunctuations = '(\\.|:|\\!|\\-|\\[|\\]|\\(|\\)|/)';
        this._number = new RegExp('^' + this._numberRange + '+$');
        this._letter = new RegExp('^' + this._charRange + '+$');
        this._punctuation = new RegExp('^' + this.combineRegExps(this._rtlPunctuations, this._ltrPunctuations) + '+$');
        this._text = new RegExp('^' + this.combineRegExps(this._numberRange, this._charRange, this._rtlPunctuations, this._ltrPunctuations, '\\s') + '+$');
        this._rtl = new RegExp('^' + this.combineRegExps(this._charRange, this._numberRange, this._rtlPunctuations, '\\s') + '+$');
    }
    /**
     * @param {?} value
     * @return {?}
     */
    TaminPersianService.prototype.getPersianDate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        try {
            /** @type {?} */
            var tmp = moment.from(value.toLocaleDateString(), 'en');
            if (tmp.isValid()) {
                return tmp.locale('fa').format('YYYY/MM/DD');
            }
            return null;
        }
        catch (e) {
            return '';
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TaminPersianService.prototype.getPersianDayOfWeek = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        try {
            /** @type {?} */
            var dayOfWeeks = ['یکشنبه', 'دوشنبه', 'سه شنبه', 'چهارشنبه', 'پنج شنبه', 'جمعه', 'شنبه'];
            /** @type {?} */
            var tmp = moment.from(value.toLocaleDateString(), 'en');
            if (tmp.isValid()) {
                return dayOfWeeks[tmp.locale('fa').day()];
            }
            return null;
        }
        catch (e) {
            return '';
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TaminPersianService.prototype.getGregorianDate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var tmp = moment.from(value, 'fa', 'YYYY/MM/DD');
        if (tmp.isValid()) {
            return tmp.toDate();
        }
        return null;
    };
    /**
     * @private
     * @param {...?} params
     * @return {?}
     */
    TaminPersianService.prototype.combineRegExps = /**
     * @private
     * @param {...?} params
     * @return {?}
     */
    function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        /** @type {?} */
        var combined = '(';
        for (var i = 0; i < arguments.length; i++) {
            combined += '(';
            if (i !== arguments.length - 1) {
                combined += arguments[i] + ')|';
            }
            else {
                combined += arguments[i] + ')';
            }
        }
        return combined + ')';
    };
    TaminPersianService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TaminPersianService.ctorParameters = function () { return []; };
    /** @nocollapse */ TaminPersianService.ngInjectableDef = i0.defineInjectable({ factory: function TaminPersianService_Factory() { return new TaminPersianService(); }, token: TaminPersianService, providedIn: "root" });
    return TaminPersianService;
}());
export { TaminPersianService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._numberRange;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._charRange;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._rtlPunctuations;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._ltrPunctuations;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._number;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._letter;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._punctuation;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._text;
    /**
     * @type {?}
     * @private
     */
    TaminPersianService.prototype._rtl;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tcGVyc2lhbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdGFtaW4tZnJhbWV3b3JrLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3BlcnNpYW4tc2VydmljZS90YW1pbi1wZXJzaWFuLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxLQUFLLFFBQVEsTUFBTSxlQUFlLENBQUM7OztJQUVwQyxNQUFNLEdBQUcsUUFBUTtBQUV2QjtJQXNCRTtRQWpCUSxpQkFBWSxHQUFHLGlCQUFpQixDQUFDO1FBQ2pDLGVBQVUsR0FBRyxDQUFDLGlDQUFpQztZQUNyRCxzQ0FBc0M7WUFDdEMsc0NBQXNDO1lBQ3RDLHNDQUFzQztZQUN0QywwQ0FBMEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQyxxQkFBZ0IsR0FBRyxlQUFlLENBQUM7UUFDbkMscUJBQWdCLEdBQUcsbUNBQW1DLENBQUM7UUFFdkQsWUFBTyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3JELFlBQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNuRCxpQkFBWSxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUMxRyxVQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUNuSixDQUFDO1FBQ00sU0FBSSxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFJOUgsQ0FBQzs7Ozs7SUFFTSw0Q0FBYzs7OztJQUFyQixVQUFzQixLQUFXO1FBQy9CLElBQUk7O2dCQUNJLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLElBQUksQ0FBQztZQUN6RCxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDakIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUM5QztZQUNELE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE9BQU8sRUFBRSxDQUFDO1NBQ1g7SUFDSCxDQUFDOzs7OztJQUVNLGlEQUFtQjs7OztJQUExQixVQUEyQixLQUFXO1FBQ3BDLElBQUk7O2dCQUNJLFVBQVUsR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQzs7Z0JBQ3BGLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLElBQUksQ0FBQztZQUN6RCxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDakIsT0FBTyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2FBQzNDO1lBQ0QsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxFQUFFLENBQUM7U0FDWDtJQUNILENBQUM7Ozs7O0lBRU0sOENBQWdCOzs7O0lBQXZCLFVBQXdCLEtBQWE7O1lBQzdCLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsWUFBWSxDQUFDO1FBQ2xELElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2pCLE9BQU8sR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3JCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7Ozs7SUFFTyw0Q0FBYzs7Ozs7SUFBdEI7UUFBdUIsZ0JBQWdCO2FBQWhCLFVBQWdCLEVBQWhCLHFCQUFnQixFQUFoQixJQUFnQjtZQUFoQiwyQkFBZ0I7OztZQUNqQyxRQUFRLEdBQUcsR0FBRztRQUNsQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN6QyxRQUFRLElBQUksR0FBRyxDQUFDO1lBQ2hCLElBQUksQ0FBQyxLQUFLLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUM5QixRQUFRLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzthQUNqQztpQkFBTTtnQkFDTCxRQUFRLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQzthQUNoQztTQUNGO1FBQ0QsT0FBTyxRQUFRLEdBQUcsR0FBRyxDQUFDO0lBQ3hCLENBQUM7O2dCQXJFRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Ozs4QkFQRDtDQTJFQyxBQXRFRCxJQXNFQztTQW5FWSxtQkFBbUI7Ozs7OztJQUU5QiwyQ0FBeUM7Ozs7O0lBQ3pDLHlDQUl1RDs7Ozs7SUFDdkQsK0NBQTJDOzs7OztJQUMzQywrQ0FBK0Q7Ozs7O0lBRS9ELHNDQUE2RDs7Ozs7SUFDN0Qsc0NBQTJEOzs7OztJQUMzRCwyQ0FBa0g7Ozs7O0lBQ2xILG9DQUNFOzs7OztJQUNGLG1DQUE4SCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBtb21lbnROcyBmcm9tICdqYWxhbGktbW9tZW50JztcblxuY29uc3QgbW9tZW50ID0gbW9tZW50TnM7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRhbWluUGVyc2lhblNlcnZpY2Uge1xuXG4gIHByaXZhdGUgX251bWJlclJhbmdlID0gJ1tcXHUwNkYwLVxcdTA2RjldJztcbiAgcHJpdmF0ZSBfY2hhclJhbmdlID0gWydbXFx1MDZBOVxcdTA2QUZcXHUwNkMwXFx1MDZDQ1xcdTA2MEMnLFxuICAgICdcXHUwNjJBXFx1MDYyQlxcdTA2MkNcXHUwNjJEXFx1MDYyRVxcdTA2MkYnLFxuICAgICdcXHUwNjNBXFx1MDY0QVxcdTA2NEJcXHUwNjRDXFx1MDY0RFxcdTA2NEUnLFxuICAgICdcXHUwNjRGXFx1MDY3RVxcdTA2NzBcXHUwNjg2XFx1MDY5OFxcdTIwMEMnLFxuICAgICdcXHUwNjIxLVxcdTA2MjlcXHUwNjMwLVxcdTA2MzlcXHUwNjQxLVxcdTA2NTRdJ10uam9pbignJyk7XG4gIHByaXZhdGUgX3J0bFB1bmN0dWF0aW9ucyA9ICco2Ix82J98wqt8wrt82Jt82awpJztcbiAgcHJpdmF0ZSBfbHRyUHVuY3R1YXRpb25zID0gJyhcXFxcLnw6fFxcXFwhfFxcXFwtfFxcXFxbfFxcXFxdfFxcXFwofFxcXFwpfC8pJztcblxuICBwcml2YXRlIF9udW1iZXIgPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMuX251bWJlclJhbmdlICsgJyskJyk7XG4gIHByaXZhdGUgX2xldHRlciA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5fY2hhclJhbmdlICsgJyskJyk7XG4gIHByaXZhdGUgX3B1bmN0dWF0aW9uID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLmNvbWJpbmVSZWdFeHBzKHRoaXMuX3J0bFB1bmN0dWF0aW9ucywgdGhpcy5fbHRyUHVuY3R1YXRpb25zKSArICcrJCcpO1xuICBwcml2YXRlIF90ZXh0ID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLmNvbWJpbmVSZWdFeHBzKHRoaXMuX251bWJlclJhbmdlLCB0aGlzLl9jaGFyUmFuZ2UsIHRoaXMuX3J0bFB1bmN0dWF0aW9ucywgdGhpcy5fbHRyUHVuY3R1YXRpb25zLCAnXFxcXHMnKSArICcrJCdcbiAgKTtcbiAgcHJpdmF0ZSBfcnRsID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLmNvbWJpbmVSZWdFeHBzKHRoaXMuX2NoYXJSYW5nZSwgdGhpcy5fbnVtYmVyUmFuZ2UsIHRoaXMuX3J0bFB1bmN0dWF0aW9ucywgJ1xcXFxzJykgKyAnKyQnKTtcblxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgcHVibGljIGdldFBlcnNpYW5EYXRlKHZhbHVlOiBEYXRlKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRtcCA9IG1vbWVudC5mcm9tKHZhbHVlLnRvTG9jYWxlRGF0ZVN0cmluZygpLCAnZW4nKTtcbiAgICAgIGlmICh0bXAuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiB0bXAubG9jYWxlKCdmYScpLmZvcm1hdCgnWVlZWS9NTS9ERCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRQZXJzaWFuRGF5T2ZXZWVrKHZhbHVlOiBEYXRlKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRheU9mV2Vla3MgPSBbJ9uM2qnYtNmG2KjZhycsICfYr9mI2LTZhtio2YcnLCAn2LPZhyDYtNmG2KjZhycsICfahtmH2KfYsdi02YbYqNmHJywgJ9m+2YbYrCDYtNmG2KjZhycsICfYrNmF2LnZhycsICfYtNmG2KjZhyddO1xuICAgICAgY29uc3QgdG1wID0gbW9tZW50LmZyb20odmFsdWUudG9Mb2NhbGVEYXRlU3RyaW5nKCksICdlbicpO1xuICAgICAgaWYgKHRtcC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGRheU9mV2Vla3NbdG1wLmxvY2FsZSgnZmEnKS5kYXkoKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldEdyZWdvcmlhbkRhdGUodmFsdWU6IHN0cmluZyk6IERhdGUgfCBudWxsIHtcbiAgICBjb25zdCB0bXAgPSBtb21lbnQuZnJvbSh2YWx1ZSwgJ2ZhJywgJ1lZWVkvTU0vREQnKTtcbiAgICBpZiAodG1wLmlzVmFsaWQoKSkge1xuICAgICAgcmV0dXJuIHRtcC50b0RhdGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIGNvbWJpbmVSZWdFeHBzKC4uLnBhcmFtczogYW55W10pIHtcbiAgICBsZXQgY29tYmluZWQgPSAnKCc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbWJpbmVkICs9ICcoJztcbiAgICAgIGlmIChpICE9PSBhcmd1bWVudHMubGVuZ3RoIC0gMSkge1xuICAgICAgICBjb21iaW5lZCArPSBhcmd1bWVudHNbaV0gKyAnKXwnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tYmluZWQgKz0gYXJndW1lbnRzW2ldICsgJyknO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29tYmluZWQgKyAnKSc7XG4gIH1cbn1cbiJdfQ==