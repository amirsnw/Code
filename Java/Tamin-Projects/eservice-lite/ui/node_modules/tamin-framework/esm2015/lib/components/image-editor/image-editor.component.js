/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';
import { TaminLazyLoadService } from '../../services/tamin-lazy-load/tamin-lazy-load.service';
import { Subscription } from 'rxjs';
import { TaminModalComponent } from '../tamin-modal/tamin-modal.component';
export class ImageEditorComponent {
    /**
     * @param {?} taminLazyLoadService
     * @param {?} changeDetectorRef
     */
    constructor(taminLazyLoadService, changeDetectorRef) {
        this.taminLazyLoadService = taminLazyLoadService;
        this.changeDetectorRef = changeDetectorRef;
        this._subscription = new Subscription();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    getImage() {
        this.cropper.getCroppedCanvas().toBlob((/**
         * @param {?} blob
         * @return {?}
         */
        (blob) => {
            /** @type {?} */
            const size = Math.ceil(blob.size / 1024).toString() + ' KB';
            alert(size);
        }));
    }
    /**
     * @param {?} image
     * @return {?}
     */
    open(image) {
        /** @type {?} */
        const me = this;
        this._subscription.add(this.taminLazyLoadService.loadJs('assets/cropperjs/cropper.js').subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this._subscription.add(this.taminLazyLoadService.loadCss('assets/cropperjs/cropper.css').subscribe((/**
             * @param {?} value1
             * @return {?}
             */
            value1 => {
                this.thModal.show();
                if (this.cropper) {
                    this.cropper.clear();
                    this.cropper.replace(image);
                }
                else {
                    this.image.nativeElement.src = image;
                    this.cropper = new Cropper(this.image.nativeElement, {
                        aspectRatio: 16 / 9,
                        preview: me.imagePreview.nativeElement,
                        crop: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                        }),
                    });
                }
            })));
        })));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._subscription.unsubscribe();
    }
}
ImageEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-image-editor',
                template: "<tamin-modal #thModal>\r\n  <div class=\"row\" style=\"direction: ltr\">\r\n    <div class=\"col-3\">\r\n      <div #imagePreview class=\"image-preview\"></div>\r\n      <table class=\"table-button\" cellpadding=\"0\" cellspacing=\"0\">\r\n        <tr>\r\n          <td (click)=\"cropper.move(-10,0)\"><i class=\"icon-left-big\"></i></td>\r\n          <td (click)=\"cropper.move(10,0)\"><i class=\"icon-right-big\"></i></td>\r\n          <td (click)=\"cropper.move(0,-10)\"><i class=\"icon-up-big\"></i></td>\r\n          <td (click)=\"cropper.move(0,10)\"><i class=\"icon-down-big\"></i></td>\r\n        </tr>\r\n      </table>\r\n      <table class=\"table-button\" cellpadding=\"0\" cellspacing=\"0\">\r\n        <tr>\r\n          <td (click)=\"cropper.rotate(-90)\"><i class=\"icon-cw\"></i></td>\r\n          <td (click)=\"cropper.rotate(90)\"><i class=\"icon-ccw\"></i></td>\r\n        </tr>\r\n      </table>\r\n      <table class=\"table-button\" cellpadding=\"0\" cellspacing=\"0\">\r\n        <tr>\r\n          <td (click)=\"cropper.zoom(-0.1)\"><i class=\"icon-zoom-out\"></i></td>\r\n          <td (click)=\"cropper.zoom(0.1)\"><i class=\"icon-zoom-in\"></i></td>\r\n        </tr>\r\n      </table>\r\n      <table class=\"table-button\" cellpadding=\"0\" cellspacing=\"0\">\r\n        <tr>\r\n          <td (click)=\"cropper.reset()\"><i class=\"icon-arrows-cw\"></i></td>\r\n        </tr>\r\n      </table>\r\n      <button (click)=\"getImage()\">Get Image</button>\r\n    </div>\r\n    <div class=\"col-9\" style=\"direction: ltr\">\r\n      <div style=\"width:100%; height: 500px\">\r\n        <img #image style=\"border: solid 1px #cacaca;\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</tamin-modal>\r\n",
                styles: [".col-1,.col-10,.col-11,.col-12,.col-2,.col-3,.col-4,.col-5,.col-6,.col-7,.col-8,.col-9{padding:5px}.image-preview{overflow:hidden;width:256px;height:144px;border:1px solid #000}.image-preview>img{max-width:100%}.table-button{margin:5px;border-collapse:collapse}.table-button td{border:1px solid #007bff;background-color:#007bff;color:#fff;padding:5px;cursor:pointer}.table-button td:hover{border:1px solid #0062cc;background-color:#0062cc}"]
            }] }
];
/** @nocollapse */
ImageEditorComponent.ctorParameters = () => [
    { type: TaminLazyLoadService },
    { type: ChangeDetectorRef }
];
ImageEditorComponent.propDecorators = {
    image: [{ type: ViewChild, args: ['image',] }],
    thModal: [{ type: ViewChild, args: ['thModal',] }],
    imagePreview: [{ type: ViewChild, args: ['imagePreview',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ImageEditorComponent.prototype._subscription;
    /** @type {?} */
    ImageEditorComponent.prototype.image;
    /** @type {?} */
    ImageEditorComponent.prototype.thModal;
    /** @type {?} */
    ImageEditorComponent.prototype.imagePreview;
    /** @type {?} */
    ImageEditorComponent.prototype.cropper;
    /**
     * @type {?}
     * @private
     */
    ImageEditorComponent.prototype.taminLazyLoadService;
    /**
     * @type {?}
     * @private
     */
    ImageEditorComponent.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtZWRpdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RhbWluLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2ltYWdlLWVkaXRvci9pbWFnZS1lZGl0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWdCLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQXFCLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNwSCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx3REFBd0QsQ0FBQztBQUM1RixPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ2xDLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBU3pFLE1BQU0sT0FBTyxvQkFBb0I7Ozs7O0lBUS9CLFlBQ1Usb0JBQTBDLEVBQzFDLGlCQUFvQztRQURwQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQzFDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFSdEMsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBUzNDLENBQUM7Ozs7SUFFRCxRQUFRO0lBQ1IsQ0FBQzs7OztJQUVELGVBQWU7SUFDZixDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxNQUFNOzs7O1FBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTs7a0JBQ3hDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSztZQUMzRCxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDZCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsSUFBSSxDQUFDLEtBQUs7O2NBQ0YsRUFBRSxHQUFHLElBQUk7UUFFZixJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLDZCQUE2QixDQUFDLENBQUMsU0FBUzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3JHLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUNwQixJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUMsU0FBUzs7OztZQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUNuRixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNwQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7b0JBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUM3QjtxQkFBTTtvQkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO29CQUNyQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFO3dCQUNuRCxXQUFXLEVBQUUsRUFBRSxHQUFHLENBQUM7d0JBQ25CLE9BQU8sRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLGFBQWE7d0JBQ3RDLElBQUk7Ozs7d0JBQUUsVUFBVSxDQUFDO3dCQUNqQixDQUFDLENBQUE7cUJBQ0YsQ0FBQyxDQUFDO2lCQUNKO1lBQ0gsQ0FBQyxFQUFDLENBQ0gsQ0FBQztRQUNKLENBQUMsRUFBQyxDQUNILENBQUM7SUFDSixDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbkMsQ0FBQzs7O1lBMURGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5Qix1c0RBQTRDOzthQUU3Qzs7OztZQVZPLG9CQUFvQjtZQURMLGlCQUFpQjs7O29CQWVyQyxTQUFTLFNBQUMsT0FBTztzQkFDakIsU0FBUyxTQUFDLFNBQVM7MkJBQ25CLFNBQVMsU0FBQyxjQUFjOzs7Ozs7O0lBSHpCLDZDQUEyQzs7SUFDM0MscUNBQXNDOztJQUN0Qyx1Q0FBbUQ7O0lBQ25ELDRDQUFvRDs7SUFDcEQsdUNBQWE7Ozs7O0lBR1gsb0RBQWtEOzs7OztJQUNsRCxpREFBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgT25Jbml0LCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUYW1pbkxhenlMb2FkU2VydmljZX0gZnJvbSAnLi4vLi4vc2VydmljZXMvdGFtaW4tbGF6eS1sb2FkL3RhbWluLWxhenktbG9hZC5zZXJ2aWNlJztcbmltcG9ydCB7U3Vic2NyaXB0aW9ufSBmcm9tICdyeGpzJztcbmltcG9ydCB7VGFtaW5Nb2RhbENvbXBvbmVudH0gZnJvbSAnLi4vdGFtaW4tbW9kYWwvdGFtaW4tbW9kYWwuY29tcG9uZW50JztcblxuZGVjbGFyZSBsZXQgQ3JvcHBlcjogYW55O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0YW1pbi1pbWFnZS1lZGl0b3InLFxuICB0ZW1wbGF0ZVVybDogJy4vaW1hZ2UtZWRpdG9yLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vaW1hZ2UtZWRpdG9yLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgSW1hZ2VFZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICBAVmlld0NoaWxkKCdpbWFnZScpIGltYWdlOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCd0aE1vZGFsJykgdGhNb2RhbDogVGFtaW5Nb2RhbENvbXBvbmVudDtcbiAgQFZpZXdDaGlsZCgnaW1hZ2VQcmV2aWV3JykgaW1hZ2VQcmV2aWV3OiBFbGVtZW50UmVmO1xuICBjcm9wcGVyOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0YW1pbkxhenlMb2FkU2VydmljZTogVGFtaW5MYXp5TG9hZFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICB9XG5cbiAgZ2V0SW1hZ2UoKTogYW55IHtcbiAgICB0aGlzLmNyb3BwZXIuZ2V0Q3JvcHBlZENhbnZhcygpLnRvQmxvYigoYmxvYikgPT4ge1xuICAgICAgY29uc3Qgc2l6ZSA9IE1hdGguY2VpbChibG9iLnNpemUgLyAxMDI0KS50b1N0cmluZygpICsgJyBLQic7XG4gICAgICBhbGVydChzaXplKTtcbiAgICB9KTtcbiAgfVxuXG4gIG9wZW4oaW1hZ2UpIHtcbiAgICBjb25zdCBtZSA9IHRoaXM7XG5cbiAgICB0aGlzLl9zdWJzY3JpcHRpb24uYWRkKHRoaXMudGFtaW5MYXp5TG9hZFNlcnZpY2UubG9hZEpzKCdhc3NldHMvY3JvcHBlcmpzL2Nyb3BwZXIuanMnKS5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb24uYWRkKFxuICAgICAgICAgIHRoaXMudGFtaW5MYXp5TG9hZFNlcnZpY2UubG9hZENzcygnYXNzZXRzL2Nyb3BwZXJqcy9jcm9wcGVyLmNzcycpLnN1YnNjcmliZSh2YWx1ZTEgPT4ge1xuICAgICAgICAgICAgdGhpcy50aE1vZGFsLnNob3coKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNyb3BwZXIpIHtcbiAgICAgICAgICAgICAgdGhpcy5jcm9wcGVyLmNsZWFyKCk7XG4gICAgICAgICAgICAgIHRoaXMuY3JvcHBlci5yZXBsYWNlKGltYWdlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuaW1hZ2UubmF0aXZlRWxlbWVudC5zcmMgPSBpbWFnZTtcbiAgICAgICAgICAgICAgdGhpcy5jcm9wcGVyID0gbmV3IENyb3BwZXIodGhpcy5pbWFnZS5uYXRpdmVFbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgYXNwZWN0UmF0aW86IDE2IC8gOSxcbiAgICAgICAgICAgICAgICBwcmV2aWV3OiBtZS5pbWFnZVByZXZpZXcubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgICAgICBjcm9wOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG59XG4iXX0=