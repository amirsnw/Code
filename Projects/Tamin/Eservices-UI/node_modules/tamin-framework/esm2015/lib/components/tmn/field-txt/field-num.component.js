/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { ControlContainer, NG_VALUE_ACCESSOR } from '@angular/forms';
export class FieldNumComponent {
    /**
     * @param {?} controlContainer
     */
    constructor(controlContainer) {
        this.controlContainer = controlContainer;
        this.maxLength = Number.MAX_SAFE_INTEGER;
        this.min = Number.MIN_SAFE_INTEGER;
        this.max = Number.MAX_SAFE_INTEGER;
        this.negativeNumberColor = 'red';
        this.blur = new EventEmitter();
        this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => {
        });
        this.onTouched = (/**
         * @return {?}
         */
        () => {
            this.blur.emit();
        });
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this.maskRef.value = val.toString();
    }
    /**
     * @return {?}
     */
    get value() {
        return this.maskRef.value;
    }
    /**
     * @return {?}
     */
    updateChanges() {
        this.onChange(this.value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        this.value = obj;
        this.updateChanges();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.control = this.controlContainer.control.get(this.formControlName);
        /** @type {?} */
        const me = this;
        this.maskRef = new IMask(this.element.nativeElement, {
            mask: Number,
            thousandsSeparator: ',',
            min: me.min,
            max: me.max
        });
    }
}
FieldNumComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'tmn-field-num',
                template: `<input
    type="text"
    [(ngModel)]="value"
    (ngModelChange)="updateChanges()"
    class="tamin-form-control-input"
    style="direction: ltr"
    (blur)="onTouched()"
    [disabled]="control?.disabled"
    [class.tamin-form-control-valid]="control?.touched && control?.valid"
    [class.tamin-form-control-invalid]="control?.touched && !control?.valid"
    [style.color]="value < 0 ? negativeNumberColor : ''"
    [attr.placeholder]="placeHolder"
    #element>`,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => FieldNumComponent)),
                        multi: true
                    }],
                styles: [`:host {
      width: 100%;
    }`]
            }] }
];
/** @nocollapse */
FieldNumComponent.ctorParameters = () => [
    { type: ControlContainer }
];
FieldNumComponent.propDecorators = {
    element: [{ type: ViewChild, args: ['element',] }],
    maxLength: [{ type: Input }],
    formControlName: [{ type: Input }],
    placeHolder: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    negativeNumberColor: [{ type: Input }],
    blur: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FieldNumComponent.prototype.control;
    /** @type {?} */
    FieldNumComponent.prototype.maskRef;
    /** @type {?} */
    FieldNumComponent.prototype.element;
    /** @type {?} */
    FieldNumComponent.prototype.maxLength;
    /** @type {?} */
    FieldNumComponent.prototype.formControlName;
    /** @type {?} */
    FieldNumComponent.prototype.placeHolder;
    /** @type {?} */
    FieldNumComponent.prototype.min;
    /** @type {?} */
    FieldNumComponent.prototype.max;
    /** @type {?} */
    FieldNumComponent.prototype.negativeNumberColor;
    /** @type {?} */
    FieldNumComponent.prototype.blur;
    /** @type {?} */
    FieldNumComponent.prototype.onChange;
    /** @type {?} */
    FieldNumComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    FieldNumComponent.prototype.controlContainer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtbnVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RhbWluLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3Rtbi9maWVsZC10eHQvZmllbGQtbnVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFVBQVUsRUFDVixLQUFLLEVBQ0wsTUFBTSxFQUNOLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBRUwsZ0JBQWdCLEVBRWhCLGlCQUFpQixFQUNsQixNQUFNLGdCQUFnQixDQUFDO0FBZ0N4QixNQUFNLE9BQU8saUJBQWlCOzs7O0lBMkI1QixZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQXZCN0MsY0FBUyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUdwQyxRQUFHLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1FBQzlCLFFBQUcsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7UUFDOUIsd0JBQW1CLEdBQUcsS0FBSyxDQUFDO1FBQzNCLFNBQUksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBVXBDLGFBQVE7Ozs7UUFBcUIsQ0FBQyxDQUFNLEVBQUUsRUFBRTtRQUN4QyxDQUFDLEVBQUE7UUFFRCxjQUFTOzs7UUFBZSxHQUFHLEVBQUU7WUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNuQixDQUFDLEVBQUE7SUFJRCxDQUFDOzs7OztJQWpCRCxJQUFJLEtBQUssQ0FBQyxHQUFRO1FBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN0QyxDQUFDOzs7O0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUM1QixDQUFDOzs7O0lBYUQsYUFBYTtRQUNYLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsRUFBTztRQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7OztJQUVELGlCQUFpQixDQUFDLEVBQU87UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsR0FBUTtRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUNqQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7OztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQzs7Y0FDakUsRUFBRSxHQUFHLElBQUk7UUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFO1lBQ25ELElBQUksRUFBRSxNQUFNO1lBQ1osa0JBQWtCLEVBQUUsR0FBRztZQUN2QixHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUc7WUFDWCxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUc7U0FDWixDQUFDLENBQUM7SUFDTCxDQUFDOzs7WUFwRkYsU0FBUyxTQUFDOztnQkFFVCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Y0FZRTtnQkFNWixTQUFTLEVBQUUsQ0FBQzt3QkFDVixPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixFQUFDO3dCQUNoRCxLQUFLLEVBQUUsSUFBSTtxQkFDWixDQUFDO3lCQVJBOztNQUVFO2FBT0w7Ozs7WUFsQ0MsZ0JBQWdCOzs7c0JBc0NmLFNBQVMsU0FBQyxTQUFTO3dCQUNuQixLQUFLOzhCQUNMLEtBQUs7MEJBQ0wsS0FBSztrQkFDTCxLQUFLO2tCQUNMLEtBQUs7a0NBQ0wsS0FBSzttQkFDTCxNQUFNOzs7O0lBVFAsb0NBQXlCOztJQUN6QixvQ0FBYTs7SUFDYixvQ0FBMEM7O0lBQzFDLHNDQUE2Qzs7SUFDN0MsNENBQWlDOztJQUNqQyx3Q0FBNkI7O0lBQzdCLGdDQUF1Qzs7SUFDdkMsZ0NBQXVDOztJQUN2QyxnREFBcUM7O0lBQ3JDLGlDQUFvQzs7SUFVcEMscUNBQ0M7O0lBRUQsc0NBRUM7Ozs7O0lBRVcsNkNBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIGZvcndhcmRSZWYsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEFic3RyYWN0Q29udHJvbCxcbiAgQ29udHJvbENvbnRhaW5lcixcbiAgQ29udHJvbFZhbHVlQWNjZXNzb3IsXG4gIE5HX1ZBTFVFX0FDQ0VTU09SXG59IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7SVRhbWluRmllbGR9IGZyb20gJy4uL0lUYW1pbkZpZWxkJztcblxuZGVjbGFyZSBsZXQgSU1hc2s6IGFueTtcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICd0bW4tZmllbGQtbnVtJyxcbiAgdGVtcGxhdGU6IGA8aW5wdXRcbiAgICB0eXBlPVwidGV4dFwiXG4gICAgWyhuZ01vZGVsKV09XCJ2YWx1ZVwiXG4gICAgKG5nTW9kZWxDaGFuZ2UpPVwidXBkYXRlQ2hhbmdlcygpXCJcbiAgICBjbGFzcz1cInRhbWluLWZvcm0tY29udHJvbC1pbnB1dFwiXG4gICAgc3R5bGU9XCJkaXJlY3Rpb246IGx0clwiXG4gICAgKGJsdXIpPVwib25Ub3VjaGVkKClcIlxuICAgIFtkaXNhYmxlZF09XCJjb250cm9sPy5kaXNhYmxlZFwiXG4gICAgW2NsYXNzLnRhbWluLWZvcm0tY29udHJvbC12YWxpZF09XCJjb250cm9sPy50b3VjaGVkICYmIGNvbnRyb2w/LnZhbGlkXCJcbiAgICBbY2xhc3MudGFtaW4tZm9ybS1jb250cm9sLWludmFsaWRdPVwiY29udHJvbD8udG91Y2hlZCAmJiAhY29udHJvbD8udmFsaWRcIlxuICAgIFtzdHlsZS5jb2xvcl09XCJ2YWx1ZSA8IDAgPyBuZWdhdGl2ZU51bWJlckNvbG9yIDogJydcIlxuICAgIFthdHRyLnBsYWNlaG9sZGVyXT1cInBsYWNlSG9sZGVyXCJcbiAgICAjZWxlbWVudD5gLFxuICBzdHlsZXM6IFtcbiAgICBgOmhvc3Qge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfWBcbiAgXSxcbiAgcHJvdmlkZXJzOiBbe1xuICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEZpZWxkTnVtQ29tcG9uZW50KSxcbiAgICBtdWx0aTogdHJ1ZVxuICB9XVxufSlcbmV4cG9ydCBjbGFzcyBGaWVsZE51bUNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBJVGFtaW5GaWVsZCwgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbDtcbiAgbWFza1JlZjogYW55O1xuICBAVmlld0NoaWxkKCdlbGVtZW50JykgZWxlbWVudDogRWxlbWVudFJlZjtcbiAgQElucHV0KCkgbWF4TGVuZ3RoID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gIEBJbnB1dCgpIGZvcm1Db250cm9sTmFtZTogc3RyaW5nO1xuICBASW5wdXQoKSBwbGFjZUhvbGRlcjogc3RyaW5nO1xuICBASW5wdXQoKSBtaW4gPSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUjtcbiAgQElucHV0KCkgbWF4ID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gIEBJbnB1dCgpIG5lZ2F0aXZlTnVtYmVyQ29sb3IgPSAncmVkJztcbiAgQE91dHB1dCgpIGJsdXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgc2V0IHZhbHVlKHZhbDogYW55KSB7XG4gICAgdGhpcy5tYXNrUmVmLnZhbHVlID0gdmFsLnRvU3RyaW5nKCk7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFza1JlZi52YWx1ZTtcbiAgfVxuXG4gIG9uQ2hhbmdlOiAoXzogYW55KSA9PiB2b2lkID0gKF86IGFueSkgPT4ge1xuICB9XG5cbiAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkID0gKCkgPT4ge1xuICAgIHRoaXMuYmx1ci5lbWl0KCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRyb2xDb250YWluZXI6IENvbnRyb2xDb250YWluZXIpIHtcblxuICB9XG5cbiAgdXBkYXRlQ2hhbmdlcygpIHtcbiAgICB0aGlzLm9uQ2hhbmdlKHRoaXMudmFsdWUpO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICB3cml0ZVZhbHVlKG9iajogYW55KTogdm9pZCB7XG4gICAgdGhpcy52YWx1ZSA9IG9iajtcbiAgICB0aGlzLnVwZGF0ZUNoYW5nZXMoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRyb2wgPSB0aGlzLmNvbnRyb2xDb250YWluZXIuY29udHJvbC5nZXQodGhpcy5mb3JtQ29udHJvbE5hbWUpO1xuICAgIGNvbnN0IG1lID0gdGhpcztcbiAgICB0aGlzLm1hc2tSZWYgPSBuZXcgSU1hc2sodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgIG1hc2s6IE51bWJlcixcbiAgICAgIHRob3VzYW5kc1NlcGFyYXRvcjogJywnLFxuICAgICAgbWluOiBtZS5taW4sXG4gICAgICBtYXg6IG1lLm1heFxuICAgIH0pO1xuICB9XG59XG4iXX0=