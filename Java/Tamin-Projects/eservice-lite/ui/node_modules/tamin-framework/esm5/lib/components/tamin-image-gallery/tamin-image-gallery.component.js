/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { Subscription } from 'rxjs';
import { TaminLazyLoadService } from '../../services/tamin-lazy-load/tamin-lazy-load.service';
import { OverlayService } from '../../services/overlay/overlay.service';
import { isNullOrUndefined } from 'util';
import { Guid } from '../../helpers/guid';
import { PersianNumberPipe } from '../../pipes/persian-number.pipe';
/* In Cordova, we need to install the https://github.com/caixiangsap/filechooser.git */
var TaminImageGalleryComponent = /** @class */ (function () {
    function TaminImageGalleryComponent(taminLazyLoadService, changeDetectorRef, overlayService) {
        this.taminLazyLoadService = taminLazyLoadService;
        this.changeDetectorRef = changeDetectorRef;
        this.overlayService = overlayService;
        this.images = [];
        this.insertable = true;
        this.maxImageSize = 120;
        this.afterInsert = new EventEmitter();
        this.afterRemove = new EventEmitter();
        this.beforeInsert = new EventEmitter();
        this.beforeRemove = new EventEmitter();
        this._subscription = new Subscription();
    }
    /**
     * @return {?}
     */
    TaminImageGalleryComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} title
     * @param {?=} tag
     * @return {?}
     */
    TaminImageGalleryComponent.prototype.selectImage = /**
     * @param {?} title
     * @param {?=} tag
     * @return {?}
     */
    function (title, tag) {
        if (tag === void 0) { tag = null; }
        /** @type {?} */
        var me = this;
        this.defaultTitle = title;
        this.defaultTag = tag;
        if (window.hasOwnProperty('cordova')) {
            this.checkPermission().then((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value) {
                    filechooser.open({ 'mime': 'image/*' }, (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        me.getBase64FromImageUrl(data.url);
                    }), (/**
                     * @param {?} reason
                     * @return {?}
                     */
                    function (reason) {
                        me.showAlert('پیام سیستم', 'خطا در بارگذاری فایل');
                    }));
                }
            })).catch((/**
             * @param {?} reason
             * @return {?}
             */
            function (reason) {
                me.showAlert('پیام سیستم', 'خطا در دسترسی به تصاویر ذخیره شده');
            }));
        }
        else {
            this.imageInput.nativeElement.click();
        }
    };
    /**
     * @return {?}
     */
    TaminImageGalleryComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var me = this;
        this.imageInput.nativeElement.addEventListener('change', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e.srcElement.files[0].size > me.maxImageSize * 1024) {
                /** @type {?} */
                var persianNumberPipe = new PersianNumberPipe();
                /** @type {?} */
                var message = persianNumberPipe.transform('اندازه فایل تصویر نمی تواند بیش از' + ' ' + me.maxImageSize.toString() + ' ' + 'کیلو بایت باشد.');
                me.showAlert('پیام سیستم', message);
                e.srcElement.value = '';
                return;
            }
            /** @type {?} */
            var reader = new FileReader();
            reader.readAsDataURL(e.srcElement.files[0]);
            reader.onload = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                /** @type {?} */
                var model = new ImageModel();
                model.source = ((/** @type {?} */ (event.target))).result;
                model.title = _this.defaultTitle;
                model.tag = _this.defaultTag;
                model.id = model.id = Guid.create().toString();
                if (!_this.images.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.source === model.source; }))) {
                    _this.beforeInsert.emit();
                    me.images.push(model);
                    _this.afterInsert.emit(model);
                    _this.changeDetectorRef.detectChanges();
                    _this._gallery.update();
                    _this.imageInput.nativeElement.value = '';
                }
            });
        }));
        this._subscription.add(this.taminLazyLoadService.loadJs('assets/viewerjs/dist/viewer.js').subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this._subscription.add(_this.taminLazyLoadService.loadCss('assets/viewerjs/dist/viewer.css').subscribe((/**
             * @param {?} value1
             * @return {?}
             */
            function (value1) {
                _this._gallery = new Viewer(_this.imageContainer.nativeElement);
            })));
        })));
    };
    /**
     * @param {?} model
     * @return {?}
     */
    TaminImageGalleryComponent.prototype.addImage = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (isNullOrUndefined(model)) {
            alert('اطلاعات تصویر نادرست است.');
            return;
        }
        this.beforeInsert.emit(model);
        model.id = Guid.create().toString();
        this.images.push(model);
        this.afterInsert.emit(model);
        this.changeDetectorRef.detectChanges();
        this._gallery.update();
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TaminImageGalleryComponent.prototype.removeImage = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        this.showQuestionBox('پیام سیستم', 'آیا مطمئن هستید', (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var model = _this.images.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.id === id; }));
            _this.beforeRemove.emit(model);
            _this.images = _this.images.filter((/**
             * @param {?} obj
             * @return {?}
             */
            function (obj) { return obj.id !== id; }));
            _this.changeDetectorRef.detectChanges();
            _this._gallery.update();
            _this.afterRemove.emit(model);
        }), (/**
         * @return {?}
         */
        function () {
        }));
    };
    /**
     * @return {?}
     */
    TaminImageGalleryComponent.prototype.startWaiting = /**
     * @return {?}
     */
    function () {
        this._overlay = this.overlayService.show(this.host.nativeElement);
    };
    /**
     * @return {?}
     */
    TaminImageGalleryComponent.prototype.stopWaiting = /**
     * @return {?}
     */
    function () {
        this.overlayService.hide(this._overlay);
    };
    /**
     * @return {?}
     */
    TaminImageGalleryComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.stopWaiting();
        this._subscription.unsubscribe();
    };
    /**
     * @private
     * @param {?} title
     * @param {?} message
     * @param {?} yesCallback
     * @param {?} noCallback
     * @return {?}
     */
    TaminImageGalleryComponent.prototype.showQuestionBox = /**
     * @private
     * @param {?} title
     * @param {?} message
     * @param {?} yesCallback
     * @param {?} noCallback
     * @return {?}
     */
    function (title, message, yesCallback, noCallback) {
        alertify.confirm(title, message, yesCallback, noCallback)
            .set({
            labels: { ok: 'بلی', cancel: 'خیر' }
        });
    };
    /**
     * @private
     * @param {?} title
     * @param {?} message
     * @return {?}
     */
    TaminImageGalleryComponent.prototype.showAlert = /**
     * @private
     * @param {?} title
     * @param {?} message
     * @return {?}
     */
    function (title, message) {
        alertify.alert(title, message);
    };
    /**
     * @param {?} url
     * @return {?}
     */
    TaminImageGalleryComponent.prototype.getBase64FromImageUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        var _this = this;
        /** @type {?} */
        var me = this;
        /** @type {?} */
        var img = new Image();
        img.setAttribute('crossOrigin', 'anonymous');
        img.onload = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            /** @type {?} */
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            /** @type {?} */
            var dataURL = canvas.toDataURL('image/png');
            if (_this.dataURLtoBlob(dataURL).size > me.maxImageSize * 1024) {
                /** @type {?} */
                var persianNumberPipe = new PersianNumberPipe();
                /** @type {?} */
                var message = persianNumberPipe.transform('اندازه فایل تصویر نمی تواند بیش از' + ' ' + me.maxImageSize.toString() + ' ' + 'کیلو بایت باشد.');
                me.showAlert('پیام سیستم', message);
                return;
            }
            /** @type {?} */
            var model = new ImageModel();
            model.source = dataURL;
            model.title = _this.defaultTitle;
            model.tag = _this.defaultTag;
            model.id = model.id = Guid.create().toString();
            if (!_this.images.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.source === model.source; }))) {
                _this.beforeInsert.emit();
                me.images.push(model);
                _this.afterInsert.emit(model);
                _this.changeDetectorRef.detectChanges();
                _this._gallery.update();
                _this.imageInput.nativeElement.value = '';
            }
            // alert(dataURL.replace(/^data:image\/(png|jpg);base64,/, ''));
        });
        img.src = url;
    };
    /**
     * @param {?} dataURL
     * @return {?}
     */
    TaminImageGalleryComponent.prototype.dataURLtoBlob = /**
     * @param {?} dataURL
     * @return {?}
     */
    function (dataURL) {
        /** @type {?} */
        var binary = atob(dataURL.split(',')[1]);
        // Create 8-bit unsigned array
        /** @type {?} */
        var array = [];
        for (var i = 0; i < binary.length; i++) {
            array.push(binary.charCodeAt(i));
        }
        return new Blob([new Uint8Array(array)], { type: 'image/png' });
    };
    /**
     * @return {?}
     */
    TaminImageGalleryComponent.prototype.checkPermission = /**
     * @return {?}
     */
    function () {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            // @ts-ignore
            /** @type {?} */
            var Permission = window.plugins.Permission;
            /** @type {?} */
            var permission = 'android.permission.WRITE_EXTERNAL_STORAGE';
            Permission.has(permission, (/**
             * @param {?} results
             * @return {?}
             */
            function (results) {
                if (!results[permission]) {
                    Permission.request(permission, (/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        if (result[permission]) {
                            resolve(true);
                        }
                        else {
                            resolve(false);
                        }
                    }), (/**
                     * @param {?} reason
                     * @return {?}
                     */
                    function (reason) {
                        reject(reason);
                    }));
                }
                else {
                    resolve(true);
                }
            }), (/**
             * @param {?} reason
             * @return {?}
             */
            function (reason) {
                reject(reason);
            }));
        }));
    };
    TaminImageGalleryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-image-gallery',
                    template: "<div #host>\n  <div class=\"image-container\" #imageContainer>\n    <ng-container *ngFor=\"let img of images\">\n\n      <div class=\"gallery-image-container\">\n        <div class=\"title\">{{img.title}}</div>\n        <img [attr.src]=\"img.source\" alt=\"\" class=\"img\">\n        <div class=\"footer\" *ngIf=\"img.removeable\">\n          <span><i class=\"icon-trash-empty remove\" (click)=\"removeImage(img.id)\"></i></span>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n  <input type=\"file\" name=\"name\" style=\"display: none;\" accept=\".jpg,.jpeg\" #imageInput/>\n</div>\n",
                    styles: [".image-container{display:flex;flex-wrap:wrap;width:calc(100% - 10px);min-height:100px;border:1px solid #cacaca;margin:5px}.gallery-image-container{width:180px;margin:10px;border:1px solid #0b7dda;position:relative}.gallery-image-container .title{color:#fff;background-color:#0b7dda;width:100%;padding:3px;text-align:center}.gallery-image-container .img{padding:5px;width:100%;height:auto}.gallery-image-container .footer{color:#fff;background-color:#0b7dda;width:100%;padding:3px;text-align:center;position:absolute;bottom:0}.gallery-image-container .remove{cursor:pointer}"]
                }] }
    ];
    /** @nocollapse */
    TaminImageGalleryComponent.ctorParameters = function () { return [
        { type: TaminLazyLoadService },
        { type: ChangeDetectorRef },
        { type: OverlayService }
    ]; };
    TaminImageGalleryComponent.propDecorators = {
        imageContainer: [{ type: ViewChild, args: ['imageContainer',] }],
        imageInput: [{ type: ViewChild, args: ['imageInput',] }],
        host: [{ type: ViewChild, args: ['host',] }],
        insertable: [{ type: Input }],
        maxImageSize: [{ type: Input }],
        afterInsert: [{ type: Output }],
        afterRemove: [{ type: Output }],
        beforeInsert: [{ type: Output }],
        beforeRemove: [{ type: Output }]
    };
    return TaminImageGalleryComponent;
}());
export { TaminImageGalleryComponent };
if (false) {
    /** @type {?} */
    TaminImageGalleryComponent.prototype.imageContainer;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.imageInput;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.host;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.images;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype._gallery;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.insertable;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.maxImageSize;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.afterInsert;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.afterRemove;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.beforeInsert;
    /** @type {?} */
    TaminImageGalleryComponent.prototype.beforeRemove;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype._subscription;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype.defaultTitle;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype.defaultTag;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype.taminLazyLoadService;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    TaminImageGalleryComponent.prototype.overlayService;
}
var ImageModel = /** @class */ (function () {
    function ImageModel() {
        this.removeable = true;
    }
    return ImageModel;
}());
export { ImageModel };
if (false) {
    /** @type {?} */
    ImageModel.prototype.source;
    /** @type {?} */
    ImageModel.prototype.id;
    /** @type {?} */
    ImageModel.prototype.tag;
    /** @type {?} */
    ImageModel.prototype.title;
    /** @type {?} */
    ImageModel.prototype.removeable;
}
//# sourceMappingURL=data:application/json;base64,