/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Injector, Input } from '@angular/core';
import { OverlayService } from '../services/overlay/overlay.service';
import { TaminRestService } from '../services/tamin-rest-service/tamin-rest.service';
import { TaminSecurityService } from '../services/tamin-security/tamin-security.service';
import { PersianDateTimePipe } from '../pipes/persian-date-time.pipe';
import { PersianNumberPipe } from '../pipes/persian-number.pipe';
import { Router } from '@angular/router';
import { FormBuilder } from '@angular/forms';
import { ConstantsService } from '../services/constants.service';
export class TaminPageBaseComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.overlays = [];
        this.isModal = false;
        this._overlayService = injector.get(OverlayService);
        this._restService = injector.get(TaminRestService);
        this._securityService = injector.get(TaminSecurityService);
        this._persianDateTime = injector.get(PersianDateTimePipe);
        this._persianNumberPipe = injector.get(PersianNumberPipe);
        this._router = injector.get(Router);
        this._formBuilder = injector.get(FormBuilder);
        this._host = injector.get(ElementRef);
        this._changeDetectorRef = injector.get(ChangeDetectorRef);
        this._constants = injector.get(ConstantsService);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set visible(val) {
        this._host.nativeElement.style.display = val ? 'block' : 'none';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        window.scrollTo(0, 0);
        this.internalInitialize();
        this.initializePage();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set title(val) {
        this._title = val;
        document.title = 'سازمان تامین اجتماعی' + ' - ' + this._title;
    }
    /**
     * @return {?}
     */
    get title() {
        return this._title;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.overlays.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            this._overlayService.hide(item.overlay);
        }));
        this.destroyPage();
        alertify.closeAll();
    }
    /**
     * @return {?}
     */
    get restService() {
        return this._restService;
    }
    /**
     * @return {?}
     */
    get constants() {
        return this._constants;
    }
    /**
     * @return {?}
     */
    get formBuilder() {
        return this._formBuilder;
    }
    // get currentUser(): any {
    //   return this._securityService.currentUser;
    // }
    /**
     * @return {?}
     */
    get changeDetectorRef() {
        return this._changeDetectorRef;
    }
    /**
     * @return {?}
     */
    get securityService() {
        return this._securityService;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getPersianDate(date) {
        try {
            return this._persianDateTime.transform(new Date(date));
        }
        catch (_a) {
            return 'تاریخ نادرست';
        }
    }
    /**
     * @param {?} path
     * @return {?}
     */
    redirectTo(path) {
        this._router.navigate([path]);
    }
    /**
     * @param {?} title
     * @param {?} message
     * @param {?=} callback
     * @return {?}
     */
    showInfoMessageBox(title, message, callback = null) {
        if (callback) {
            alertify.alert(title, message, callback);
        }
        else {
            alertify.alert(title, message);
        }
    }
    /**
     * @param {?} title
     * @param {?} message
     * @param {?=} callback
     * @return {?}
     */
    showErrorMessageBox(title, message, callback = null) {
        /** @type {?} */
        const theTitle = `<span style="color: red">${title}</span>`;
        if (callback) {
            alertify.alert(theTitle, message, callback);
        }
        else {
            alertify.alert(theTitle, message);
        }
    }
    /**
     * @param {?} title
     * @param {?} message
     * @param {?} yesCallback
     * @param {?} noCallback
     * @return {?}
     */
    showQuestionBox(title, message, yesCallback, noCallback) {
        alertify.confirm(title, message, yesCallback, noCallback)
            .set({
            labels: { ok: 'بلی', cancel: 'خیر' }
        });
    }
    /**
     * @param {?} title
     * @param {?} message
     * @param {?} retryCallback
     * @param {?} cancelCallback
     * @return {?}
     */
    showRetryBox(title, message, retryCallback, cancelCallback) {
        alertify.confirm(title, message, retryCallback, cancelCallback)
            .set({
            labels: { ok: 'تلاش مجدد', cancel: 'انصراف' },
            'closable': false
        });
    }
    /**
     * @param {?} str
     * @return {?}
     */
    getPersianNumber(str) {
        return this._persianNumberPipe.transform(str);
    }
    /**
     * @protected
     * @return {?}
     */
    initializePage() {
    }
    /**
     * @protected
     * @return {?}
     */
    destroyPage() {
    }
    /**
     * @param {?=} element
     * @return {?}
     */
    showOverlay(element = null) {
        if (this.overlays.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        c => c.overlay === element)) >= 0) {
            return;
        }
        /** @type {?} */
        const overlay = this._overlayService.show(element);
        /** @type {?} */
        const id = (new Date()).getTime();
        this.overlays.push({
            overlay: overlay,
            id: id.toString()
        });
        return id.toString();
    }
    /**
     * @param {?} message
     * @param {?=} element
     * @return {?}
     */
    showOverlayWithMessage(message, element = null) {
        if (this.overlays.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        c => c.overlay === element)) >= 0) {
            return;
        }
        /** @type {?} */
        const overlay = this._overlayService.showMessage(message, element);
        /** @type {?} */
        const id = (new Date()).getTime();
        this.overlays.push({
            overlay: overlay,
            id: id.toString()
        });
        return id.toString();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    hideOverlay(id) {
        /** @type {?} */
        const tmp = this.overlays.find((/**
         * @param {?} c
         * @return {?}
         */
        c => c.id === id));
        if (tmp) {
            this._overlayService.hide(tmp.overlay);
        }
        /** @type {?} */
        const index = this.overlays.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        c => c.id === id));
        this.overlays.splice(index, 1);
    }
    /**
     * @private
     * @return {?}
     */
    internalInitialize() {
    }
    /**
     * @protected
     * @return {?}
     */
    loadPageData() {
    }
    /**
     * @return {?}
     */
    onTour() {
        introJs().setOptions({
            'nextLabel': 'بعد',
            'prevLabel': 'قبل',
            'skipLabel': 'خروج',
            'doneLabel': 'اتمام'
        }).start();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => this.loadPageData()), 0);
    }
    /**
     * @return {?}
     */
    openModal() {
    }
    /**
     * @param {?} form
     * @return {?}
     */
    markFormGroupAsTouched(form) {
        ((/** @type {?} */ (Object))).values(form.controls).forEach((/**
         * @param {?} control
         * @return {?}
         */
        control => control.markAsTouched()));
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this._changeDetectorRef.detectChanges();
    }
}
TaminPageBaseComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-page-base-component',
                template: ''
            }] }
];
/** @nocollapse */
TaminPageBaseComponent.ctorParameters = () => [
    { type: Injector }
];
TaminPageBaseComponent.propDecorators = {
    isModal: [{ type: Input }],
    visible: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaminPageBaseComponent.prototype._title;
    /**
     * @type {?}
     * @private
     */
    TaminPageBaseComponent.prototype.overlays;
    /**
     * @type {?}
     * @private
     */
    TaminPageBaseComponent.prototype._overlayService;
    /**
     * @type {?}
     * @private
     */
    TaminPageBaseComponent.prototype._restService;
    /**
     * @type {?}
     * @private
     */
    TaminPageBaseComponent.prototype._securityService;
    /**
     * @type {?}
     * @private
     */
    TaminPageBaseComponent.prototype._persianDateTime;
    /**
     * @type {?}
     * @private
     */
    TaminPageBaseComponent.prototype._persianNumberPipe;
    /**
     * @type {?}
     * @private
     */
    TaminPageBaseComponent.prototype._router;
    /**
     * @type {?}
     * @private
     */
    TaminPageBaseComponent.prototype._constants;
    /**
     * @type {?}
     * @private
     */
    TaminPageBaseComponent.prototype._formBuilder;
    /**
     * @type {?}
     * @private
     */
    TaminPageBaseComponent.prototype._host;
    /**
     * @type {?}
     * @private
     */
    TaminPageBaseComponent.prototype._changeDetectorRef;
    /** @type {?} */
    TaminPageBaseComponent.prototype.isModal;
    /**
     * @type {?}
     * @private
     */
    TaminPageBaseComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,