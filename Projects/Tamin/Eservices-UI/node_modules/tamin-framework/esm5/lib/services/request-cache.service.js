/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var RequestCacheService = /** @class */ (function () {
    function RequestCacheService(taminApplicationConfig) {
        this.taminApplicationConfig = taminApplicationConfig;
        this.cache = new Map();
    }
    /**
     * @param {?} url
     * @return {?}
     */
    RequestCacheService.prototype.isCacheable = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var tmp = this.taminApplicationConfig.cacheableUrls.find((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c === url; }));
        return tmp !== undefined;
    };
    /**
     * @param {?} url
     * @return {?}
     */
    RequestCacheService.prototype.hasCached = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this.cache.has(url);
    };
    /**
     * @param {?} url
     * @return {?}
     */
    RequestCacheService.prototype.getCached = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this.cache.get(url);
    };
    /**
     * @param {?} url
     * @param {?} data
     * @return {?}
     */
    RequestCacheService.prototype.setCache = /**
     * @param {?} url
     * @param {?} data
     * @return {?}
     */
    function (url, data) {
        return this.cache.set(url, data);
    };
    /**
     * @param {?} url
     * @return {?}
     */
    RequestCacheService.prototype.deleteCache = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.cache.delete(url);
    };
    RequestCacheService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    RequestCacheService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: ['taminApplicationConfig',] }] }
    ]; };
    /** @nocollapse */ RequestCacheService.ngInjectableDef = i0.defineInjectable({ factory: function RequestCacheService_Factory() { return new RequestCacheService(i0.inject("taminApplicationConfig")); }, token: RequestCacheService, providedIn: "root" });
    return RequestCacheService;
}());
export { RequestCacheService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RequestCacheService.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    RequestCacheService.prototype.taminApplicationConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC1jYWNoZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdGFtaW4tZnJhbWV3b3JrLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3JlcXVlc3QtY2FjaGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7O0FBR2pEO0lBT0UsNkJBQXNELHNCQUErQztRQUEvQywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXlCO1FBRjdGLFVBQUssR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBRzFCLENBQUM7Ozs7O0lBR0QseUNBQVc7Ozs7SUFBWCxVQUFZLEdBQVc7O1lBQ2YsR0FBRyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMsSUFBSTs7OztRQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxLQUFLLEdBQUcsRUFBVCxDQUFTLEVBQUM7UUFDMUUsT0FBTyxHQUFHLEtBQUssU0FBUyxDQUFDO0lBRTNCLENBQUM7Ozs7O0lBRUQsdUNBQVM7Ozs7SUFBVCxVQUFVLEdBQVc7UUFDbkIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUU3QixDQUFDOzs7OztJQUVELHVDQUFTOzs7O0lBQVQsVUFBVSxHQUFXO1FBQ25CLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7O0lBRUQsc0NBQVE7Ozs7O0lBQVIsVUFBUyxHQUFXLEVBQUUsSUFBUztRQUM3QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7OztJQUVELHlDQUFXOzs7O0lBQVgsVUFBWSxHQUFXO1FBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7O2dCQWhDRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dEQUtjLE1BQU0sU0FBQyx3QkFBd0I7Ozs4QkFWOUM7Q0FvQ0MsQUFqQ0QsSUFpQ0M7U0E5QlksbUJBQW1COzs7Ozs7SUFFOUIsb0NBQTBCOzs7OztJQUVkLHFEQUF5RiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SVRhbWluQXBwbGljYXRpb25Db25maWd9IGZyb20gJy4uL2ludGVyZmFjZXMvdGFtaW4tYXBwbGljYXRpb24tY29uZmlnJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUmVxdWVzdENhY2hlU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBjYWNoZSA9IG5ldyBNYXAoKTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KCd0YW1pbkFwcGxpY2F0aW9uQ29uZmlnJykgcHJpdmF0ZSB0YW1pbkFwcGxpY2F0aW9uQ29uZmlnOiBJVGFtaW5BcHBsaWNhdGlvbkNvbmZpZykge1xuICB9XG5cblxuICBpc0NhY2hlYWJsZSh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHRtcCA9IHRoaXMudGFtaW5BcHBsaWNhdGlvbkNvbmZpZy5jYWNoZWFibGVVcmxzLmZpbmQoYyA9PiBjID09PSB1cmwpO1xuICAgIHJldHVybiB0bXAgIT09IHVuZGVmaW5lZDtcblxuICB9XG5cbiAgaGFzQ2FjaGVkKHVybDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuaGFzKHVybCk7XG5cbiAgfVxuXG4gIGdldENhY2hlZCh1cmw6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmNhY2hlLmdldCh1cmwpO1xuICB9XG5cbiAgc2V0Q2FjaGUodXJsOiBzdHJpbmcsIGRhdGE6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmNhY2hlLnNldCh1cmwsIGRhdGEpO1xuICB9XG5cbiAgZGVsZXRlQ2FjaGUodXJsOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNhY2hlLmRlbGV0ZSh1cmwpO1xuICB9XG59XG4iXX0=