/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';
import PopperJs from 'popper.js';
export class PickerContainerComponent {
    /**
     * @param {?} changeDetectorRef
     */
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.adjustWidth = true;
        this.placement = 'bottom-end';
        this.padding = '5px';
        this.berforeHide = new EventEmitter();
        this.afterHide = new EventEmitter();
        this.berforeShow = new EventEmitter();
        this.afterShow = new EventEmitter();
    }
    /**
     * @return {?}
     */
    toggle() {
        if (this.shown) {
            this.hide();
        }
        else {
            this.show();
        }
    }
    /**
     * @return {?}
     */
    show() {
        this.berforeShow.emit();
        this.shown = true;
        this.changeDetectorRef.detectChanges();
        if (this.adjustWidth) {
            this.picker.nativeElement.style.width = this.parent.nativeElement.getBoundingClientRect().width - 3 + 'px';
        }
        if (this._thePopper) {
            this._thePopper = null;
        }
        this._thePopper = new PopperJs(this.parent.nativeElement, this.picker.nativeElement, {
            placement: (/** @type {?} */ (this.placement)),
        });
        this.afterShow.emit();
    }
    /**
     * @return {?}
     */
    hide() {
        this.berforeHide.emit();
        this.shown = false;
        this.afterHide.emit();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    update() {
        if (this.shown) {
            this._thePopper.scheduleUpdate();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    documentEventHandler(event) {
        if (this.shown) {
            if (event.code === 'Tab' || event.code === 'Escape') {
                this.toggle();
            }
            /** @type {?} */
            let shouldHidePicker = !this.picker.nativeElement.contains(event.target);
            shouldHidePicker = shouldHidePicker && !this.parent.nativeElement.contains(event.target);
            if (this.button) {
                shouldHidePicker = shouldHidePicker && !this.button.nativeElement.contains(event.target);
            }
            if (shouldHidePicker) {
                this.hide();
            }
        }
    }
}
PickerContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-picker-container',
                template: "<div class=\"picker-container\" *ngIf=\"shown\" #picker>\n  <ng-content></ng-content>\n</div>\n",
                styles: [".picker-container{max-height:60vh;overflow:auto;z-index:10010;background-color:#fff!important;box-shadow:0 0 18px -1px rgba(0,0,0,.62);margin:5px 0 5px 5px}"]
            }] }
];
/** @nocollapse */
PickerContainerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PickerContainerComponent.propDecorators = {
    shown: [{ type: Input }],
    parent: [{ type: Input }],
    button: [{ type: Input }],
    adjustWidth: [{ type: Input }],
    placement: [{ type: Input }],
    padding: [{ type: Input }],
    berforeHide: [{ type: Output }],
    afterHide: [{ type: Output }],
    berforeShow: [{ type: Output }],
    afterShow: [{ type: Output }],
    picker: [{ type: ViewChild, args: ['picker',] }],
    documentEventHandler: [{ type: HostListener, args: ['document:click', ['$event'],] }, { type: HostListener, args: ['document:keyup', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    PickerContainerComponent.prototype.shown;
    /** @type {?} */
    PickerContainerComponent.prototype.parent;
    /** @type {?} */
    PickerContainerComponent.prototype.button;
    /** @type {?} */
    PickerContainerComponent.prototype.adjustWidth;
    /** @type {?} */
    PickerContainerComponent.prototype.placement;
    /** @type {?} */
    PickerContainerComponent.prototype.padding;
    /** @type {?} */
    PickerContainerComponent.prototype.berforeHide;
    /** @type {?} */
    PickerContainerComponent.prototype.afterHide;
    /** @type {?} */
    PickerContainerComponent.prototype.berforeShow;
    /** @type {?} */
    PickerContainerComponent.prototype.afterShow;
    /** @type {?} */
    PickerContainerComponent.prototype.picker;
    /**
     * @type {?}
     * @private
     */
    PickerContainerComponent.prototype._thePopper;
    /**
     * @type {?}
     * @private
     */
    PickerContainerComponent.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLWNvbnRhaW5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90YW1pbi1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9jb250YWluZXJzL3BpY2tlci1jb250YWluZXIvcGlja2VyLWNvbnRhaW5lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckksT0FBTyxRQUFxQixNQUFNLFdBQVcsQ0FBQztBQU85QyxNQUFNLE9BQU8sd0JBQXdCOzs7O0lBZW5DLFlBQW9CLGlCQUFvQztRQUFwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBVi9DLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ25CLGNBQVMsR0FBRyxZQUFZLENBQUM7UUFDekIsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNmLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUN2QyxjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUNyQyxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7UUFDdkMsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7SUFLL0MsQ0FBQzs7OztJQUVELE1BQU07UUFDSixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDYjthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2I7SUFDSCxDQUFDOzs7O0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLGlCQUFpQixD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WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIFZpZXdDaGlsZH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgUG9wcGVySnMsIHtQbGFjZW1lbnR9IGZyb20gJ3BvcHBlci5qcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RhbWluLXBpY2tlci1jb250YWluZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vcGlja2VyLWNvbnRhaW5lci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3BpY2tlci1jb250YWluZXIuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBQaWNrZXJDb250YWluZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIHNob3duOiBib29sZWFuO1xuICBASW5wdXQoKSBwYXJlbnQ6IEVsZW1lbnRSZWY7XG4gIEBJbnB1dCgpIGJ1dHRvbjogRWxlbWVudFJlZjtcbiAgQElucHV0KCkgYWRqdXN0V2lkdGggPSB0cnVlO1xuICBASW5wdXQoKSBwbGFjZW1lbnQgPSAnYm90dG9tLWVuZCc7XG4gIEBJbnB1dCgpIHBhZGRpbmcgPSAnNXB4JztcbiAgQE91dHB1dCgpIGJlcmZvcmVIaWRlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgYWZ0ZXJIaWRlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgYmVyZm9yZVNob3cgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSBhZnRlclNob3cgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBWaWV3Q2hpbGQoJ3BpY2tlcicpIHBpY2tlcjogRWxlbWVudFJlZjtcbiAgcHJpdmF0ZSBfdGhlUG9wcGVyOiBQb3BwZXJKcztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICB9XG5cbiAgdG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLnNob3duKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuICB9XG5cbiAgc2hvdygpIHtcbiAgICB0aGlzLmJlcmZvcmVTaG93LmVtaXQoKTtcbiAgICB0aGlzLnNob3duID0gdHJ1ZTtcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICBpZiAodGhpcy5hZGp1c3RXaWR0aCkge1xuICAgICAgdGhpcy5waWNrZXIubmF0aXZlRWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMucGFyZW50Lm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLSAzICsgJ3B4JztcbiAgICB9XG4gICAgaWYgKHRoaXMuX3RoZVBvcHBlcikge1xuICAgICAgdGhpcy5fdGhlUG9wcGVyID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5fdGhlUG9wcGVyID0gbmV3IFBvcHBlckpzKHRoaXMucGFyZW50Lm5hdGl2ZUVsZW1lbnQsIHRoaXMucGlja2VyLm5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgIHBsYWNlbWVudDogPFBsYWNlbWVudD50aGlzLnBsYWNlbWVudCxcbiAgICB9KTtcbiAgICB0aGlzLmFmdGVyU2hvdy5lbWl0KCk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIHRoaXMuYmVyZm9yZUhpZGUuZW1pdCgpO1xuICAgIHRoaXMuc2hvd24gPSBmYWxzZTtcbiAgICB0aGlzLmFmdGVySGlkZS5lbWl0KCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5zaG93bikge1xuICAgICAgdGhpcy5fdGhlUG9wcGVyLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6Y2xpY2snLCBbJyRldmVudCddKVxuICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDprZXl1cCcsIFsnJGV2ZW50J10pXG4gIGRvY3VtZW50RXZlbnRIYW5kbGVyKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuc2hvd24pIHtcbiAgICAgIGlmIChldmVudC5jb2RlID09PSAnVGFiJyB8fCBldmVudC5jb2RlID09PSAnRXNjYXBlJykge1xuICAgICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgICAgfVxuXG4gICAgICBsZXQgc2hvdWxkSGlkZVBpY2tlciA9ICF0aGlzLnBpY2tlci5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCk7XG4gICAgICBzaG91bGRIaWRlUGlja2VyID0gc2hvdWxkSGlkZVBpY2tlciAmJiAhdGhpcy5wYXJlbnQubmF0aXZlRWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpO1xuICAgICAgaWYgKHRoaXMuYnV0dG9uKSB7XG4gICAgICAgIHNob3VsZEhpZGVQaWNrZXIgPSBzaG91bGRIaWRlUGlja2VyICYmICF0aGlzLmJ1dHRvbi5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaG91bGRIaWRlUGlja2VyKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19