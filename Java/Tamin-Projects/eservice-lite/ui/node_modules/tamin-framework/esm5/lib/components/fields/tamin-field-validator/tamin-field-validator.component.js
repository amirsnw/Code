/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import { ControlContainer, NG_VALUE_ACCESSOR } from '@angular/forms';
var TaminFieldValidatorComponent = /** @class */ (function () {
    function TaminFieldValidatorComponent(controlContainer) {
        this.controlContainer = controlContainer;
    }
    Object.defineProperty(TaminFieldValidatorComponent.prototype, "errorMessages", {
        set: /**
         * @param {?} errorMessages
         * @return {?}
         */
        function (errorMessages) {
            // errorMessages.forEach((item) => {
            //   const temp = (<ValidationMessageModel[]>this._errorMessages).find(c => c.name === item.name);
            //   if (!temp) {
            //     this._errorMessages.push(item);
            //   } else {
            //     temp.value = item.value;
            //   }
            // });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TaminFieldValidatorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.configureErrorMessages();
        this._control = this.controlContainer.control.get(this.formControlName);
    };
    Object.defineProperty(TaminFieldValidatorComponent.prototype, "control", {
        get: /**
         * @return {?}
         */
        function () {
            return this._control;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TaminFieldValidatorComponent.prototype, "errorMessage", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this._control.valid) {
                var _loop_1 = function (propertyName) {
                    if (this_1._control.errors.hasOwnProperty(propertyName)) {
                        return { value: ((/** @type {?} */ (this_1._errorMessages))).find((/**
                             * @param {?} p
                             * @return {?}
                             */
                            function (p) { return p.name === propertyName; })).value };
                    }
                };
                var this_1 = this;
                for (var propertyName in this._control.errors) {
                    var state_1 = _loop_1(propertyName);
                    if (typeof state_1 === "object")
                        return state_1.value;
                }
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TaminFieldValidatorComponent.prototype.configureErrorMessages = /**
     * @return {?}
     */
    function () {
        this._errorMessages = [
            { name: 'required', value: 'مقدار فیلد الزامی می باشد' },
            { name: 'pattern', value: 'الگوی مقدار صحیح نمی باشد' },
            { name: 'email', value: 'ایمیل نادرست است' },
            { name: 'minlength', value: 'مقدار فیلد از حد مجاز کمتر است' },
            { name: 'maxlength', value: 'مقدار فیلد از حد مجاز بیشتر است' },
            { name: 'min', value: 'حداقل مقدار رعایت نشده است' },
            { name: 'max', value: 'حداکثر مقدار رعایت نشده است' },
            { name: 'requiredTrue', value: '' },
            { name: 'nullValidator', value: '' },
            { name: 'compose', value: '' },
            { name: 'composeAsync', value: '' },
            { name: 'requiredNumber', value: 'مقدار فیلد الزامی می باشد' },
            { name: 'persianDate', value: 'تاریخ نادرست است' },
            { name: 'nationalId', value: 'کد ملی نادرست است' }
        ];
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TaminFieldValidatorComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TaminFieldValidatorComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    TaminFieldValidatorComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    TaminFieldValidatorComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
    };
    TaminFieldValidatorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-field-validator',
                    template: "<span *ngIf=\"control?.touched && !control?.valid\" class=\"tamin-form-control-error\">\n  <span style=\"color: #b00020;\">{{errorMessage}}</span>\n</span>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return TaminFieldValidatorComponent; })),
                            multi: true
                        }
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    TaminFieldValidatorComponent.ctorParameters = function () { return [
        { type: ControlContainer }
    ]; };
    TaminFieldValidatorComponent.propDecorators = {
        formControlName: [{ type: Input }],
        errorMessages: [{ type: Input }]
    };
    return TaminFieldValidatorComponent;
}());
export { TaminFieldValidatorComponent };
if (false) {
    /** @type {?} */
    TaminFieldValidatorComponent.prototype._errorMessages;
    /** @type {?} */
    TaminFieldValidatorComponent.prototype.formControlName;
    /** @type {?} */
    TaminFieldValidatorComponent.prototype._control;
    /**
     * @type {?}
     * @private
     */
    TaminFieldValidatorComponent.prototype.controlContainer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tZmllbGQtdmFsaWRhdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RhbWluLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2ZpZWxkcy90YW1pbi1maWVsZC12YWxpZGF0b3IvdGFtaW4tZmllbGQtdmFsaWRhdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBa0IsZ0JBQWdCLEVBQXdCLGlCQUFpQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFHMUc7SUErQkUsc0NBQW9CLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQ3RELENBQUM7SUFmRCxzQkFBYSx1REFBYTs7Ozs7UUFBMUIsVUFBMkIsYUFBa0Q7WUFFM0Usb0NBQW9DO1lBQ3BDLGtHQUFrRztZQUNsRyxpQkFBaUI7WUFDakIsc0NBQXNDO1lBQ3RDLGFBQWE7WUFDYiwrQkFBK0I7WUFDL0IsTUFBTTtZQUNOLE1BQU07UUFDUixDQUFDOzs7T0FBQTs7OztJQU9ELCtDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQzlCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxzQkFBSSxpREFBTzs7OztRQUFYO1lBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3ZCLENBQUM7OztPQUFBO0lBR0Qsc0JBQUksc0RBQVk7Ozs7UUFBaEI7WUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUU7d0NBQ2IsWUFBWTtvQkFDckIsSUFBSSxPQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxFQUFFO3dDQUM5QyxDQUFDLG1CQUEwQixPQUFLLGNBQWMsRUFBQSxDQUFDLENBQUMsSUFBSTs7Ozs0QkFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssWUFBWSxFQUF2QixDQUF1QixFQUFDLENBQUMsS0FBSztxQkFDaEc7Z0JBQ0gsQ0FBQzs7Z0JBSkQsS0FBSyxJQUFNLFlBQVksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU07MENBQXBDLFlBQVk7OztpQkFJdEI7YUFDRjtZQUNELE9BQU8sRUFBRSxDQUFDO1FBQ1osQ0FBQzs7O09BQUE7Ozs7SUFFRCw2REFBc0I7OztJQUF0QjtRQUNFLElBQUksQ0FBQyxjQUFjLEdBQUc7WUFDcEIsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSwyQkFBMkIsRUFBQztZQUN0RCxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLDJCQUEyQixFQUFDO1lBQ3JELEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUM7WUFDMUMsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxnQ0FBZ0MsRUFBQztZQUM1RCxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLGlDQUFpQyxFQUFDO1lBQzdELEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsNEJBQTRCLEVBQUM7WUFDbEQsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSw2QkFBNkIsRUFBQztZQUNuRCxFQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBQztZQUNqQyxFQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBQztZQUNsQyxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBQztZQUM1QixFQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBQztZQUNqQyxFQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsMkJBQTJCLEVBQUM7WUFDNUQsRUFBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBQztZQUNoRCxFQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLG1CQUFtQixFQUFDO1NBQ2pELENBQUM7SUFDSixDQUFDOzs7OztJQUdELHVEQUFnQjs7OztJQUFoQixVQUFpQixFQUFPO0lBQ3hCLENBQUM7Ozs7O0lBRUQsd0RBQWlCOzs7O0lBQWpCLFVBQWtCLEVBQU87SUFDekIsQ0FBQzs7Ozs7SUFFRCx1REFBZ0I7Ozs7SUFBaEIsVUFBaUIsVUFBbUI7SUFDcEMsQ0FBQzs7Ozs7SUFFRCxpREFBVTs7OztJQUFWLFVBQVcsR0FBUTtJQUNuQixDQUFDOztnQkFyRkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLHlLQUFxRDtvQkFFckQsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxVQUFVOzs7NEJBQUMsY0FBTSxPQUFBLDRCQUE0QixFQUE1QixDQUE0QixFQUFDOzRCQUMzRCxLQUFLLEVBQUUsSUFBSTt5QkFDWjtxQkFDRjs7aUJBRUY7Ozs7Z0JBZndCLGdCQUFnQjs7O2tDQWtCdEMsS0FBSztnQ0FFTCxLQUFLOztJQXFFUixtQ0FBQztDQUFBLEFBdEZELElBc0ZDO1NBekVZLDRCQUE0Qjs7O0lBQ3ZDLHNEQUFvRDs7SUFDcEQsdURBQWlDOztJQWNqQyxnREFBMEI7Ozs7O0lBRWQsd0RBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBYnN0cmFjdENvbnRyb2wsIENvbnRyb2xDb250YWluZXIsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtWYWxpZGF0aW9uTWVzc2FnZU1vZGVsfSBmcm9tICcuLi8uLi8uLi9tb2RlbHMvdmFsaWRhdGlvbi1tZXNzYWdlLW1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGFtaW4tZmllbGQtdmFsaWRhdG9yJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RhbWluLWZpZWxkLXZhbGlkYXRvci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RhbWluLWZpZWxkLXZhbGlkYXRvci5jb21wb25lbnQuc2NzcyddLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRhbWluRmllbGRWYWxpZGF0b3JDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cblxufSlcbmV4cG9ydCBjbGFzcyBUYW1pbkZpZWxkVmFsaWRhdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIF9lcnJvck1lc3NhZ2VzOiBWYWxpZGF0aW9uTWVzc2FnZU1vZGVsW10gfCBvYmplY3RbXTtcbiAgQElucHV0KCkgZm9ybUNvbnRyb2xOYW1lOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgc2V0IGVycm9yTWVzc2FnZXMoZXJyb3JNZXNzYWdlczogVmFsaWRhdGlvbk1lc3NhZ2VNb2RlbFtdIHwgb2JqZWN0W10pIHtcblxuICAgIC8vIGVycm9yTWVzc2FnZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIC8vICAgY29uc3QgdGVtcCA9ICg8VmFsaWRhdGlvbk1lc3NhZ2VNb2RlbFtdPnRoaXMuX2Vycm9yTWVzc2FnZXMpLmZpbmQoYyA9PiBjLm5hbWUgPT09IGl0ZW0ubmFtZSk7XG4gICAgLy8gICBpZiAoIXRlbXApIHtcbiAgICAvLyAgICAgdGhpcy5fZXJyb3JNZXNzYWdlcy5wdXNoKGl0ZW0pO1xuICAgIC8vICAgfSBlbHNlIHtcbiAgICAvLyAgICAgdGVtcC52YWx1ZSA9IGl0ZW0udmFsdWU7XG4gICAgLy8gICB9XG4gICAgLy8gfSk7XG4gIH1cblxuICBfY29udHJvbDogQWJzdHJhY3RDb250cm9sO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udHJvbENvbnRhaW5lcjogQ29udHJvbENvbnRhaW5lcikge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jb25maWd1cmVFcnJvck1lc3NhZ2VzKCk7XG4gICAgdGhpcy5fY29udHJvbCA9IHRoaXMuY29udHJvbENvbnRhaW5lci5jb250cm9sLmdldCh0aGlzLmZvcm1Db250cm9sTmFtZSk7XG4gIH1cblxuICBnZXQgY29udHJvbCgpOiBBYnN0cmFjdENvbnRyb2wge1xuICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xuICB9XG5cblxuICBnZXQgZXJyb3JNZXNzYWdlKCk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLl9jb250cm9sLnZhbGlkKSB7XG4gICAgICBmb3IgKGNvbnN0IHByb3BlcnR5TmFtZSBpbiB0aGlzLl9jb250cm9sLmVycm9ycykge1xuICAgICAgICBpZiAodGhpcy5fY29udHJvbC5lcnJvcnMuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiAoPFZhbGlkYXRpb25NZXNzYWdlTW9kZWxbXT50aGlzLl9lcnJvck1lc3NhZ2VzKS5maW5kKHAgPT4gcC5uYW1lID09PSBwcm9wZXJ0eU5hbWUpLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGNvbmZpZ3VyZUVycm9yTWVzc2FnZXMoKSB7XG4gICAgdGhpcy5fZXJyb3JNZXNzYWdlcyA9IFtcbiAgICAgIHtuYW1lOiAncmVxdWlyZWQnLCB2YWx1ZTogJ9mF2YLYr9in2LEg2YHbjNmE2K8g2KfZhNiy2KfZhduMINmF24wg2KjYp9i02K8nfSxcbiAgICAgIHtuYW1lOiAncGF0dGVybicsIHZhbHVlOiAn2KfZhNqv2YjbjCDZhdmC2K/Yp9ixINi12K3bjNitINmG2YXbjCDYqNin2LTYryd9LFxuICAgICAge25hbWU6ICdlbWFpbCcsIHZhbHVlOiAn2KfbjNmF24zZhCDZhtin2K/Ysdiz2Kog2KfYs9iqJ30sXG4gICAgICB7bmFtZTogJ21pbmxlbmd0aCcsIHZhbHVlOiAn2YXZgtiv2KfYsSDZgduM2YTYryDYp9iyINit2K8g2YXYrNin2LIg2qnZhdiq2LEg2KfYs9iqJ30sXG4gICAgICB7bmFtZTogJ21heGxlbmd0aCcsIHZhbHVlOiAn2YXZgtiv2KfYsSDZgduM2YTYryDYp9iyINit2K8g2YXYrNin2LIg2KjbjNi02KrYsSDYp9iz2KonfSxcbiAgICAgIHtuYW1lOiAnbWluJywgdmFsdWU6ICfYrdiv2KfZgtmEINmF2YLYr9in2LEg2LHYudin24zYqiDZhti02K/ZhyDYp9iz2KonfSxcbiAgICAgIHtuYW1lOiAnbWF4JywgdmFsdWU6ICfYrdiv2Kfaqdir2LEg2YXZgtiv2KfYsSDYsdi52KfbjNiqINmG2LTYr9mHINin2LPYqid9LFxuICAgICAge25hbWU6ICdyZXF1aXJlZFRydWUnLCB2YWx1ZTogJyd9LFxuICAgICAge25hbWU6ICdudWxsVmFsaWRhdG9yJywgdmFsdWU6ICcnfSxcbiAgICAgIHtuYW1lOiAnY29tcG9zZScsIHZhbHVlOiAnJ30sXG4gICAgICB7bmFtZTogJ2NvbXBvc2VBc3luYycsIHZhbHVlOiAnJ30sXG4gICAgICB7bmFtZTogJ3JlcXVpcmVkTnVtYmVyJywgdmFsdWU6ICfZhdmC2K/Yp9ixINmB24zZhNivINin2YTYstin2YXbjCDZhduMINio2KfYtNivJ30sXG4gICAgICB7bmFtZTogJ3BlcnNpYW5EYXRlJywgdmFsdWU6ICfYqtin2LHbjNiuINmG2KfYr9ix2LPYqiDYp9iz2KonfSxcbiAgICAgIHtuYW1lOiAnbmF0aW9uYWxJZCcsIHZhbHVlOiAn2qnYryDZhdmE24wg2YbYp9iv2LHYs9iqINin2LPYqid9XG4gICAgXTtcbiAgfVxuXG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7XG4gIH1cblxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgfVxuXG4gIHdyaXRlVmFsdWUob2JqOiBhbnkpOiB2b2lkIHtcbiAgfVxufVxuIl19