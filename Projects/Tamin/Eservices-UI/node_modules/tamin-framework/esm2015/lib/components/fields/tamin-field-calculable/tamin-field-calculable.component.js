/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';
import { FieldBaseComponent } from '../../../base/field-base.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class TaminFieldCalculableComponent extends FieldBaseComponent {
    constructor() {
        super(...arguments);
        this.min = Number.MIN_SAFE_INTEGER;
        this.max = Number.MAX_SAFE_INTEGER;
        this.negativeNumberColor = 'red';
        this.calculate = new EventEmitter();
    }
    /**
     * @return {?}
     */
    initializeComponent() {
        /** @type {?} */
        const me = this;
        this.maskRef = new IMask(this.inputElement.nativeElement, {
            mask: Number,
            thousandsSeparator: ',',
            min: me.min,
            max: me.max
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        /** @type {?} */
        const theValue = value == null ? '' : value;
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.maskRef) {
                this.maskRef.value = value.toString();
            }
            else {
                this.inputElement.nativeElement.value = value.toString();
            }
        }));
        this.onChange(value);
    }
    /**
     * @return {?}
     */
    onCalculate() {
        this.calculate.emit();
    }
}
TaminFieldCalculableComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-tamin-field-calculable',
                template: "<div class=\"input-wrapper\">\n<input\n  type=\"text\"\n  [disabled] = \"control.disabled\"\n  [attr.placeholder]=\"placeHolder\"\n  style=\"direction: ltr; padding-left: 35px;\"\n  class=\"tamin-form-control-input\"\n  [class.tamin-form-control-valid]=\"control.touched && control.valid\"\n  [class.tamin-form-control-invalid]=\"control.touched && !control.valid\"\n  [style.color]=\"inputElement?.nativeElement?.value < 0 ? negativeNumberColor : ''\"\n  #inputElement>\n<span class=\"icon\" #icon>\n    <i\n      class=\"icon-calc\"\n      style=\"font-size: 1.5em\"\n      (click)=\"onCalculate()\"\n      [class.tamin-form-control-valid-icon]=\"control.touched && control.valid\"\n      [class.tamin-form-control-invalid-icon]=\"control.touched && !control.valid\"\n      #iconElement></i>\n  </span>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TaminFieldCalculableComponent)),
                        multi: true
                    }
                ],
                styles: [".input-wrapper{position:relative}.icon{position:absolute;top:23%;left:5px;height:10px;margin-top:-5px;cursor:pointer}.item{padding:5px;cursor:pointer}.item:hover{background-color:silver}"]
            }] }
];
TaminFieldCalculableComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    negativeNumberColor: [{ type: Input }],
    calculate: [{ type: Output, args: ['calculate',] }]
};
if (false) {
    /** @type {?} */
    TaminFieldCalculableComponent.prototype.min;
    /** @type {?} */
    TaminFieldCalculableComponent.prototype.max;
    /** @type {?} */
    TaminFieldCalculableComponent.prototype.negativeNumberColor;
    /** @type {?} */
    TaminFieldCalculableComponent.prototype.calculate;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tZmllbGQtY2FsY3VsYWJsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90YW1pbi1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9maWVsZHMvdGFtaW4tZmllbGQtY2FsY3VsYWJsZS90YW1pbi1maWVsZC1jYWxjdWxhYmxlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekYsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sb0NBQW9DLENBQUM7QUFDdEUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFnQmpELE1BQU0sT0FBTyw2QkFBOEIsU0FBUSxrQkFBa0I7SUFackU7O1FBY1csUUFBRyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUM5QixRQUFHLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1FBQzlCLHdCQUFtQixHQUFHLEtBQUssQ0FBQztRQUNoQixjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQTZCdEQsQ0FBQzs7OztJQTNCQyxtQkFBbUI7O2NBQ1gsRUFBRSxHQUFHLElBQUk7UUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFO1lBQ3hELElBQUksRUFBRSxNQUFNO1lBQ1osa0JBQWtCLEVBQUUsR0FBRztZQUN2QixHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUc7WUFDWCxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUc7U0FDWixDQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxLQUFVOztjQUNiLFFBQVEsR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUs7UUFDM0MsVUFBVTs7O1FBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDdkM7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUMxRDtRQUNILENBQUMsRUFBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDOzs7O0lBR0QsV0FBVztRQUNULElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7O1lBN0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsOEJBQThCO2dCQUN4QywwekJBQXNEO2dCQUV0RCxTQUFTLEVBQUU7b0JBQ1Q7d0JBQ0UsT0FBTyxFQUFFLGlCQUFpQjt3QkFDMUIsV0FBVyxFQUFFLFVBQVU7Ozt3QkFBQyxHQUFHLEVBQUUsQ0FBQyw2QkFBNkIsRUFBQzt3QkFDNUQsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQ0Y7O2FBQ0Y7OztrQkFHRSxLQUFLO2tCQUNMLEtBQUs7a0NBQ0wsS0FBSzt3QkFDTCxNQUFNLFNBQUMsV0FBVzs7OztJQUhuQiw0Q0FBdUM7O0lBQ3ZDLDRDQUF1Qzs7SUFDdkMsNERBQXFDOztJQUNyQyxrREFBb0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBmb3J3YXJkUmVmLCBJbnB1dCwgT25Jbml0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtGaWVsZEJhc2VDb21wb25lbnR9IGZyb20gJy4uLy4uLy4uL2Jhc2UvZmllbGQtYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHtOR19WQUxVRV9BQ0NFU1NPUn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5kZWNsYXJlIGxldCBJTWFzazogYW55O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0YW1pbi10YW1pbi1maWVsZC1jYWxjdWxhYmxlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RhbWluLWZpZWxkLWNhbGN1bGFibGUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90YW1pbi1maWVsZC1jYWxjdWxhYmxlLmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGFtaW5GaWVsZENhbGN1bGFibGVDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgVGFtaW5GaWVsZENhbGN1bGFibGVDb21wb25lbnQgZXh0ZW5kcyBGaWVsZEJhc2VDb21wb25lbnQge1xuXG4gIEBJbnB1dCgpIG1pbiA9IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSO1xuICBASW5wdXQoKSBtYXggPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgQElucHV0KCkgbmVnYXRpdmVOdW1iZXJDb2xvciA9ICdyZWQnO1xuICBAT3V0cHV0KCdjYWxjdWxhdGUnKSBjYWxjdWxhdGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgaW5pdGlhbGl6ZUNvbXBvbmVudCgpIHtcbiAgICBjb25zdCBtZSA9IHRoaXM7XG4gICAgdGhpcy5tYXNrUmVmID0gbmV3IElNYXNrKHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgIG1hc2s6IE51bWJlcixcbiAgICAgIHRob3VzYW5kc1NlcGFyYXRvcjogJywnLFxuICAgICAgbWluOiBtZS5taW4sXG4gICAgICBtYXg6IG1lLm1heFxuICAgIH0pO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgY29uc3QgdGhlVmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLm1hc2tSZWYpIHtcbiAgICAgICAgdGhpcy5tYXNrUmVmLnZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5vbkNoYW5nZSh2YWx1ZSk7XG4gIH1cblxuXG4gIG9uQ2FsY3VsYXRlKCkge1xuICAgIHRoaXMuY2FsY3VsYXRlLmVtaXQoKTtcbiAgfVxufVxuIl19