/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import { TaminLazyLoadService } from '../../../services/tamin-lazy-load/tamin-lazy-load.service';
import { Subscription } from 'rxjs';
import { DomSanitizer } from '@angular/platform-browser';
var PdfViewerComponent = /** @class */ (function () {
    function PdfViewerComponent(taminLazyLoadService, domSanitizer) {
        this.taminLazyLoadService = taminLazyLoadService;
        this.domSanitizer = domSanitizer;
        this.baseUrl = 'assets/pdfjs/viewer.html';
        // viewerUrl: any;
        this.subscription = new Subscription();
    }
    /**
     * @return {?}
     */
    PdfViewerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    PdfViewerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} b64Data
     * @param {?} contentType
     * @param {?=} sliceSize
     * @return {?}
     */
    PdfViewerComponent.prototype.based64toBlob = /**
     * @param {?} b64Data
     * @param {?} contentType
     * @param {?=} sliceSize
     * @return {?}
     */
    function (b64Data, contentType, sliceSize) {
        if (sliceSize === void 0) { sliceSize = 512; }
        contentType = contentType || '';
        sliceSize = sliceSize || 512;
        /** @type {?} */
        var byteCharacters = atob(b64Data);
        /** @type {?} */
        var byteArrays = [];
        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            /** @type {?} */
            var slice = byteCharacters.slice(offset, offset + sliceSize);
            /** @type {?} */
            var byteNumbers = new Array(slice.length);
            for (var i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }
            /** @type {?} */
            var byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }
        return new Blob(byteArrays, { type: contentType });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PdfViewerComponent.prototype.openBased64 = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var tmp = URL.createObjectURL(this.based64toBlob(data, 'application/pdf'));
        this.open(tmp);
    };
    /**
     * @param {?} url
     * @return {?}
     */
    PdfViewerComponent.prototype.open = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.iframe.nativeElement.src = this.baseUrl + "?file=" + url;
    };
    PdfViewerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-pdf-viewer2',
                    template: "<iframe frameborder=\"0\" [ngStyle]=\"{'width':width, 'height':height}\" #iframe>\n</iframe>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PdfViewerComponent.ctorParameters = function () { return [
        { type: TaminLazyLoadService },
        { type: DomSanitizer }
    ]; };
    PdfViewerComponent.propDecorators = {
        iframe: [{ type: ViewChild, args: ['iframe',] }],
        width: [{ type: Input }],
        height: [{ type: Input }]
    };
    return PdfViewerComponent;
}());
export { PdfViewerComponent };
if (false) {
    /** @type {?} */
    PdfViewerComponent.prototype.iframe;
    /** @type {?} */
    PdfViewerComponent.prototype.width;
    /** @type {?} */
    PdfViewerComponent.prototype.height;
    /**
     * @type {?}
     * @private
     */
    PdfViewerComponent.prototype.baseUrl;
    /**
     * @type {?}
     * @private
     */
    PdfViewerComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    PdfViewerComponent.prototype.taminLazyLoadService;
    /**
     * @type {?}
     * @private
     */
    PdfViewerComponent.prototype.domSanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRmLXZpZXdlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90YW1pbi1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YW1pbi1kb2N1bWVudC12aWV3ZXIvcGRmLXZpZXdlci9wZGYtdmlld2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFxQixTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekYsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sMkRBQTJELENBQUM7QUFDL0YsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFJdkQ7SUFpQkUsNEJBQW9CLG9CQUEwQyxFQUFVLFlBQTBCO1FBQTlFLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUwxRixZQUFPLEdBQUcsMEJBQTBCLENBQUM7O1FBR3JDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUkxQyxDQUFDOzs7O0lBRUQsd0NBQVc7OztJQUFYO0lBQ0EsQ0FBQzs7OztJQUVELHFDQUFROzs7SUFBUjtJQUNBLENBQUM7Ozs7Ozs7SUFHRCwwQ0FBYTs7Ozs7O0lBQWIsVUFBYyxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQWU7UUFBZiwwQkFBQSxFQUFBLGVBQWU7UUFDakQsV0FBVyxHQUFHLFdBQVcsSUFBSSxFQUFFLENBQUM7UUFDaEMsU0FBUyxHQUFHLFNBQVMsSUFBSSxHQUFHLENBQUM7O1lBQ3ZCLGNBQWMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDOztZQUM5QixVQUFVLEdBQUcsRUFBRTtRQUNyQixLQUFLLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsY0FBYyxDQUFDLE1BQU0sRUFBRSxNQUFNLElBQUksU0FBUyxFQUFFOztnQkFDbEUsS0FBSyxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sR0FBRyxTQUFTLENBQUM7O2dCQUN4RCxXQUFXLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztZQUMzQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDckMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdEM7O2dCQUNLLFNBQVMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUM7WUFDN0MsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUM1QjtRQUNELE9BQU8sSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7Ozs7SUFFRCx3Q0FBVzs7OztJQUFYLFVBQVksSUFBSTs7WUFDUixHQUFHLEdBQUcsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzVFLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakIsQ0FBQzs7Ozs7SUFFRCxpQ0FBSTs7OztJQUFKLFVBQUssR0FBVztRQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsR0FBTSxJQUFJLENBQUMsT0FBTyxjQUFTLEdBQUssQ0FBQztJQUNoRSxDQUFDOztnQkFwREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLDBHQUEwQzs7aUJBRTNDOzs7O2dCQVZPLG9CQUFvQjtnQkFFcEIsWUFBWTs7O3lCQVdqQixTQUFTLFNBQUMsUUFBUTt3QkFFbEIsS0FBSzt5QkFDTCxLQUFLOztJQTJDUix5QkFBQztDQUFBLEFBckRELElBcURDO1NBaERZLGtCQUFrQjs7O0lBRTdCLG9DQUF3Qzs7SUFFeEMsbUNBQXVCOztJQUN2QixvQ0FBd0I7Ozs7O0lBRXhCLHFDQUE2Qzs7Ozs7SUFHN0MsMENBQTBDOzs7OztJQUU5QixrREFBa0Q7Ozs7O0lBQUUsMENBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VGFtaW5MYXp5TG9hZFNlcnZpY2V9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3RhbWluLWxhenktbG9hZC90YW1pbi1sYXp5LWxvYWQuc2VydmljZSc7XG5pbXBvcnQge1N1YnNjcmlwdGlvbn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0RvbVNhbml0aXplcn0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmRlY2xhcmUgbGV0IFBERlZpZXdlckFwcGxpY2F0aW9uOiBhbnk7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RhbWluLXBkZi12aWV3ZXIyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BkZi12aWV3ZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9wZGYtdmlld2VyLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgUGRmVmlld2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBWaWV3Q2hpbGQoJ2lmcmFtZScpIGlmcmFtZTogRWxlbWVudFJlZjtcblxuICBASW5wdXQoKSB3aWR0aDogc3RyaW5nO1xuICBASW5wdXQoKSBoZWlnaHQ6IHN0cmluZztcblxuICBwcml2YXRlIGJhc2VVcmwgPSAnYXNzZXRzL3BkZmpzL3ZpZXdlci5odG1sJztcbiAgLy8gdmlld2VyVXJsOiBhbnk7XG5cbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0YW1pbkxhenlMb2FkU2VydmljZTogVGFtaW5MYXp5TG9hZFNlcnZpY2UsIHByaXZhdGUgZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHtcblxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgfVxuXG5cbiAgYmFzZWQ2NHRvQmxvYihiNjREYXRhLCBjb250ZW50VHlwZSwgc2xpY2VTaXplID0gNTEyKSB7XG4gICAgY29udGVudFR5cGUgPSBjb250ZW50VHlwZSB8fCAnJztcbiAgICBzbGljZVNpemUgPSBzbGljZVNpemUgfHwgNTEyO1xuICAgIGNvbnN0IGJ5dGVDaGFyYWN0ZXJzID0gYXRvYihiNjREYXRhKTtcbiAgICBjb25zdCBieXRlQXJyYXlzID0gW107XG4gICAgZm9yIChsZXQgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgYnl0ZUNoYXJhY3RlcnMubGVuZ3RoOyBvZmZzZXQgKz0gc2xpY2VTaXplKSB7XG4gICAgICBjb25zdCBzbGljZSA9IGJ5dGVDaGFyYWN0ZXJzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgc2xpY2VTaXplKTtcbiAgICAgIGNvbnN0IGJ5dGVOdW1iZXJzID0gbmV3IEFycmF5KHNsaWNlLmxlbmd0aCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJ5dGVOdW1iZXJzW2ldID0gc2xpY2UuY2hhckNvZGVBdChpKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGJ5dGVBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ5dGVOdW1iZXJzKTtcbiAgICAgIGJ5dGVBcnJheXMucHVzaChieXRlQXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEJsb2IoYnl0ZUFycmF5cywge3R5cGU6IGNvbnRlbnRUeXBlfSk7XG4gIH1cblxuICBvcGVuQmFzZWQ2NChkYXRhKSB7XG4gICAgY29uc3QgdG1wID0gVVJMLmNyZWF0ZU9iamVjdFVSTCh0aGlzLmJhc2VkNjR0b0Jsb2IoZGF0YSwgJ2FwcGxpY2F0aW9uL3BkZicpKTtcbiAgICB0aGlzLm9wZW4odG1wKTtcbiAgfVxuXG4gIG9wZW4odXJsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmlmcmFtZS5uYXRpdmVFbGVtZW50LnNyYyA9IGAke3RoaXMuYmFzZVVybH0/ZmlsZT0ke3VybH1gO1xuICB9XG59XG4iXX0=