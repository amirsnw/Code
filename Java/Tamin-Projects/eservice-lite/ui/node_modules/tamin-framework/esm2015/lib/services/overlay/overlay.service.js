/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class OverlayService {
    constructor() {
    }
    /**
     * @param {?=} element
     * @return {?}
     */
    show(element = null) {
        /** @type {?} */
        const overlay = new PlainOverlay(element, { blur: 1, style: { zIndex: 9000 } });
        return overlay.show();
    }
    /**
     * @param {?} message
     * @param {?=} element
     * @return {?}
     */
    showMessage(message, element = null) {
        /** @type {?} */
        const html = '<div></div><div class="tamin-loader-loader4"></div>' + '<hr>' + message;
        /** @type {?} */
        const messageElement = document.createElement('div');
        messageElement.classList.add('overlay-message');
        // messageElement.classList.add('tamin-loader-loader3');
        messageElement.innerHTML = html;
        /** @type {?} */
        const overlay = new PlainOverlay(element, { blur: 1, face: messageElement });
        return overlay.show();
    }
    /**
     * @param {?} overlay
     * @return {?}
     */
    isShown(overlay) {
        return (overlay && (overlay.state === PlainOverlay.STATE_SHOWING || overlay.state === PlainOverlay.STATE_SHOWN));
    }
    /**
     * @param {?} overlay
     * @return {?}
     */
    hide(overlay) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            overlay.hide();
        }), 0);
    }
}
OverlayService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
OverlayService.ctorParameters = () => [];
/** @nocollapse */ OverlayService.ngInjectableDef = i0.defineInjectable({ factory: function OverlayService_Factory() { return new OverlayService(); }, token: OverlayService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdGFtaW4tZnJhbWV3b3JrLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL292ZXJsYXkvb3ZlcmxheS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDOztBQU96QyxNQUFNLE9BQU8sY0FBYztJQUV6QjtJQUNBLENBQUM7Ozs7O0lBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJOztjQUNYLE9BQU8sR0FBRyxJQUFJLFlBQVksQ0FBQyxPQUFPLEVBQUUsRUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUMsRUFBQyxDQUFDO1FBQzNFLE9BQU8sT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7Ozs7OztJQUVELFdBQVcsQ0FBQyxPQUFlLEVBQUUsT0FBTyxHQUFHLElBQUk7O2NBQ25DLElBQUksR0FBRyxxREFBcUQsR0FBRyxNQUFNLEdBQUcsT0FBTzs7Y0FDL0UsY0FBYyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO1FBQ3BELGNBQWMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDaEQsd0RBQXdEO1FBQ3hELGNBQWMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDOztjQUMxQixPQUFPLEdBQUcsSUFBSSxZQUFZLENBQUMsT0FBTyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFDLENBQUM7UUFDMUUsT0FBTyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFFRCxPQUFPLENBQUMsT0FBTztRQUNiLE9BQU8sQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxLQUFLLFlBQVksQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLEtBQUssS0FBSyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUNuSCxDQUFDOzs7OztJQUdELElBQUksQ0FBQyxPQUFPO1FBQ1YsVUFBVTs7O1FBQUMsR0FBRyxFQUFFO1lBQ2QsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2pCLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7OztZQWhDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5kZWNsYXJlIGxldCBQbGFpbk92ZXJsYXk6IGFueTtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgT3ZlcmxheVNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgc2hvdyhlbGVtZW50ID0gbnVsbCkge1xuICAgIGNvbnN0IG92ZXJsYXkgPSBuZXcgUGxhaW5PdmVybGF5KGVsZW1lbnQsIHtibHVyOiAxLCBzdHlsZToge3pJbmRleDogOTAwMH19KTtcbiAgICByZXR1cm4gb3ZlcmxheS5zaG93KCk7XG4gIH1cblxuICBzaG93TWVzc2FnZShtZXNzYWdlOiBzdHJpbmcsIGVsZW1lbnQgPSBudWxsKSB7XG4gICAgY29uc3QgaHRtbCA9ICc8ZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJ0YW1pbi1sb2FkZXItbG9hZGVyNFwiPjwvZGl2PicgKyAnPGhyPicgKyBtZXNzYWdlO1xuICAgIGNvbnN0IG1lc3NhZ2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbWVzc2FnZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnb3ZlcmxheS1tZXNzYWdlJyk7XG4gICAgLy8gbWVzc2FnZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndGFtaW4tbG9hZGVyLWxvYWRlcjMnKTtcbiAgICBtZXNzYWdlRWxlbWVudC5pbm5lckhUTUwgPSBodG1sO1xuICAgIGNvbnN0IG92ZXJsYXkgPSBuZXcgUGxhaW5PdmVybGF5KGVsZW1lbnQsIHtibHVyOiAxLCBmYWNlOiBtZXNzYWdlRWxlbWVudH0pO1xuICAgIHJldHVybiBvdmVybGF5LnNob3coKTtcbiAgfVxuXG4gIGlzU2hvd24ob3ZlcmxheSkge1xuICAgIHJldHVybiAob3ZlcmxheSAmJiAob3ZlcmxheS5zdGF0ZSA9PT0gUGxhaW5PdmVybGF5LlNUQVRFX1NIT1dJTkcgfHwgb3ZlcmxheS5zdGF0ZSA9PT0gUGxhaW5PdmVybGF5LlNUQVRFX1NIT1dOKSk7XG4gIH1cblxuXG4gIGhpZGUob3ZlcmxheSkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgb3ZlcmxheS5oaWRlKCk7XG4gICAgfSwgMCk7XG4gIH1cbn1cbiJdfQ==