/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { TaminLazyLoadService } from '../../services/tamin-lazy-load/tamin-lazy-load.service';
import { HostListener } from '@angular/core';
export class TaminChartComponent {
    /**
     * @param {?} taminLazyLoadService
     */
    constructor(taminLazyLoadService) {
        this.taminLazyLoadService = taminLazyLoadService;
        this.defaultColors = [
            [255, 99, 132],
            [54, 162, 235],
            [255, 206, 86],
            [231, 233, 237],
            [75, 192, 192],
            [151, 187, 205],
            [220, 220, 220],
            [247, 70, 74],
            [70, 191, 189],
            [253, 180, 92],
            [148, 159, 177],
            [77, 83, 96]
        ];
        this.labels = [];
        this.options = {};
        this.chartClick = new EventEmitter();
        this.chartHover = new EventEmitter();
        this.initFlag = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ctx = this.element.nativeElement.getContext('2d');
        this.cvs = this.element.nativeElement;
        this.initFlag = true;
        this.taminLazyLoadService.loadJs(this.lib).toPromise().then((/**
         * @return {?}
         */
        () => {
            if (this.data || this.datasets) {
                this.refresh();
            }
        })).catch((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            //console.error(error);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.initFlag) {
            // Check if the changes are in the data or datasets
            if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {
                if (changes['data']) {
                    this.updateChartData(changes['data'].currentValue);
                }
                else {
                    this.updateChartData(changes['datasets'].currentValue);
                }
                this.chart.update();
            }
            else {
                // otherwise rebuild the chart
                this.refresh();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.chart) {
            this.chart.destroy();
            this.chart = void 0;
        }
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    getChartBuilder(ctx /*, data:Array<any>, options:any*/) {
        /** @type {?} */
        const datasets = this.getDatasets();
        /** @type {?} */
        const options = Object.assign({}, this.options);
        if (this.legend === false) {
            options.legend = { display: false };
        }
        // hock for onHover and onClick events
        options.hover = options.hover || {};
        if (!options.hover.onHover) {
            options.hover.onHover = (/**
             * @param {?} active
             * @return {?}
             */
            (active) => {
                if (active && !active.length) {
                    return;
                }
                this.chartHover.emit({ active });
            });
        }
        if (!options.onClick) {
            options.onClick = (/**
             * @param {?} event
             * @param {?} active
             * @return {?}
             */
            (event, active) => {
                this.chartClick.emit({ event, active });
            });
        }
        /** @type {?} */
        const opts = {
            type: this.chartType,
            data: {
                labels: this.labels,
                datasets: datasets
            },
            options: options
        };
        return new Chart(ctx, opts);
    }
    /**
     * @private
     * @param {?} newDataValues
     * @return {?}
     */
    updateChartData(newDataValues) {
        if (Array.isArray(newDataValues[0].data)) {
            this.chart.data.datasets.forEach((/**
             * @param {?} dataset
             * @param {?} i
             * @return {?}
             */
            (dataset, i) => {
                dataset.data = newDataValues[i].data;
                if (newDataValues[i].label) {
                    dataset.label = newDataValues[i].label;
                }
            }));
        }
        else {
            this.chart.data.datasets[0].data = newDataValues;
        }
    }
    /**
     * @private
     * @return {?}
     */
    getDatasets() {
        /** @type {?} */
        let datasets = void 0;
        // in case if datasets is not provided, but data is present
        if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {
            if (Array.isArray(this.data[0])) {
                datasets = ((/** @type {?} */ (this.data))).map((/**
                 * @param {?} data
                 * @param {?} index
                 * @return {?}
                 */
                (data, index) => {
                    return { data, label: this.labels[index] || `Label ${index}` };
                }));
            }
            else {
                datasets = [{ data: this.data, label: `Label 0` }];
            }
        }
        if (this.datasets && this.datasets.length ||
            (datasets && datasets.length)) {
            datasets = (this.datasets || datasets)
                .map((/**
             * @param {?} elm
             * @param {?} index
             * @return {?}
             */
            (elm, index) => {
                /** @type {?} */
                const newElm = Object.assign({}, elm);
                if (this.colors && this.colors.length) {
                    Object.assign(newElm, this.colors[index]);
                }
                else {
                    Object.assign(newElm, this.getColors(this.chartType, index, newElm.data.length));
                }
                return newElm;
            }));
        }
        if (!datasets) {
            throw new Error(`ng-charts configuration error, data or datasets field are required to render char ${this.chartType}`);
        }
        return datasets;
    }
    /**
     * @private
     * @return {?}
     */
    refresh() {
        this.chart = this.getChartBuilder(this.ctx);
    }
    /**
     * @private
     * @param {?} colour
     * @param {?} alpha
     * @return {?}
     */
    rgba(colour, alpha) {
        return 'rgba(' + colour.concat(alpha).join(',') + ')';
    }
    /**
     * @private
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    /**
     * @private
     * @param {?} colors
     * @return {?}
     */
    formatLineColor(colors) {
        return {
            backgroundColor: this.rgba(colors, 0.4),
            borderColor: this.rgba(colors, 1),
            pointBackgroundColor: this.rgba(colors, 1),
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: this.rgba(colors, 0.8)
        };
    }
    /**
     * @private
     * @param {?} colors
     * @return {?}
     */
    formatBarColor(colors) {
        return {
            backgroundColor: this.rgba(colors, 0.6),
            borderColor: this.rgba(colors, 1),
            hoverBackgroundColor: this.rgba(colors, 0.8),
            hoverBorderColor: this.rgba(colors, 1)
        };
    }
    /**
     * @private
     * @param {?} colors
     * @return {?}
     */
    formatPieColors(colors) {
        return {
            backgroundColor: colors.map((/**
             * @param {?} color
             * @return {?}
             */
            (color) => this.rgba(color, 0.6))),
            borderColor: colors.map((/**
             * @return {?}
             */
            () => '#fff')),
            pointBackgroundColor: colors.map((/**
             * @param {?} color
             * @return {?}
             */
            (color) => this.rgba(color, 1))),
            pointBorderColor: colors.map((/**
             * @return {?}
             */
            () => '#fff')),
            pointHoverBackgroundColor: colors.map((/**
             * @param {?} color
             * @return {?}
             */
            (color) => this.rgba(color, 1))),
            pointHoverBorderColor: colors.map((/**
             * @param {?} color
             * @return {?}
             */
            (color) => this.rgba(color, 1)))
        };
    }
    /**
     * @private
     * @param {?} colors
     * @return {?}
     */
    formatPolarAreaColors(colors) {
        return {
            backgroundColor: colors.map((/**
             * @param {?} color
             * @return {?}
             */
            (color) => this.rgba(color, 0.6))),
            borderColor: colors.map((/**
             * @param {?} color
             * @return {?}
             */
            (color) => this.rgba(color, 1))),
            hoverBackgroundColor: colors.map((/**
             * @param {?} color
             * @return {?}
             */
            (color) => this.rgba(color, 0.8))),
            hoverBorderColor: colors.map((/**
             * @param {?} color
             * @return {?}
             */
            (color) => this.rgba(color, 1)))
        };
    }
    /**
     * @private
     * @return {?}
     */
    getRandomColor() {
        return [this.getRandomInt(0, 255), this.getRandomInt(0, 255), this.getRandomInt(0, 255)];
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    generateColor(index) {
        return this.defaultColors[index] || this.getRandomColor();
    }
    /**
     * @private
     * @param {?} count
     * @return {?}
     */
    generateColors(count) {
        /** @type {?} */
        const colorsArr = new Array(count);
        for (let i = 0; i < count; i++) {
            colorsArr[i] = this.defaultColors[i] || this.getRandomColor();
        }
        return colorsArr;
    }
    /**
     * @private
     * @param {?} chartType
     * @param {?} index
     * @param {?} count
     * @return {?}
     */
    getColors(chartType, index, count) {
        if (chartType === 'pie' || chartType === 'doughnut') {
            return this.formatPieColors(this.generateColors(count));
        }
        if (chartType === 'polarArea') {
            return this.formatPolarAreaColors(this.generateColors(count));
        }
        if (chartType === 'line' || chartType === 'radar') {
            return this.formatLineColor(this.generateColor(index));
        }
        if (chartType === 'bar' || chartType === 'horizontalBar') {
            return this.formatBarColor(this.generateColor(index));
        }
        return (/** @type {?} */ (this.generateColor(index)));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    windowResizeHandler(event) {
        //this.refresh(); Makes some problems on hover.
    }
}
TaminChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-chart',
                template: "<div style=\"display: block\">\r\n  <canvas #element></canvas>\r\n</div>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
TaminChartComponent.ctorParameters = () => [
    { type: TaminLazyLoadService }
];
TaminChartComponent.propDecorators = {
    data: [{ type: Input }],
    datasets: [{ type: Input }],
    labels: [{ type: Input }],
    options: [{ type: Input }],
    chartType: [{ type: Input }],
    colors: [{ type: Input }],
    lib: [{ type: Input }],
    legend: [{ type: Input }],
    chartClick: [{ type: Output }],
    chartHover: [{ type: Output }],
    element: [{ type: ViewChild, args: ['element',] }],
    windowResizeHandler: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    TaminChartComponent.prototype.defaultColors;
    /** @type {?} */
    TaminChartComponent.prototype.data;
    /** @type {?} */
    TaminChartComponent.prototype.datasets;
    /** @type {?} */
    TaminChartComponent.prototype.labels;
    /** @type {?} */
    TaminChartComponent.prototype.options;
    /** @type {?} */
    TaminChartComponent.prototype.chartType;
    /** @type {?} */
    TaminChartComponent.prototype.colors;
    /** @type {?} */
    TaminChartComponent.prototype.lib;
    /** @type {?} */
    TaminChartComponent.prototype.legend;
    /** @type {?} */
    TaminChartComponent.prototype.chartClick;
    /** @type {?} */
    TaminChartComponent.prototype.chartHover;
    /** @type {?} */
    TaminChartComponent.prototype.element;
    /** @type {?} */
    TaminChartComponent.prototype.ctx;
    /** @type {?} */
    TaminChartComponent.prototype.chart;
    /**
     * @type {?}
     * @private
     */
    TaminChartComponent.prototype.cvs;
    /**
     * @type {?}
     * @private
     */
    TaminChartComponent.prototype.initFlag;
    /**
     * @type {?}
     * @private
     */
    TaminChartComponent.prototype.taminLazyLoadService;
}
/**
 * @record
 */
export function Color() { }
if (false) {
    /** @type {?|undefined} */
    Color.prototype.backgroundColor;
    /** @type {?|undefined} */
    Color.prototype.borderWidth;
    /** @type {?|undefined} */
    Color.prototype.borderColor;
    /** @type {?|undefined} */
    Color.prototype.borderCapStyle;
    /** @type {?|undefined} */
    Color.prototype.borderDash;
    /** @type {?|undefined} */
    Color.prototype.borderDashOffset;
    /** @type {?|undefined} */
    Color.prototype.borderJoinStyle;
    /** @type {?|undefined} */
    Color.prototype.pointBorderColor;
    /** @type {?|undefined} */
    Color.prototype.pointBackgroundColor;
    /** @type {?|undefined} */
    Color.prototype.pointBorderWidth;
    /** @type {?|undefined} */
    Color.prototype.pointRadius;
    /** @type {?|undefined} */
    Color.prototype.pointHoverRadius;
    /** @type {?|undefined} */
    Color.prototype.pointHitRadius;
    /** @type {?|undefined} */
    Color.prototype.pointHoverBackgroundColor;
    /** @type {?|undefined} */
    Color.prototype.pointHoverBorderColor;
    /** @type {?|undefined} */
    Color.prototype.pointHoverBorderWidth;
    /** @type {?|undefined} */
    Color.prototype.pointStyle;
    /** @type {?|undefined} */
    Color.prototype.hoverBackgroundColor;
    /** @type {?|undefined} */
    Color.prototype.hoverBorderColor;
    /** @type {?|undefined} */
    Color.prototype.hoverBorderWidth;
}
/**
 * @record
 */
export function Colors() { }
if (false) {
    /** @type {?|undefined} */
    Colors.prototype.data;
    /** @type {?|undefined} */
    Colors.prototype.label;
}
//# sourceMappingURL=data:application/json;base64,