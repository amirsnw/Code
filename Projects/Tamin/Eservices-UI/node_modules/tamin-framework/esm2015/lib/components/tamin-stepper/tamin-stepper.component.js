/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChildren, Input, QueryList } from '@angular/core';
import { TaminStepperStepComponent } from './tamin-stepper-step/tamin-stepper-step.component';
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
export class TaminStepperComponent {
    /**
     * @param {?} breakpointObserver
     */
    constructor(breakpointObserver) {
        this.breakpointObserver = breakpointObserver;
        this.breakPoints = [Breakpoints.Small, Breakpoints.Handset];
        this.renderMode = 'desktop';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set activeStepName(value) {
        this._activeStepName = value;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.steps.forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            (item, index) => {
                item.active = item.name === value;
            }));
        }));
    }
    /**
     * @return {?}
     */
    get activeStepName() {
        return this._activeStepName;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.breakpointObserver
            .observe(this.breakPoints)
            .subscribe((/**
         * @param {?} state
         * @return {?}
         */
        (state) => {
            if (state.matches) {
                if (this.renderMode !== 'mobile') {
                    this.renderMode = 'mobile';
                }
            }
            else {
                if (this.renderMode !== 'desktop') {
                    this.renderMode = 'desktop';
                }
            }
        }));
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.steps.forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            (item, index) => {
                item.iconText = (index + 1).toString();
            }));
        }));
    }
}
TaminStepperComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-tamin-stepper',
                template: "<div\n  [ngClass]=\"{'row stepper-desktop': renderMode === 'desktop', 'stepper-mobile': renderMode === 'mobile'}\">\n  <ng-content></ng-content>\n</div>\n",
                styles: [".stepper-desktop,.stepper-mobile{position:relative}.stepper-desktop:before{content:'';position:absolute;top:50%;left:0;border-top:1px solid #cacaca;width:100%;z-index:-1}.stepper-mobile:after{content:'';position:absolute;top:0;bottom:0;right:29px;border-left:1px solid #cacaca;z-index:-1}"]
            }] }
];
/** @nocollapse */
TaminStepperComponent.ctorParameters = () => [
    { type: BreakpointObserver }
];
TaminStepperComponent.propDecorators = {
    steps: [{ type: ContentChildren, args: [TaminStepperStepComponent,] }],
    activeStepName: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TaminStepperComponent.prototype.steps;
    /**
     * @type {?}
     * @private
     */
    TaminStepperComponent.prototype._activeStepName;
    /** @type {?} */
    TaminStepperComponent.prototype.breakPoints;
    /** @type {?} */
    TaminStepperComponent.prototype.renderMode;
    /** @type {?} */
    TaminStepperComponent.prototype.breakpointObserver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tc3RlcHBlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90YW1pbi1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YW1pbi1zdGVwcGVyL3RhbWluLXN0ZXBwZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQVUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLG1EQUFtRCxDQUFDO0FBQzVGLE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxXQUFXLEVBQWtCLE1BQU0scUJBQXFCLENBQUM7QUFPckYsTUFBTSxPQUFPLHFCQUFxQjs7OztJQXFCaEMsWUFBbUIsa0JBQXNDO1FBQXRDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFoQnpELGdCQUFXLEdBQWUsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRSxlQUFVLEdBQXlCLFNBQVMsQ0FBQztJQWdCN0MsQ0FBQzs7Ozs7SUFkRCxJQUFhLGNBQWMsQ0FBQyxLQUFLO1FBQy9CLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1FBQzdCLFVBQVU7OztRQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTzs7Ozs7WUFBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQztZQUNwQyxDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELElBQUksY0FBYztRQUNoQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQzs7OztJQUtELFFBQVE7UUFDTixJQUFJLENBQUMsa0JBQWtCO2FBQ3BCLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO2FBQ3pCLFNBQVM7Ozs7UUFBQyxDQUFDLEtBQXNCLEVBQUUsRUFBRTtZQUNwQyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7Z0JBRWpCLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxRQUFRLEVBQUU7b0JBQ2hDLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO2lCQUM1QjthQUNGO2lCQUFNO2dCQUNMLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUU7b0JBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO2lCQUM3QjthQUNGO1FBQ0gsQ0FBQyxFQUFDLENBQUM7UUFFTCxVQUFVOzs7UUFBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU87Ozs7O1lBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDekMsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7OztZQWxERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0Isc0tBQTZDOzthQUU5Qzs7OztZQU5PLGtCQUFrQjs7O29CQVN2QixlQUFlLFNBQUMseUJBQXlCOzZCQU16QyxLQUFLOzs7O0lBTk4sc0NBQzRDOzs7OztJQUM1QyxnREFBZ0M7O0lBQ2hDLDRDQUFtRTs7SUFDbkUsMkNBQTZDOztJQWVqQyxtREFBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBJbnB1dCwgT25Jbml0LCBRdWVyeUxpc3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUYW1pblN0ZXBwZXJTdGVwQ29tcG9uZW50fSBmcm9tICcuL3RhbWluLXN0ZXBwZXItc3RlcC90YW1pbi1zdGVwcGVyLXN0ZXAuY29tcG9uZW50JztcbmltcG9ydCB7QnJlYWtwb2ludE9ic2VydmVyLCBCcmVha3BvaW50cywgQnJlYWtwb2ludFN0YXRlfSBmcm9tICdAYW5ndWxhci9jZGsvbGF5b3V0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGFtaW4tdGFtaW4tc3RlcHBlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi90YW1pbi1zdGVwcGVyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGFtaW4tc3RlcHBlci5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIFRhbWluU3RlcHBlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihUYW1pblN0ZXBwZXJTdGVwQ29tcG9uZW50KVxuICBzdGVwczogUXVlcnlMaXN0PFRhbWluU3RlcHBlclN0ZXBDb21wb25lbnQ+O1xuICBwcml2YXRlIF9hY3RpdmVTdGVwTmFtZTogc3RyaW5nO1xuICBicmVha1BvaW50czogQXJyYXk8YW55PiA9IFtCcmVha3BvaW50cy5TbWFsbCwgQnJlYWtwb2ludHMuSGFuZHNldF07XG4gIHJlbmRlck1vZGU6ICdkZXNrdG9wJyB8ICdtb2JpbGUnID0gJ2Rlc2t0b3AnO1xuXG4gIEBJbnB1dCgpIHNldCBhY3RpdmVTdGVwTmFtZSh2YWx1ZSkge1xuICAgIHRoaXMuX2FjdGl2ZVN0ZXBOYW1lID0gdmFsdWU7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnN0ZXBzLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgIGl0ZW0uYWN0aXZlID0gaXRlbS5uYW1lID09PSB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0IGFjdGl2ZVN0ZXBOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVN0ZXBOYW1lO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHVibGljIGJyZWFrcG9pbnRPYnNlcnZlcjogQnJlYWtwb2ludE9ic2VydmVyKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmJyZWFrcG9pbnRPYnNlcnZlclxuICAgICAgLm9ic2VydmUodGhpcy5icmVha1BvaW50cylcbiAgICAgIC5zdWJzY3JpYmUoKHN0YXRlOiBCcmVha3BvaW50U3RhdGUpID0+IHtcbiAgICAgICAgaWYgKHN0YXRlLm1hdGNoZXMpIHtcblxuICAgICAgICAgIGlmICh0aGlzLnJlbmRlck1vZGUgIT09ICdtb2JpbGUnKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlck1vZGUgPSAnbW9iaWxlJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMucmVuZGVyTW9kZSAhPT0gJ2Rlc2t0b3AnKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlck1vZGUgPSAnZGVza3RvcCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5zdGVwcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICBpdGVtLmljb25UZXh0ID0gKGluZGV4ICsgMSkudG9TdHJpbmcoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=