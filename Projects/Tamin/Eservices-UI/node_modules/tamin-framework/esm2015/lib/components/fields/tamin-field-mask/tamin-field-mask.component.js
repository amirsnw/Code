/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FieldBaseComponent } from '../../../base/field-base.component';
export class TaminFieldMaskComponent extends FieldBaseComponent {
    /**
     * @param {?} mask
     * @return {?}
     */
    set mask(mask) {
        /** @type {?} */
        const me = this;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.maskRef = new IMask(this.inputElement.nativeElement, {
                mask: mask,
            });
        }), 0);
    }
    /**
     * @return {?}
     */
    get mask() {
        return this.maskRef.mask;
    }
    /**
     * @param {?} regex
     * @return {?}
     */
    set regex(regex) {
        /** @type {?} */
        const me = this;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.maskRef = new IMask(this.inputElement.nativeElement, {
                mask: new RegExp(regex),
            });
        }), 0);
    }
    /**
     * @return {?}
     */
    get regex() {
        return this.maskRef.regex;
    }
    /**
     * @return {?}
     */
    initializeComponent() {
    }
}
TaminFieldMaskComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-field-mask',
                template: "<input\n  type=\"text\"\n  [disabled] = \"control.disabled\"\n  [attr.placeholder]=\"placeHolder\"\n  class=\"tamin-form-control-input tamin-form-control-mask\"\n  [class.tamin-form-control-valid]=\"control.touched && control?.valid\"\n  [class.tamin-form-control-invalid]=\"control.touched && !control?.valid\"\n  #inputElement>\n<span>{{hint}}</span>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TaminFieldMaskComponent)),
                        multi: true
                    }
                ],
                styles: [".tamin-form-control-mask{direction:ltr;text-align:right}"]
            }] }
];
TaminFieldMaskComponent.propDecorators = {
    mask: [{ type: Input }],
    regex: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tZmllbGQtbWFzay5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90YW1pbi1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9maWVsZHMvdGFtaW4tZmllbGQtbWFzay90YW1pbi1maWVsZC1tYXNrLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBZ0J0RSxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsa0JBQWtCOzs7OztJQUM3RCxJQUFhLElBQUksQ0FBQyxJQUFZOztjQUN0QixFQUFFLEdBQUcsSUFBSTtRQUNmLFVBQVU7OztRQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUU7Z0JBQ3hELElBQUksRUFBRSxJQUFJO2FBQ1gsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQzs7OztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDM0IsQ0FBQzs7Ozs7SUFFRCxJQUFhLEtBQUssQ0FBQyxLQUFhOztjQUN4QixFQUFFLEdBQUcsSUFBSTtRQUVmLFVBQVU7OztRQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUU7Z0JBQ3hELElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7YUFDeEIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQzs7OztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDNUIsQ0FBQzs7OztJQUVELG1CQUFtQjtJQUNuQixDQUFDOzs7WUF6Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLDhXQUFnRDtnQkFFaEQsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE9BQU8sRUFBRSxpQkFBaUI7d0JBQzFCLFdBQVcsRUFBRSxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUM7d0JBQ3RELEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGOzthQUNGOzs7bUJBRUUsS0FBSztvQkFhTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TkdfVkFMVUVfQUNDRVNTT1J9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7RmllbGRCYXNlQ29tcG9uZW50fSBmcm9tICcuLi8uLi8uLi9iYXNlL2ZpZWxkLWJhc2UuY29tcG9uZW50JztcblxuZGVjbGFyZSBsZXQgSU1hc2s6IGFueTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGFtaW4tZmllbGQtbWFzaycsXG4gIHRlbXBsYXRlVXJsOiAnLi90YW1pbi1maWVsZC1tYXNrLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGFtaW4tZmllbGQtbWFzay5jb21wb25lbnQuc2NzcyddLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRhbWluRmllbGRNYXNrQ29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFRhbWluRmllbGRNYXNrQ29tcG9uZW50IGV4dGVuZHMgRmllbGRCYXNlQ29tcG9uZW50IHtcbiAgQElucHV0KCkgc2V0IG1hc2sobWFzazogc3RyaW5nKSB7XG4gICAgY29uc3QgbWUgPSB0aGlzO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5tYXNrUmVmID0gbmV3IElNYXNrKHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgICAgbWFzazogbWFzayxcbiAgICAgIH0pO1xuICAgIH0sIDApO1xuICB9XG5cbiAgZ2V0IG1hc2soKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5tYXNrUmVmLm1hc2s7XG4gIH1cblxuICBASW5wdXQoKSBzZXQgcmVnZXgocmVnZXg6IHN0cmluZykge1xuICAgIGNvbnN0IG1lID0gdGhpcztcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5tYXNrUmVmID0gbmV3IElNYXNrKHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgICAgbWFzazogbmV3IFJlZ0V4cChyZWdleCksXG4gICAgICB9KTtcbiAgICB9LCAwKTtcbiAgfVxuXG4gIGdldCByZWdleCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLm1hc2tSZWYucmVnZXg7XG4gIH1cblxuICBpbml0aWFsaXplQ29tcG9uZW50KCkge1xuICB9XG59XG4iXX0=