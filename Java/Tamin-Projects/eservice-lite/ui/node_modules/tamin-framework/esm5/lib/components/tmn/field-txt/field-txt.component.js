/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { ControlContainer, NG_VALUE_ACCESSOR } from '@angular/forms';
var FieldTxtComponent = /** @class */ (function () {
    function FieldTxtComponent(controlContainer) {
        var _this = this;
        this.controlContainer = controlContainer;
        this.value = '';
        this.maxLength = Number.MAX_SAFE_INTEGER;
        this.blur = new EventEmitter();
        this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) {
        });
        this.onTouched = (/**
         * @return {?}
         */
        function () {
            _this.blur.emit();
        });
    }
    /**
     * @return {?}
     */
    FieldTxtComponent.prototype.updateChanges = /**
     * @return {?}
     */
    function () {
        this.onChange(this.value);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FieldTxtComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FieldTxtComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    FieldTxtComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.value = obj;
        this.updateChanges();
    };
    /**
     * @return {?}
     */
    FieldTxtComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.control = this.controlContainer.control.get(this.formControlName);
    };
    FieldTxtComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'tmn-field-txt',
                    template: "<input\n    type=\"text\"\n    [(ngModel)]=\"value\"\n    (ngModelChange)=\"updateChanges()\"\n    class=\"tamin-form-control-input\"\n    (blur)=\"onTouched()\"\n    [disabled]=\"control?.disabled\"\n    [class.tamin-form-control-valid]=\"control?.touched && control?.valid\"\n    [class.tamin-form-control-invalid]=\"control?.touched && !control?.valid\"\n    [attr.maxLength]=\"maxLength\"\n    [attr.placeholder]=\"placeHolder\"\n    #element>",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return FieldTxtComponent; })),
                            multi: true
                        }],
                    styles: [":host {\n      width: 100%;\n    }"]
                }] }
    ];
    /** @nocollapse */
    FieldTxtComponent.ctorParameters = function () { return [
        { type: ControlContainer }
    ]; };
    FieldTxtComponent.propDecorators = {
        element: [{ type: ViewChild, args: ['element',] }],
        maxLength: [{ type: Input }],
        formControlName: [{ type: Input }],
        placeHolder: [{ type: Input }],
        blur: [{ type: Output }]
    };
    return FieldTxtComponent;
}());
export { FieldTxtComponent };
if (false) {
    /** @type {?} */
    FieldTxtComponent.prototype.value;
    /** @type {?} */
    FieldTxtComponent.prototype.control;
    /** @type {?} */
    FieldTxtComponent.prototype.element;
    /** @type {?} */
    FieldTxtComponent.prototype.maxLength;
    /** @type {?} */
    FieldTxtComponent.prototype.formControlName;
    /** @type {?} */
    FieldTxtComponent.prototype.placeHolder;
    /** @type {?} */
    FieldTxtComponent.prototype.blur;
    /** @type {?} */
    FieldTxtComponent.prototype.onChange;
    /** @type {?} */
    FieldTxtComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    FieldTxtComponent.prototype.controlContainer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtdHh0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RhbWluLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3Rtbi9maWVsZC10eHQvZmllbGQtdHh0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFVBQVUsRUFDVixLQUFLLEVBQ0wsTUFBTSxFQUNOLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBRUwsZ0JBQWdCLEVBRWhCLGlCQUFpQixFQUNsQixNQUFNLGdCQUFnQixDQUFDO0FBR3hCO0lBMENFLDJCQUFvQixnQkFBa0M7UUFBdEQsaUJBRUM7UUFGbUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQWZ0RCxVQUFLLEdBQUcsRUFBRSxDQUFDO1FBR0YsY0FBUyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUduQyxTQUFJLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVwQyxhQUFROzs7O1FBQXFCLFVBQUMsQ0FBTTtRQUNwQyxDQUFDLEVBQUE7UUFFRCxjQUFTOzs7UUFBZTtZQUN0QixLQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ25CLENBQUMsRUFBQTtJQUlELENBQUM7Ozs7SUFFRCx5Q0FBYTs7O0lBQWI7UUFDRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDOzs7OztJQUVELDRDQUFnQjs7OztJQUFoQixVQUFpQixFQUFPO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBRUQsNkNBQWlCOzs7O0lBQWpCLFVBQWtCLEVBQU87UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7Ozs7SUFFRCxzQ0FBVTs7OztJQUFWLFVBQVcsR0FBUTtRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUNqQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7OztJQUVELDhDQUFrQjs7O0lBQWxCO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDekUsQ0FBQzs7Z0JBakVGLFNBQVMsU0FBQzs7b0JBRVQsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFFBQVEsRUFBRSxpY0FXRTtvQkFNWixTQUFTLEVBQUUsQ0FBQzs0QkFDVixPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixXQUFXLEVBQUUsVUFBVTs7OzRCQUFDLGNBQU0sT0FBQSxpQkFBaUIsRUFBakIsQ0FBaUIsRUFBQzs0QkFDaEQsS0FBSyxFQUFFLElBQUk7eUJBQ1osQ0FBQzs2QkFSQSxvQ0FFRTtpQkFPTDs7OztnQkEvQkMsZ0JBQWdCOzs7MEJBbUNmLFNBQVMsU0FBQyxTQUFTOzRCQUNuQixLQUFLO2tDQUNMLEtBQUs7OEJBQ0wsS0FBSzt1QkFDTCxNQUFNOztJQWlDVCx3QkFBQztDQUFBLEFBbEVELElBa0VDO1NBeENZLGlCQUFpQjs7O0lBQzVCLGtDQUFXOztJQUNYLG9DQUF5Qjs7SUFDekIsb0NBQTBDOztJQUMxQyxzQ0FBNkM7O0lBQzdDLDRDQUFpQzs7SUFDakMsd0NBQTZCOztJQUM3QixpQ0FBb0M7O0lBRXBDLHFDQUNDOztJQUVELHNDQUVDOzs7OztJQUVXLDZDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBmb3J3YXJkUmVmLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBBYnN0cmFjdENvbnRyb2wsXG4gIENvbnRyb2xDb250YWluZXIsXG4gIENvbnRyb2xWYWx1ZUFjY2Vzc29yLFxuICBOR19WQUxVRV9BQ0NFU1NPUlxufSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0lUYW1pbkZpZWxkfSBmcm9tICcuLi9JVGFtaW5GaWVsZCc7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAndG1uLWZpZWxkLXR4dCcsXG4gIHRlbXBsYXRlOiBgPGlucHV0XG4gICAgdHlwZT1cInRleHRcIlxuICAgIFsobmdNb2RlbCldPVwidmFsdWVcIlxuICAgIChuZ01vZGVsQ2hhbmdlKT1cInVwZGF0ZUNoYW5nZXMoKVwiXG4gICAgY2xhc3M9XCJ0YW1pbi1mb3JtLWNvbnRyb2wtaW5wdXRcIlxuICAgIChibHVyKT1cIm9uVG91Y2hlZCgpXCJcbiAgICBbZGlzYWJsZWRdPVwiY29udHJvbD8uZGlzYWJsZWRcIlxuICAgIFtjbGFzcy50YW1pbi1mb3JtLWNvbnRyb2wtdmFsaWRdPVwiY29udHJvbD8udG91Y2hlZCAmJiBjb250cm9sPy52YWxpZFwiXG4gICAgW2NsYXNzLnRhbWluLWZvcm0tY29udHJvbC1pbnZhbGlkXT1cImNvbnRyb2w/LnRvdWNoZWQgJiYgIWNvbnRyb2w/LnZhbGlkXCJcbiAgICBbYXR0ci5tYXhMZW5ndGhdPVwibWF4TGVuZ3RoXCJcbiAgICBbYXR0ci5wbGFjZWhvbGRlcl09XCJwbGFjZUhvbGRlclwiXG4gICAgI2VsZW1lbnQ+YCxcbiAgc3R5bGVzOiBbXG4gICAgYDpob3N0IHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1gXG4gIF0sXG4gIHByb3ZpZGVyczogW3tcbiAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBGaWVsZFR4dENvbXBvbmVudCksXG4gICAgbXVsdGk6IHRydWVcbiAgfV1cbn0pXG5leHBvcnQgY2xhc3MgRmllbGRUeHRDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgSVRhbWluRmllbGQsIEFmdGVyQ29udGVudEluaXQge1xuICB2YWx1ZSA9ICcnO1xuICBjb250cm9sOiBBYnN0cmFjdENvbnRyb2w7XG4gIEBWaWV3Q2hpbGQoJ2VsZW1lbnQnKSBlbGVtZW50OiBFbGVtZW50UmVmO1xuICBASW5wdXQoKSBtYXhMZW5ndGggPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgQElucHV0KCkgZm9ybUNvbnRyb2xOYW1lOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHBsYWNlSG9sZGVyOiBzdHJpbmc7XG4gIEBPdXRwdXQoKSBibHVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIG9uQ2hhbmdlOiAoXzogYW55KSA9PiB2b2lkID0gKF86IGFueSkgPT4ge1xuICB9XG5cbiAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkID0gKCkgPT4ge1xuICAgIHRoaXMuYmx1ci5lbWl0KCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRyb2xDb250YWluZXI6IENvbnRyb2xDb250YWluZXIpIHtcblxuICB9XG5cbiAgdXBkYXRlQ2hhbmdlcygpIHtcbiAgICB0aGlzLm9uQ2hhbmdlKHRoaXMudmFsdWUpO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICB3cml0ZVZhbHVlKG9iajogYW55KTogdm9pZCB7XG4gICAgdGhpcy52YWx1ZSA9IG9iajtcbiAgICB0aGlzLnVwZGF0ZUNoYW5nZXMoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRyb2wgPSB0aGlzLmNvbnRyb2xDb250YWluZXIuY29udHJvbC5nZXQodGhpcy5mb3JtQ29udHJvbE5hbWUpO1xuICB9XG59XG4iXX0=