/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';
import { FieldBaseComponent } from '../../../base/field-base.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var TaminFieldCalculableComponent = /** @class */ (function (_super) {
    tslib_1.__extends(TaminFieldCalculableComponent, _super);
    function TaminFieldCalculableComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.min = Number.MIN_SAFE_INTEGER;
        _this.max = Number.MAX_SAFE_INTEGER;
        _this.negativeNumberColor = 'red';
        _this.calculate = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    TaminFieldCalculableComponent.prototype.initializeComponent = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var me = this;
        this.maskRef = new IMask(this.inputElement.nativeElement, {
            mask: Number,
            thousandsSeparator: ',',
            min: me.min,
            max: me.max
        });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TaminFieldCalculableComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var theValue = value == null ? '' : value;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.maskRef) {
                _this.maskRef.value = value.toString();
            }
            else {
                _this.inputElement.nativeElement.value = value.toString();
            }
        }));
        this.onChange(value);
    };
    /**
     * @return {?}
     */
    TaminFieldCalculableComponent.prototype.onCalculate = /**
     * @return {?}
     */
    function () {
        this.calculate.emit();
    };
    TaminFieldCalculableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tamin-tamin-field-calculable',
                    template: "<div class=\"input-wrapper\">\n<input\n  type=\"text\"\n  [disabled] = \"control.disabled\"\n  [attr.placeholder]=\"placeHolder\"\n  style=\"direction: ltr; padding-left: 35px;\"\n  class=\"tamin-form-control-input\"\n  [class.tamin-form-control-valid]=\"control.touched && control.valid\"\n  [class.tamin-form-control-invalid]=\"control.touched && !control.valid\"\n  [style.color]=\"inputElement?.nativeElement?.value < 0 ? negativeNumberColor : ''\"\n  #inputElement>\n<span class=\"icon\" #icon>\n    <i\n      class=\"icon-calc\"\n      style=\"font-size: 1.5em\"\n      (click)=\"onCalculate()\"\n      [class.tamin-form-control-valid-icon]=\"control.touched && control.valid\"\n      [class.tamin-form-control-invalid-icon]=\"control.touched && !control.valid\"\n      #iconElement></i>\n  </span>\n</div>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return TaminFieldCalculableComponent; })),
                            multi: true
                        }
                    ],
                    styles: [".input-wrapper{position:relative}.icon{position:absolute;top:23%;left:5px;height:10px;margin-top:-5px;cursor:pointer}.item{padding:5px;cursor:pointer}.item:hover{background-color:silver}"]
                }] }
    ];
    TaminFieldCalculableComponent.propDecorators = {
        min: [{ type: Input }],
        max: [{ type: Input }],
        negativeNumberColor: [{ type: Input }],
        calculate: [{ type: Output, args: ['calculate',] }]
    };
    return TaminFieldCalculableComponent;
}(FieldBaseComponent));
export { TaminFieldCalculableComponent };
if (false) {
    /** @type {?} */
    TaminFieldCalculableComponent.prototype.min;
    /** @type {?} */
    TaminFieldCalculableComponent.prototype.max;
    /** @type {?} */
    TaminFieldCalculableComponent.prototype.negativeNumberColor;
    /** @type {?} */
    TaminFieldCalculableComponent.prototype.calculate;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tZmllbGQtY2FsY3VsYWJsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90YW1pbi1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9maWVsZHMvdGFtaW4tZmllbGQtY2FsY3VsYWJsZS90YW1pbi1maWVsZC1jYWxjdWxhYmxlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pGLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBSWpEO0lBWW1ELHlEQUFrQjtJQVpyRTtRQUFBLHFFQThDQztRQWhDVSxTQUFHLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1FBQzlCLFNBQUcsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7UUFDOUIseUJBQW1CLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLGVBQVMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDOztJQTZCdEQsQ0FBQzs7OztJQTNCQywyREFBbUI7OztJQUFuQjs7WUFDUSxFQUFFLEdBQUcsSUFBSTtRQUNmLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUU7WUFDeEQsSUFBSSxFQUFFLE1BQU07WUFDWixrQkFBa0IsRUFBRSxHQUFHO1lBQ3ZCLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRztZQUNYLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRztTQUNaLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsa0RBQVU7Ozs7SUFBVixVQUFXLEtBQVU7UUFBckIsaUJBV0M7O1lBVk8sUUFBUSxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSztRQUMzQyxVQUFVOzs7UUFBQztZQUNULElBQUksS0FBSSxDQUFDLE9BQU8sRUFBRTtnQkFDaEIsS0FBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQ3ZDO2lCQUFNO2dCQUNMLEtBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDMUQ7UUFDSCxDQUFDLEVBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQzs7OztJQUdELG1EQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7Z0JBN0NGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsOEJBQThCO29CQUN4QywwekJBQXNEO29CQUV0RCxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVU7Ozs0QkFBQyxjQUFNLE9BQUEsNkJBQTZCLEVBQTdCLENBQTZCLEVBQUM7NEJBQzVELEtBQUssRUFBRSxJQUFJO3lCQUNaO3FCQUNGOztpQkFDRjs7O3NCQUdFLEtBQUs7c0JBQ0wsS0FBSztzQ0FDTCxLQUFLOzRCQUNMLE1BQU0sU0FBQyxXQUFXOztJQTZCckIsb0NBQUM7Q0FBQSxBQTlDRCxDQVltRCxrQkFBa0IsR0FrQ3BFO1NBbENZLDZCQUE2Qjs7O0lBRXhDLDRDQUF1Qzs7SUFDdkMsNENBQXVDOztJQUN2Qyw0REFBcUM7O0lBQ3JDLGtEQUFvRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIGZvcndhcmRSZWYsIElucHV0LCBPbkluaXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0ZpZWxkQmFzZUNvbXBvbmVudH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9maWVsZC1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQge05HX1ZBTFVFX0FDQ0VTU09SfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmRlY2xhcmUgbGV0IElNYXNrOiBhbnk7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RhbWluLXRhbWluLWZpZWxkLWNhbGN1bGFibGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFtaW4tZmllbGQtY2FsY3VsYWJsZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RhbWluLWZpZWxkLWNhbGN1bGFibGUuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUYW1pbkZpZWxkQ2FsY3VsYWJsZUNvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBUYW1pbkZpZWxkQ2FsY3VsYWJsZUNvbXBvbmVudCBleHRlbmRzIEZpZWxkQmFzZUNvbXBvbmVudCB7XG5cbiAgQElucHV0KCkgbWluID0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVI7XG4gIEBJbnB1dCgpIG1heCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICBASW5wdXQoKSBuZWdhdGl2ZU51bWJlckNvbG9yID0gJ3JlZCc7XG4gIEBPdXRwdXQoJ2NhbGN1bGF0ZScpIGNhbGN1bGF0ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBpbml0aWFsaXplQ29tcG9uZW50KCkge1xuICAgIGNvbnN0IG1lID0gdGhpcztcbiAgICB0aGlzLm1hc2tSZWYgPSBuZXcgSU1hc2sodGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudCwge1xuICAgICAgbWFzazogTnVtYmVyLFxuICAgICAgdGhvdXNhbmRzU2VwYXJhdG9yOiAnLCcsXG4gICAgICBtaW46IG1lLm1pbixcbiAgICAgIG1heDogbWUubWF4XG4gICAgfSk7XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCB0aGVWYWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMubWFza1JlZikge1xuICAgICAgICB0aGlzLm1hc2tSZWYudmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC52YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uQ2hhbmdlKHZhbHVlKTtcbiAgfVxuXG5cbiAgb25DYWxjdWxhdGUoKSB7XG4gICAgdGhpcy5jYWxjdWxhdGUuZW1pdCgpO1xuICB9XG59XG4iXX0=