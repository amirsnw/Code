/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class TaminLazyLoadService {
    /**
     * @param {?} document
     */
    constructor(document) {
        this.document = document;
        this.loadedLibraries = {};
    }
    /**
     * @param {?} url
     * @return {?}
     */
    loadJs(url) {
        if (this.loadedLibraries[url]) {
            return this.loadedLibraries[url].asObservable();
        }
        this.loadedLibraries[url] = new ReplaySubject();
        /** @type {?} */
        const script = this.document.createElement('script');
        script.type = 'text/javascript';
        script.src = url;
        script.onload = (/**
         * @return {?}
         */
        () => {
            this.loadedLibraries[url].next('');
            this.loadedLibraries[url].complete();
        });
        this.document.body.appendChild(script);
        return this.loadedLibraries[url].asObservable();
    }
    /**
     * @param {?} url
     * @return {?}
     */
    loadCss(url) {
        if (this.loadedLibraries[url]) {
            return this.loadedLibraries[url].asObservable();
        }
        this.loadedLibraries[url] = new ReplaySubject();
        /** @type {?} */
        const script = this.document.createElement('link');
        script.rel = 'stylesheet';
        script.href = url;
        script.onload = (/**
         * @return {?}
         */
        () => {
            this.loadedLibraries[url].next('');
            this.loadedLibraries[url].complete();
        });
        this.document.body.appendChild(script);
        return this.loadedLibraries[url].asObservable();
    }
}
TaminLazyLoadService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
TaminLazyLoadService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/** @nocollapse */ TaminLazyLoadService.ngInjectableDef = i0.defineInjectable({ factory: function TaminLazyLoadService_Factory() { return new TaminLazyLoadService(i0.inject(i1.DOCUMENT)); }, token: TaminLazyLoadService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaminLazyLoadService.prototype.loadedLibraries;
    /**
     * @type {?}
     * @private
     */
    TaminLazyLoadService.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tbGF6eS1sb2FkLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90YW1pbi1mcmFtZXdvcmsvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvdGFtaW4tbGF6eS1sb2FkL3RhbWluLWxhenktbG9hZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQWEsYUFBYSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQy9DLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQzs7O0FBR3pDLE1BQU0sT0FBTyxvQkFBb0I7Ozs7SUFHL0IsWUFBK0MsUUFBYTtRQUFiLGFBQVEsR0FBUixRQUFRLENBQUs7UUFGcEQsb0JBQWUsR0FBMEMsRUFBRSxDQUFDO0lBR3BFLENBQUM7Ozs7O0lBRU0sTUFBTSxDQUFDLEdBQVc7UUFDdkIsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzdCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNqRDtRQUVELElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQzs7Y0FFMUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUNwRCxNQUFNLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2pCLE1BQU0sQ0FBQyxNQUFNOzs7UUFBRyxHQUFHLEVBQUU7WUFDbkIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN2QyxDQUFDLENBQUEsQ0FBQztRQUVGLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDbEQsQ0FBQzs7Ozs7SUFFTSxPQUFPLENBQUMsR0FBVztRQUN4QixJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDN0IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ2pEO1FBRUQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDOztjQUUxQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO1FBQ2xELE1BQU0sQ0FBQyxHQUFHLEdBQUcsWUFBWSxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2xCLE1BQU0sQ0FBQyxNQUFNOzs7UUFBRyxHQUFHLEVBQUU7WUFDbkIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN2QyxDQUFDLENBQUEsQ0FBQztRQUVGLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDbEQsQ0FBQzs7O1lBM0NGLFVBQVUsU0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUM7Ozs7NENBSWpCLE1BQU0sU0FBQyxRQUFROzs7Ozs7OztJQUY1QiwrQ0FBb0U7Ozs7O0lBRXhELHdDQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcbmV4cG9ydCBjbGFzcyBUYW1pbkxhenlMb2FkU2VydmljZSB7XG4gIHByaXZhdGUgbG9hZGVkTGlicmFyaWVzOiB7IFt1cmw6IHN0cmluZ106IFJlcGxheVN1YmplY3Q8YW55PiB9ID0ge307XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSByZWFkb25seSBkb2N1bWVudDogYW55KSB7XG4gIH1cblxuICBwdWJsaWMgbG9hZEpzKHVybDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBpZiAodGhpcy5sb2FkZWRMaWJyYXJpZXNbdXJsXSkge1xuICAgICAgcmV0dXJuIHRoaXMubG9hZGVkTGlicmFyaWVzW3VybF0uYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2FkZWRMaWJyYXJpZXNbdXJsXSA9IG5ldyBSZXBsYXlTdWJqZWN0KCk7XG5cbiAgICBjb25zdCBzY3JpcHQgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgc2NyaXB0LnNyYyA9IHVybDtcbiAgICBzY3JpcHQub25sb2FkID0gKCkgPT4ge1xuICAgICAgdGhpcy5sb2FkZWRMaWJyYXJpZXNbdXJsXS5uZXh0KCcnKTtcbiAgICAgIHRoaXMubG9hZGVkTGlicmFyaWVzW3VybF0uY29tcGxldGUoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgcmV0dXJuIHRoaXMubG9hZGVkTGlicmFyaWVzW3VybF0uYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBwdWJsaWMgbG9hZENzcyh1cmw6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgaWYgKHRoaXMubG9hZGVkTGlicmFyaWVzW3VybF0pIHtcbiAgICAgIHJldHVybiB0aGlzLmxvYWRlZExpYnJhcmllc1t1cmxdLmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cblxuICAgIHRoaXMubG9hZGVkTGlicmFyaWVzW3VybF0gPSBuZXcgUmVwbGF5U3ViamVjdCgpO1xuXG4gICAgY29uc3Qgc2NyaXB0ID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gICAgc2NyaXB0LnJlbCA9ICdzdHlsZXNoZWV0JztcbiAgICBzY3JpcHQuaHJlZiA9IHVybDtcbiAgICBzY3JpcHQub25sb2FkID0gKCkgPT4ge1xuICAgICAgdGhpcy5sb2FkZWRMaWJyYXJpZXNbdXJsXS5uZXh0KCcnKTtcbiAgICAgIHRoaXMubG9hZGVkTGlicmFyaWVzW3VybF0uY29tcGxldGUoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgcmV0dXJuIHRoaXMubG9hZGVkTGlicmFyaWVzW3VybF0uYXNPYnNlcnZhYmxlKCk7XG4gIH1cbn1cbiJdfQ==