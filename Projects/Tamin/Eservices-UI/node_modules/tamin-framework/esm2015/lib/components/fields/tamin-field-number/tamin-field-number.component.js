/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FieldBaseComponent } from '../../../base/field-base.component';
export class TaminFieldNumberComponent extends FieldBaseComponent {
    constructor() {
        super(...arguments);
        this.min = Number.MIN_SAFE_INTEGER;
        this.max = Number.MAX_SAFE_INTEGER;
        this.negativeNumberColor = 'red';
    }
    /**
     * @return {?}
     */
    initializeComponent() {
        /** @type {?} */
        const me = this;
        this.maskRef = new IMask(this.inputElement.nativeElement, {
            mask: Number,
            thousandsSeparator: ',',
            min: me.min,
            max: me.max,
            radix: '.',
            scale: 2,
        });
    }
}
TaminFieldNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-field-number',
                template: "<input\n  type=\"text\"\n  [disabled] = \"control.disabled\"\n  [attr.placeholder]=\"placeHolder\"\n  style=\"direction: ltr\"\n  class=\"tamin-form-control-input\"\n  [class.tamin-form-control-valid]=\"control.touched && control.valid\"\n  [class.tamin-form-control-invalid]=\"control.touched && !control.valid\"\n  [style.color]=\"inputElement?.nativeElement?.value < 0 ? negativeNumberColor : ''\"\n  #inputElement>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TaminFieldNumberComponent)),
                        multi: true
                    }
                ],
                styles: [""]
            }] }
];
TaminFieldNumberComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    negativeNumberColor: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TaminFieldNumberComponent.prototype.min;
    /** @type {?} */
    TaminFieldNumberComponent.prototype.max;
    /** @type {?} */
    TaminFieldNumberComponent.prototype.negativeNumberColor;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tZmllbGQtbnVtYmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RhbWluLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2ZpZWxkcy90YW1pbi1maWVsZC1udW1iZXIvdGFtaW4tZmllbGQtbnVtYmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBZ0J0RSxNQUFNLE9BQU8seUJBQTBCLFNBQVEsa0JBQWtCO0lBWmpFOztRQWFXLFFBQUcsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7UUFDOUIsUUFBRyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUM5Qix3QkFBbUIsR0FBRyxLQUFLLENBQUM7SUFhdkMsQ0FBQzs7OztJQVhDLG1CQUFtQjs7Y0FDWCxFQUFFLEdBQUcsSUFBSTtRQUNmLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUU7WUFDeEQsSUFBSSxFQUFFLE1BQU07WUFDWixrQkFBa0IsRUFBRSxHQUFHO1lBQ3ZCLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRztZQUNYLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRztZQUNYLEtBQUssRUFBRSxHQUFHO1lBQ1YsS0FBSyxFQUFFLENBQUM7U0FDVCxDQUFDLENBQUM7SUFDTCxDQUFDOzs7WUEzQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLGdiQUFrRDtnQkFFbEQsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE9BQU8sRUFBRSxpQkFBaUI7d0JBQzFCLFdBQVcsRUFBRSxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMseUJBQXlCLEVBQUM7d0JBQ3hELEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGOzthQUNGOzs7a0JBRUUsS0FBSztrQkFDTCxLQUFLO2tDQUNMLEtBQUs7Ozs7SUFGTix3Q0FBdUM7O0lBQ3ZDLHdDQUF1Qzs7SUFDdkMsd0RBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TkdfVkFMVUVfQUNDRVNTT1J9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7RmllbGRCYXNlQ29tcG9uZW50fSBmcm9tICcuLi8uLi8uLi9iYXNlL2ZpZWxkLWJhc2UuY29tcG9uZW50JztcblxuZGVjbGFyZSBsZXQgSU1hc2s6IGFueTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGFtaW4tZmllbGQtbnVtYmVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RhbWluLWZpZWxkLW51bWJlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RhbWluLWZpZWxkLW51bWJlci5jb21wb25lbnQuc2NzcyddLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRhbWluRmllbGROdW1iZXJDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgVGFtaW5GaWVsZE51bWJlckNvbXBvbmVudCBleHRlbmRzIEZpZWxkQmFzZUNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIG1pbiA9IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSO1xuICBASW5wdXQoKSBtYXggPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgQElucHV0KCkgbmVnYXRpdmVOdW1iZXJDb2xvciA9ICdyZWQnO1xuXG4gIGluaXRpYWxpemVDb21wb25lbnQoKSB7XG4gICAgY29uc3QgbWUgPSB0aGlzO1xuICAgIHRoaXMubWFza1JlZiA9IG5ldyBJTWFzayh0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LCB7XG4gICAgICBtYXNrOiBOdW1iZXIsXG4gICAgICB0aG91c2FuZHNTZXBhcmF0b3I6ICcsJyxcbiAgICAgIG1pbjogbWUubWluLFxuICAgICAgbWF4OiBtZS5tYXgsXG4gICAgICByYWRpeDogJy4nLFxuICAgICAgc2NhbGU6IDIsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==