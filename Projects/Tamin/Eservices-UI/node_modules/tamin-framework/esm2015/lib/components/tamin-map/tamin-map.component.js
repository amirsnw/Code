/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { TaminLazyLoadService } from '../../services/tamin-lazy-load/tamin-lazy-load.service';
export class TaminMapComponent {
    /**
     * @param {?} taminLazyLoadService
     */
    constructor(taminLazyLoadService) {
        this.taminLazyLoadService = taminLazyLoadService;
        this.js = 'http://www.openlayers.org/api/OpenLayers.js';
        this.width = '100%';
        this.height = '100%';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.id = (new Date()).getTime().toString();
    }
    /**
     * @return {?}
     */
    load() {
        return this.taminLazyLoadService.loadJs(this.js).toPromise();
    }
    /**
     * @param {?} latitude
     * @param {?} longitude
     * @param {?} zoom
     * @return {?}
     */
    setLocation(latitude, longitude, zoom) {
        /** @type {?} */
        const map = new OpenLayers.Map(this.id);
        map.addLayer(new OpenLayers.Layer.OSM());
        /** @type {?} */
        const lonLat = new OpenLayers.LonLat(longitude, latitude)
            .transform(new OpenLayers.Projection('EPSG:4326'), map.getProjectionObject());
        /** @type {?} */
        const markers = new OpenLayers.Layer.Markers('Markers');
        markers.addMarker(new OpenLayers.Marker(lonLat));
        map.setCenter(lonLat, zoom);
    }
}
TaminMapComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-map',
                template: "<div [attr.id]=\"id\" [style.width]=\"width\" [style.height]=\"height\"></div>\n\n",
                styles: [""]
            }] }
];
/** @nocollapse */
TaminMapComponent.ctorParameters = () => [
    { type: TaminLazyLoadService }
];
TaminMapComponent.propDecorators = {
    js: [{ type: Input }],
    css: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TaminMapComponent.prototype.js;
    /** @type {?} */
    TaminMapComponent.prototype.css;
    /** @type {?} */
    TaminMapComponent.prototype.width;
    /** @type {?} */
    TaminMapComponent.prototype.height;
    /** @type {?} */
    TaminMapComponent.prototype.id;
    /**
     * @type {?}
     * @private
     */
    TaminMapComponent.prototype.taminLazyLoadService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFtaW4tbWFwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RhbWluLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RhbWluLW1hcC90YW1pbi1tYXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBUyxNQUFNLGVBQWUsQ0FBQztBQUN2RCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx3REFBd0QsQ0FBQztBQVM1RixNQUFNLE9BQU8saUJBQWlCOzs7O0lBTzVCLFlBQW9CLG9CQUEwQztRQUExQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBTnJELE9BQUUsR0FBRyw2Q0FBNkMsQ0FBQztRQUVuRCxVQUFLLEdBQUcsTUFBTSxDQUFDO1FBQ2YsV0FBTSxHQUFHLE1BQU0sQ0FBQztJQUl6QixDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDOUMsQ0FBQzs7OztJQUVELElBQUk7UUFDRixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQy9ELENBQUM7Ozs7Ozs7SUFFRCxXQUFXLENBQUMsUUFBZ0IsRUFBRSxTQUFpQixFQUFFLElBQVk7O2NBQ3JELEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUN2QyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDOztjQUNuQyxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUM7YUFDdEQsU0FBUyxDQUNSLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFDdEMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLENBQzFCOztjQUNHLE9BQU8sR0FBRyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUd2RCxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2pELEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7OztZQXBDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLDhGQUF5Qzs7YUFFMUM7Ozs7WUFSTyxvQkFBb0I7OztpQkFVekIsS0FBSztrQkFDTCxLQUFLO29CQUNMLEtBQUs7cUJBQ0wsS0FBSzs7OztJQUhOLCtCQUE0RDs7SUFDNUQsZ0NBQXFCOztJQUNyQixrQ0FBd0I7O0lBQ3hCLG1DQUF5Qjs7SUFDekIsK0JBQVE7Ozs7O0lBRUksaURBQWtEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUYW1pbkxhenlMb2FkU2VydmljZX0gZnJvbSAnLi4vLi4vc2VydmljZXMvdGFtaW4tbGF6eS1sb2FkL3RhbWluLWxhenktbG9hZC5zZXJ2aWNlJztcblxuZGVjbGFyZSB2YXIgT3BlbkxheWVyczogYW55O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0YW1pbi1tYXAnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFtaW4tbWFwLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGFtaW4tbWFwLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgVGFtaW5NYXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBqcyA9ICdodHRwOi8vd3d3Lm9wZW5sYXllcnMub3JnL2FwaS9PcGVuTGF5ZXJzLmpzJztcbiAgQElucHV0KCkgY3NzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHdpZHRoID0gJzEwMCUnO1xuICBASW5wdXQoKSBoZWlnaHQgPSAnMTAwJSc7XG4gIGlkOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0YW1pbkxhenlMb2FkU2VydmljZTogVGFtaW5MYXp5TG9hZFNlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaWQgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpLnRvU3RyaW5nKCk7XG4gIH1cblxuICBsb2FkKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMudGFtaW5MYXp5TG9hZFNlcnZpY2UubG9hZEpzKHRoaXMuanMpLnRvUHJvbWlzZSgpO1xuICB9XG5cbiAgc2V0TG9jYXRpb24obGF0aXR1ZGU6IG51bWJlciwgbG9uZ2l0dWRlOiBudW1iZXIsIHpvb206IG51bWJlcikge1xuICAgIGNvbnN0IG1hcCA9IG5ldyBPcGVuTGF5ZXJzLk1hcCh0aGlzLmlkKTtcbiAgICBtYXAuYWRkTGF5ZXIobmV3IE9wZW5MYXllcnMuTGF5ZXIuT1NNKCkpO1xuICAgIGNvbnN0IGxvbkxhdCA9IG5ldyBPcGVuTGF5ZXJzLkxvbkxhdChsb25naXR1ZGUsIGxhdGl0dWRlKVxuICAgICAgLnRyYW5zZm9ybShcbiAgICAgICAgbmV3IE9wZW5MYXllcnMuUHJvamVjdGlvbignRVBTRzo0MzI2JyksXG4gICAgICAgIG1hcC5nZXRQcm9qZWN0aW9uT2JqZWN0KClcbiAgICAgICk7XG4gICAgY29uc3QgbWFya2VycyA9IG5ldyBPcGVuTGF5ZXJzLkxheWVyLk1hcmtlcnMoJ01hcmtlcnMnKTtcblxuXG4gICAgbWFya2Vycy5hZGRNYXJrZXIobmV3IE9wZW5MYXllcnMuTWFya2VyKGxvbkxhdCkpO1xuICAgIG1hcC5zZXRDZW50ZXIobG9uTGF0LCB6b29tKTtcbiAgfVxufVxuIl19