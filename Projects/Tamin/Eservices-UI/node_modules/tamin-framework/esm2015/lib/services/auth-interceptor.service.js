/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { TaminSecurityService } from './tamin-security/tamin-security.service';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./tamin-security/tamin-security.service";
export class AuthInterceptorService {
    /**
     * @param {?} taminSecurityService
     */
    constructor(taminSecurityService) {
        this.taminSecurityService = taminSecurityService;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        if (this.taminSecurityService.hasToken()) {
            /** @type {?} */
            const token = this.taminSecurityService.getToken();
            req = req.clone({
                setHeaders: { Authorization: `Bearer ` + token }
            });
        }
        return next.handle(req)
            .pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            if (error.error instanceof ErrorEvent) {
                // client-side error
            }
            else {
                // server-side error
                if (error.status === 401) {
                    alertify.alert('توجه', 'برای ادامه استفاده از سیستم می بایست نام کاربری و گذرواژه خود را وارد نمایید', (/**
                     * @return {?}
                     */
                    () => {
                        /** @type {?} */
                        const adressParts = window.location.href.split('/#/');
                        /** @type {?} */
                        let redirectUrl = '';
                        if (adressParts.length === 2) {
                            redirectUrl = adressParts[1];
                        }
                        this.taminSecurityService.redirectToLogin(redirectUrl);
                    }));
                }
            }
            return throwError(error);
        })));
    }
}
AuthInterceptorService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
AuthInterceptorService.ctorParameters = () => [
    { type: TaminSecurityService }
];
/** @nocollapse */ AuthInterceptorService.ngInjectableDef = i0.defineInjectable({ factory: function AuthInterceptorService_Factory() { return new AuthInterceptorService(i0.inject(i1.TaminSecurityService)); }, token: AuthInterceptorService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthInterceptorService.prototype.taminSecurityService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1pbnRlcmNlcHRvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vdGFtaW4tZnJhbWV3b3JrLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2F1dGgtaW50ZXJjZXB0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQWEsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzVDLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLHlDQUF5QyxDQUFDO0FBQzdFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBSzFDLE1BQU0sT0FBTyxzQkFBc0I7Ozs7SUFFakMsWUFBb0Isb0JBQTBDO1FBQTFDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7SUFDOUQsQ0FBQzs7Ozs7O0lBRUQsU0FBUyxDQUFDLEdBQXFCLEVBQUUsSUFBaUI7UUFDaEQsSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxFQUFFLEVBQUU7O2tCQUNsQyxLQUFLLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBRTtZQUNsRCxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztnQkFDZCxVQUFVLEVBQUUsRUFBQyxhQUFhLEVBQUUsU0FBUyxHQUFHLEtBQUssRUFBQzthQUMvQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDcEIsSUFBSSxDQUNILFVBQVU7Ozs7UUFBQyxDQUFDLEtBQXdCLEVBQUUsRUFBRTtZQUN0QyxJQUFJLEtBQUssQ0FBQyxLQUFLLFlBQVksVUFBVSxFQUFFO2dCQUNyQyxvQkFBb0I7YUFDckI7aUJBQU07Z0JBQ0wsb0JBQW9CO2dCQUNwQixJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO29CQUN4QixRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSw4RUFBOEU7OztvQkFBRSxHQUFHLEVBQUU7OzhCQUVwRyxXQUFXLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQzs7NEJBQ2pELFdBQVcsR0FBRyxFQUFFO3dCQUVwQixJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFOzRCQUM1QixXQUFXLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO3lCQUM5Qjt3QkFDRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUN6RCxDQUFDLEVBQUMsQ0FBQztpQkFDSjthQUNGO1lBQ0QsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxFQUFDLENBQ0gsQ0FBQztJQUNOLENBQUM7OztZQXJDRixVQUFVLFNBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDOzs7O1lBTHhCLG9CQUFvQjs7Ozs7Ozs7SUFRZCxzREFBa0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtIdHRwRXJyb3JSZXNwb25zZSwgSHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cEludGVyY2VwdG9yLCBIdHRwUmVxdWVzdH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCB0aHJvd0Vycm9yfSBmcm9tICdyeGpzJztcbmltcG9ydCB7VGFtaW5TZWN1cml0eVNlcnZpY2V9IGZyb20gJy4vdGFtaW4tc2VjdXJpdHkvdGFtaW4tc2VjdXJpdHkuc2VydmljZSc7XG5pbXBvcnQge2NhdGNoRXJyb3J9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZGVjbGFyZSB2YXIgYWxlcnRpZnk6IGFueTtcblxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgQXV0aEludGVyY2VwdG9yU2VydmljZSBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0YW1pblNlY3VyaXR5U2VydmljZTogVGFtaW5TZWN1cml0eVNlcnZpY2UpIHtcbiAgfVxuXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIGlmICh0aGlzLnRhbWluU2VjdXJpdHlTZXJ2aWNlLmhhc1Rva2VuKCkpIHtcbiAgICAgIGNvbnN0IHRva2VuID0gdGhpcy50YW1pblNlY3VyaXR5U2VydmljZS5nZXRUb2tlbigpO1xuICAgICAgcmVxID0gcmVxLmNsb25lKHtcbiAgICAgICAgc2V0SGVhZGVyczoge0F1dGhvcml6YXRpb246IGBCZWFyZXIgYCArIHRva2VufVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSlcbiAgICAgIC5waXBlKFxuICAgICAgICBjYXRjaEVycm9yKChlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IuZXJyb3IgaW5zdGFuY2VvZiBFcnJvckV2ZW50KSB7XG4gICAgICAgICAgICAvLyBjbGllbnQtc2lkZSBlcnJvclxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzZXJ2ZXItc2lkZSBlcnJvclxuICAgICAgICAgICAgaWYgKGVycm9yLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgICAgICAgIGFsZXJ0aWZ5LmFsZXJ0KCfYqtmI2KzZhycsICfYqNix2KfbjCDYp9iv2KfZhdmHINin2LPYqtmB2KfYr9mHINin2LIg2LPbjNiz2KrZhSDZhduMINio2KfbjNiz2Kog2YbYp9mFINqp2KfYsdio2LHbjCDZiCDar9iw2LHZiNin2pjZhyDYrtmI2K8g2LHYpyDZiNin2LHYryDZhtmF2KfbjNuM2K8nLCAoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBhZHJlc3NQYXJ0cyA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCcvIy8nKTtcbiAgICAgICAgICAgICAgICBsZXQgcmVkaXJlY3RVcmwgPSAnJztcblxuICAgICAgICAgICAgICAgIGlmIChhZHJlc3NQYXJ0cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJsID0gYWRyZXNzUGFydHNbMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudGFtaW5TZWN1cml0eVNlcnZpY2UucmVkaXJlY3RUb0xvZ2luKHJlZGlyZWN0VXJsKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cbn1cblxuXG5cblxuLypcbmltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0h0dHBDbGllbnQsIEh0dHBFcnJvclJlc3BvbnNlLCBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge09ic2VydmFibGUsIHRocm93RXJyb3J9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtUYW1pblNlY3VyaXR5U2VydmljZX0gZnJvbSAnLi90YW1pbi1zZWN1cml0eS90YW1pbi1zZWN1cml0eS5zZXJ2aWNlJztcbmltcG9ydCB7Y2F0Y2hFcnJvcn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtDb25zdGFudHNTZXJ2aWNlfSBmcm9tICcuL2NvbnN0YW50cy5zZXJ2aWNlJztcblxuXG5kZWNsYXJlIHZhciBhbGVydGlmeTogYW55O1xuXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcbmV4cG9ydCBjbGFzcyBBdXRoSW50ZXJjZXB0b3JTZXJ2aWNlIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhbWluU2VjdXJpdHlTZXJ2aWNlOiBUYW1pblNlY3VyaXR5U2VydmljZSwgcHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LCBwcml2YXRlIGNvbnN0YW50c1NlcnZpY2U6IENvbnN0YW50c1NlcnZpY2UpIHtcbiAgfVxuXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIGlmICh0aGlzLnRhbWluU2VjdXJpdHlTZXJ2aWNlLmhhc1Rva2VuKCkpIHtcbiAgICAgIGNvbnN0IHRva2VuID0gdGhpcy50YW1pblNlY3VyaXR5U2VydmljZS5nZXRUb2tlbigpO1xuICAgICAgcmVxID0gcmVxLmNsb25lKHtcbiAgICAgICAgc2V0SGVhZGVyczoge0F1dGhvcml6YXRpb246IGBCZWFyZXIgYCArIHRva2VufVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSlcbiAgICAgIC5waXBlKFxuICAgICAgICBjYXRjaEVycm9yKChlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IuZXJyb3IgaW5zdGFuY2VvZiBFcnJvckV2ZW50KSB7XG4gICAgICAgICAgICAvLyBjbGllbnQtc2lkZSBlcnJvclxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzZXJ2ZXItc2lkZSBlcnJvclxuICAgICAgICAgICAgaWYgKGVycm9yLnN0YXR1cyA9PT0gNDAxKSB7XG4vISpcbiAgICAgICAgICAgICAgaWYgKHRoaXMudGFtaW5TZWN1cml0eVNlcnZpY2UuaGFzUmVmcmVzaFRva2VuKCkpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMudGFtaW5TZWN1cml0eVNlcnZpY2UucmVOZXdUb2tlbigpLnRoZW4odmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgbmV4dC5oYW5kbGUocmVxKTtcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChyZWFzb24gPT4ge1xuICAgICAgICAgICAgICAgICAgYWxlcnRpZnkuYWxlcnQoJ9iq2YjYrNmHJywgdGhpcy5jb25zdGFudHNTZXJ2aWNlLmdldE5ldHdvcmtFcnJvck1lc3NhZ2UoKSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiohL1xuICAgICAgICAgICAgICAgIGNvbnN0IGFkcmVzc1BhcnRzID0gd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoJy8jLycpO1xuICAgICAgICAgICAgICAgIGxldCByZWRpcmVjdFVybCA9ICcnO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFkcmVzc1BhcnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgcmVkaXJlY3RVcmwgPSBhZHJlc3NQYXJ0c1sxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy50YW1pblNlY3VyaXR5U2VydmljZS5yZWRpcmVjdFRvTG9naW4ocmVkaXJlY3RVcmwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgLy8gfVxuICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cbn1cbiovXG4iXX0=