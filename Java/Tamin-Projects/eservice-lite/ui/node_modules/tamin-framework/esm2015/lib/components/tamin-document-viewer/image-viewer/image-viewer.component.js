/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import { TaminLazyLoadService } from '../../../services/tamin-lazy-load/tamin-lazy-load.service';
import { Subscription } from 'rxjs';
export class ImageViewerComponent {
    /**
     * @param {?} taminLazyLoadService
     */
    constructor(taminLazyLoadService) {
        this.taminLazyLoadService = taminLazyLoadService;
        this.width = '100%';
        this.height = '300px';
        this.subscription = new Subscription();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} url
     * @return {?}
     */
    open(url) {
        this.subscription.add(this.taminLazyLoadService.loadJs('assets/viewerjs/dist/viewer.js').subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.subscription.add(this.taminLazyLoadService.loadCss('assets/viewerjs/dist/viewer.css').subscribe((/**
             * @param {?} value1
             * @return {?}
             */
            value1 => {
                this.img.nativeElement.src = url;
                /** @type {?} */
                const viewer = new Viewer(this.img.nativeElement, {
                    inline: false,
                    /**
                     * @return {?}
                     */
                    viewed() {
                        viewer.zoomTo(1);
                    },
                });
            })));
        })));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
ImageViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'tamin-image-viewer',
                template: "<img alt=\"image\" #img style=\"max-width:100%;max-height:100%;cursor:pointer\">\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ImageViewerComponent.ctorParameters = () => [
    { type: TaminLazyLoadService }
];
ImageViewerComponent.propDecorators = {
    img: [{ type: ViewChild, args: ['img',] }],
    width: [{ type: Input }],
    height: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ImageViewerComponent.prototype.img;
    /** @type {?} */
    ImageViewerComponent.prototype.width;
    /** @type {?} */
    ImageViewerComponent.prototype.height;
    /**
     * @type {?}
     * @private
     */
    ImageViewerComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ImageViewerComponent.prototype.taminLazyLoadService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utdmlld2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3RhbWluLWZyYW1ld29yay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RhbWluLWRvY3VtZW50LXZpZXdlci9pbWFnZS12aWV3ZXIvaW1hZ2Utdmlld2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFxQixTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekYsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sMkRBQTJELENBQUM7QUFDL0YsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLE1BQU0sQ0FBQztBQVNsQyxNQUFNLE9BQU8sb0JBQW9COzs7O0lBUS9CLFlBQW9CLG9CQUEwQztRQUExQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBTHJELFVBQUssR0FBRyxNQUFNLENBQUM7UUFDZixXQUFNLEdBQUcsT0FBTyxDQUFDO1FBRWxCLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUcxQyxDQUFDOzs7O0lBRUQsUUFBUTtJQUNSLENBQUM7Ozs7O0lBRUQsSUFBSSxDQUFDLEdBQVc7UUFDZCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxDQUFDLENBQUMsU0FBUzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3ZHLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUNuQixJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLGlDQUFpQyxDQUFDLENBQUMsU0FBUzs7OztZQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUN0RixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDOztzQkFDM0IsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFO29CQUNoRCxNQUFNLEVBQUUsS0FBSzs7OztvQkFDYixNQUFNO3dCQUNKLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ25CLENBQUM7aUJBQ0YsQ0FBQztZQUNKLENBQUMsRUFBQyxDQUNILENBQUM7UUFDSixDQUFDLEVBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7OztZQXRDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsOEZBQTRDOzthQUU3Qzs7OztZQVRPLG9CQUFvQjs7O2tCQVl6QixTQUFTLFNBQUMsS0FBSztvQkFDZixLQUFLO3FCQUNMLEtBQUs7Ozs7SUFGTixtQ0FBa0M7O0lBQ2xDLHFDQUF3Qjs7SUFDeEIsc0NBQTBCOzs7OztJQUUxQiw0Q0FBMEM7Ozs7O0lBRTlCLG9EQUFrRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIFZpZXdDaGlsZH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1RhbWluTGF6eUxvYWRTZXJ2aWNlfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy90YW1pbi1sYXp5LWxvYWQvdGFtaW4tbGF6eS1sb2FkLnNlcnZpY2UnO1xuaW1wb3J0IHtTdWJzY3JpcHRpb259IGZyb20gJ3J4anMnO1xuXG5kZWNsYXJlIGxldCBWaWV3ZXI6IGFueTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGFtaW4taW1hZ2Utdmlld2VyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2ltYWdlLXZpZXdlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2ltYWdlLXZpZXdlci5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgSW1hZ2VWaWV3ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgQFZpZXdDaGlsZCgnaW1nJykgaW1nOiBFbGVtZW50UmVmO1xuICBASW5wdXQoKSB3aWR0aCA9ICcxMDAlJztcbiAgQElucHV0KCkgaGVpZ2h0ID0gJzMwMHB4JztcblxuICBwcml2YXRlIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhbWluTGF6eUxvYWRTZXJ2aWNlOiBUYW1pbkxhenlMb2FkU2VydmljZSkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gIH1cblxuICBvcGVuKHVybDogc3RyaW5nKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKHRoaXMudGFtaW5MYXp5TG9hZFNlcnZpY2UubG9hZEpzKCdhc3NldHMvdmlld2VyanMvZGlzdC92aWV3ZXIuanMnKS5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi5hZGQoXG4gICAgICAgICAgdGhpcy50YW1pbkxhenlMb2FkU2VydmljZS5sb2FkQ3NzKCdhc3NldHMvdmlld2VyanMvZGlzdC92aWV3ZXIuY3NzJykuc3Vic2NyaWJlKHZhbHVlMSA9PiB7XG4gICAgICAgICAgICB0aGlzLmltZy5uYXRpdmVFbGVtZW50LnNyYyA9IHVybDtcbiAgICAgICAgICAgIGNvbnN0IHZpZXdlciA9IG5ldyBWaWV3ZXIodGhpcy5pbWcubmF0aXZlRWxlbWVudCwge1xuICAgICAgICAgICAgICBpbmxpbmU6IGZhbHNlLFxuICAgICAgICAgICAgICB2aWV3ZWQoKSB7XG4gICAgICAgICAgICAgICAgdmlld2VyLnpvb21UbygxKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=